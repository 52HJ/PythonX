"Save" button in the Export dialog saves results to the path specified, "Copy" copies the whole text to the clipboard.=导出对话框的"Save" 按钮将结果保存至指定的路径，"Copy" 将整个文本复制到剪贴板。
onvert Project=转换项目
roductName; has analyzed which of its features you are using and has found some that you have probably missed.=&productName; 分析了你正使用的一些功能，并查找你可能错过的功能。
roductName; lets you jump from your check-in comment to an issue in your task tracker.=&productName; 允许你从检入的注释中跳转到任务跟踪器中的问题。
hortcut:EditorMoveToPageTop; in a commander panel goes on level up to the parent.=&shortcut:EditorMoveToPageTop; 在命令面板向上跳转至父一级。
'VCS' quick popup='VCS'快速窗
(Re)run=（重新）运行
(Re)run in Debug Mode=（重新）在调试模式下运行
+instance=+instance
-copyWithZone:=-copyWithZone:
-description=-description
-init/encodeWithCoder:=-init/encodeWithCoder:
-initWith=-initWith
-isEqual: and -hash=-isEqual: and -hash
../../../platform/platform-resources-en/src/tips/css/tips.css=../../../platform/platform-resources-en/src/tips/css/tips.css
1=1
2=2
3=3
4=4
5=5
<br/>You can also open a project or edit a file by drag and drop onto Welcome screen=<br/>您还可以打开一个项目通过拖拽到欢迎屏幕
<br0>=<br0>
<br2>=<br2>
<s0>roductName;</s0> allows you to search through the classes, files, tool windows, actions, settings, and symbols of your project by double pressing the <s1>Shift</s1> key.=<s0>&productName;</s0> 允许你搜索项目中的类，文件，工具窗口，操作，设置以及符号，只需按双击 <s1>Shift</s1> 。
<s0>roductName;</s0> enables you to perform the following types of comparison:=<s0>&productName;</s0> 使您可以执行以下类型的比较：
<s0>roductName;</s0> helps create test cases directly from class declaration.=<s0>&productName;</s0> 可以直接从类声明创建测试用例。
<s0>roductName;</s0> makes it possible to launch the embedded local terminal using keyboard only.=<s0>&productName;</s0> 可以只使用键盘就启动内嵌的本地终端。
<s0>roductName;</s0> simplifies your work with colors in Android resource files.=<s0>&productName;</s0> 简化了您的Android资源文件中的颜色工作。
<s0>roductName;</s0> simplifies your work with colors in CSS files.=<s0>&productName;</s0> 简化了你在CSS文件中颜色的工作。
<s0>hortcut:CommentByBlockComment;</s0> encloses the selected block in a block comment (<s1>/*...*/</s1>).=<s0>&shortcut:CommentByBlockComment;</s0> 用块注释 (<s1>/*...*/</s1>)围住所选块。
<s0>hortcut:CommentByLineComment;</s0> comments or uncomments the current line or selected block with single line comments (<s1>//...</s1>).=<s0>&shortcut:CommentByLineComment;</s0> 使用单行注释(<s1>//...</s1>)来注释或取消注释单前行或选中块。
<s0>hortcut:EditorDeleteLine;</s0> in the editor deletes the whole line at the caret.=<s0>&shortcut:EditorDeleteLine;</s0> 在编辑器中删除插入符处的一整行。
<s0>hortcut:EditorDuplicate;</s0> in the editor duplicates the selected block or the current line when no block is selected.=<s0>&shortcut:EditorDuplicate;</s0> 可以在编辑器中重复所选块（如果没有选中块则重复当前行）。
<s0>hortcut:EditorJoinLines;</s0> shortcut joins two lines into one and removes unnecessary space to match your code style.=<s0>&shortcut:EditorJoinLines;</s0> 将两行合并为一行，并移除不需要的空格以匹配你的代码风格。
<s0>hortcut:EditorSelectWord;</s0> (extend selection) in the editor selects the word at the caret and then selects expanding areas of the source code.=<s0>&shortcut:EditorSelectWord;</s0> (扩展选择)在编辑器中选择插入符处的词，然后在源码中扩展选择区域。
<s0>hortcut:HideActiveWindow;</s0> moves the focus to the editor and also hides the current (or last active) tool window.=<s0>&shortcut:HideActiveWindow;</s0> 将焦点移动到编辑器，同时也隐藏当前的（或上一次激活的）工具窗口。
<s0>hortcut:JumpToLastChange;</s0> (<s1>Navigate | Last Edit Location</s1>) brings you back to the last place where you made changes in the code.=<s0>&shortcut:JumpToLastChange;</s0> (<s1>Navigate | Last Edit Location</s1>) 可以将你带回代码中你更改的上一个地方。
<s0>hortcut:RecentFiles;</s0> (<s1>View | Recent Files</s1>) brings a popup list of the recently visited files.=<s0>&shortcut:RecentFiles;</s0> (<s1>View | Recent Files</s1>) 带来最近访问过的文件列表的弹窗。
<s0>*</s0> stands for any symbols.=<s0>*</s0> 代表任何符号。
<s0>Ctrl+Click</s0> (on Windows) or <s1>Cmd+Click</s1> (on MacOS) a tab in the editor to navigate to any part of the file path.=<s0>Ctrl+点击</s0> (Windows) 或 <s1>Cmd+点击</s1> (MacOS) 一个编辑器中的选项卡，可以导航到文件路径中的任何部分。
<s0>TODO</s0> tool window lets you preview each of the encountered TODO items - just click the preview button on the toolbar.=<s0>TODO</s0> 工具窗口允许预览每个遇到的待办事项——只需单击工具栏上的预览按钮即可。
@synthesize=@synthesize
A Class Hierarchy=类层次结构
A custom dictionary is a mere textual file with a <s0>.dic</s0> extension, with each word starting on a new line.=一个自定义词典只是一个带有<s0> .dic </s0>扩展名的文本文件，每个单词在一行。
A special variant of the Code Completion feature invoked by pressing <s0>hortcut:CodeCompletion;</s0> twice allows you to complete XML tag names from namespaces not declared in the current file.=通过按两次 <s0>&shortcut:CodeCompletion;</s0> ，可以执行一个特殊的代码补体功能变体：可以从没有在当前文件中声明的命名空间中补全 XML 标签名称。
ADB Clear App Data=ADB 清除 App 数据
ADB Clear App Data and Restart=ADB 清除 App 数据并重启
ADB Idea=ADB Idea
ADB Kill App=ADB 杀死 App
ADB Operations Popup=ADB 操作弹窗
ADB Restart=ADB 重启
ADB Restart App=ADB 启动 App
ADB Restart App With Debugger=ADB 使用Debugger重启 App
ADB Start App=ADB 启动 App
ADB Start App With Debugger=ADB 使用Debugger启动 App
ADB USB to WIFI=ADB USB to WIFI
ADB Uninstall App=ADB 卸载 App
ADB WIFI=ADB WIFI
AIDL=AIDL
AIDL File=AIDL 文件
AIDL Folder=AIDL 文件夹
APK Project=APK项目
AVD Manager=AVD 管理
Abort Rebasing=终止 Rebasing
About=关于
Activate Debug Tool Window=激活调试工具窗口
Activate Favorites Tool Window=激活收藏夹工具窗口
Activate Find Tool Window=激活查找工具窗口
Activate Hierarchy Tool Window=激活层次结构工具窗口
Activate Messages Tool Window=激活消息工具窗口
Activate Navigation Bar=激活导航栏
Activate Project Tool Window=激活项目工具窗口
Activate Run Tool Window=激活运行工具窗口
Activate Structure Tool Window=激活结构工具窗口
Activate TODO Tool Window=激活TODO工具窗口
Activate Terminal Tool Window=激活终端工具窗口
Activate Version Control Tool Window=激活版本控制工具窗口
Activate navigation bar=激活导航栏
Activity=Activity
Actual Size=实际尺寸
Actual Zoom=实际缩放
Add=添加
Add As Library=添加为库
Add Cloud snapshot location=添加云快照位置
Add Method '' to Blacklist=将方法添加到黑名单
Add Property Files to Resource Bundle=将资源文件添加到资源包
Add RTL Support Where Possible=在可能的地方添加RTL支持
Add Sample Data File=添加示例数据文件
Add Stepping Filter=添加步进过滤器
Add Watch=添加Watch
Add Watchpoint=添加观察点
Add gradle plugin=添加gradle插件
Add section rule=添加部分规则
Add several cursors to your editor.=向编辑器添加多个光标。
Add to pattern suite=添加到模式套件
Add to temp suite=添加到临时套件
AddFrameworkSupport=添加框架支持
AddToISuite=AddToISuite
Adjust Range=调整范围
After pressing '!':=按“!”后：
After the code fragment that you want to change, type a dot (<s0>.</s0>), optionally press <s1>hortcut:InsertLiveTemplate;</s1> and select the desired option.=在想要改变的代码片断后面，输入一个点 (<s0>.</s0>)，可选地按下 <s1>&shortcut:InsertLiveTemplate;</s1> 然后选择所需的选项。
All changes are synchronized with the original regular expression, and escapes are presented automatically.=所有更改会与原始正则表达式同步，并自动显示转义。
All escaped characters in the <s0>*.properties</s0> files in the format <s1>\uXXXX</s1>, are displayed in the resource bundle editor as un-escaped unicode literals.=<s0>*.properties</s0> 文件中 <s1>\uXXXX</s1> 格式的所有转义字符，在资源束编辑器中显示为未转义的unicode 文字。
All texts, including comments, textual strings and literals, are inspected against the pre-defined dictionaries.=所有文本，包括注释，文本字符串和文字字面量，都会根据预定义的字典进行检查。
All the words from the current file that start with the typed prefix will appear in the lookup list.=来自当前文件的所有以键入的前缀开头的单词将显示在查找列表中。
All typos are highlighted, which leaves you with the task of choosing the correct word, accepting the current spelling, or disabling inspection.=所有打字错误都被高亮显示，使您可以选择正确的单词，接受当前的拼写或禁用检查。
All you have to do is to define issue navigation patterns in the <s0>Settings | Version Control | Issue Navigation</s0> dialog:=你所需要做的就是在 <s0>Settings | Version Control | Issue Navigation</s0> 对话框中定义问题导航模式：
All you have to do is to point to the directories where your dictionaries are stored, in the <s0>Spelling</s0> of the <s1>Settings</s1> dialog.=所有你需要做的是在<s1>Settings</s1> 对话框的<s0>Spelling</s0> 指向你的字典存储目录。
All your most indispensable VCS commands are just one-click away...=只需一键即可使用常用的VCS命令...
Allows to provide more information to the support team by request=允许通过请求向支持小组提供更多信息
An intention action feature will suggest you to automatically create the necessary tag, without the need for you to leave your current editing location.=意图操作功能将建议您自动创建必需的标签，而无需离开当前的编辑位置。
Analysis Actions=分析操作
Analyze=分析
Analyze APK=分析APK
Analyze Dependencies on Specified Target=分析指定目标的依赖关系
Analyze Stacktrace=分析堆栈跟踪
Analyze Stacktrace From Task=从任务中分析堆栈跟踪
Android=Android
Android Auto=Android Auto
Android ButterKnife Zelezny=Android ButterKnife Zelezny
Android Clean Run=Android Clean Run
Android Component=Android组件
Android Device Monitor=Android设备监视器
Android Manifest File=Android Manifest 文件
Android NDK Support=Android NDK 支持
Android Profiler=Android Profiler
Android Studio Help=Android Studio帮助
Android Support=Android支持
Android TV Activity=Android TV Activity
Android Things Empty Activity=Android Things Empty Activity
Android Things Peripheral Activity=Android Things Peripheral Activity
Android resource directory=Android资源目录
Android resource file=Android资源文件
Android.DeviceExplorer.GotoDatabaseFolder=Android.DeviceExplorer.GotoDatabaseFolder
Android.DeviceExplorer.GotoSdcardFolder=Android.DeviceExplorer.GotoSdcardFolder
Android.DeviceExplorer.GotoSharedPrefsFolder=Android.DeviceExplorer.GotoSharedPrefsFolder
Android.DeviceExplorer.Help=Android.DeviceExplorer.Help
Annotate=注释
App Links Assistant=App 链接助手
App Widget=App Widget
Apply Patch=应用补丁
Apply Patch from Clipboard=从剪贴板应用补丁
As a result, such a file will be ignored by indexing, inspection and code completion.=这样的话，这样的文件将被索引，检查和代码补全所忽略。
Assets Folder=Assets 文件夹
Attach debugger to Android process=将调试器附加到Android进程
Attach external project=附加外部项目
Attach project=附加到项目
Auto Show=自动显示
Auto-import=自动导入
Auto-indent line(s)=自动缩进行
Automatically Render=自动渲染
Automatically Show/Hide Tool Window=自动显示/隐藏工具窗口
Back=后退
Background Tasks=后台任务
Balloon Layout=气球布局
Basic Activity=基本Activity
Besides recent files, you can bring up results of the usage searches you have performed recently.=除了最近的文件，您还可以找出最近执行的使用搜索结果。
Bidi Text Direction=Bidi文本方向
Blank Wear Activity=空白穿戴Activity
Block Parameter=块参数
Bookmarks=书签
Bottom Navigation Activity=底部导航Activity
Branch or Tag=分支或标签
Branches=分枝
Breakpoint Actions=断点操作
Brief Info=简介
Broadcast Receiver=Broadcast Receiver
Browse=浏览
Browse CVS Repository=浏览CVS存储库
Browse Subversion Repository=浏览Subversion存储库
Browse console history=浏览控制台历史记录
Browse directory=浏览目录
Build APK(s)=构建APK
Build Module=构建模块
Build Project=构建项目
Build Resources=构建资源
Build Variants=构建变量
BuildArtifact=构建Artifact
By pressing <s0>hortcut:ChooseRunConfiguration;</s0> you can access the Run/Debug dropdown on the main toolbar, without the need to use your mouse.=按下 <s0>&shortcut:ChooseRunConfiguration;</s0> ，你可以在菜单工具栏中进入运行/调试下拉框，而不需要使用鼠标。
C++ Class=C++ 类
C/C++ Header File=C/C++ 头文件
C/C++ Source File=C/C++ 源文件
CR - Classic Mac (
)=CR - Classic Mac (
)
CRLF - Windows (
)=CRLF - Windows (
)
CVS=CVS
CVS Integration=CVS集成
Call hierarchy=调用层次结构
Cancel exclusion for the selected directory to make its files processable by IDE's actions=取消选中目录的排除，使其文件可以通过IDE的操作进行处理
Cannot create directory ''{0}''=无法创建目录 ''{0}''
Capture Analysis=捕获分析
Capture Memory Snapshot=捕获内存快照
Capture Tool=捕获工具
Capture memory allocations data=捕获内存分配数据
Capture memory snapshot=捕获内存快照
Captures=捕获
Change File Encoding=更改文件编码
Change File Language=更改文件语言
Change Icon=更改图标
Change SDK version=更改SDK版本
Change Signature=更改签名
Change Template Data Language=更改模板数据语言
Change current Look\eel=改变当前界面外观
Change current Look\\eel=改变当前视图\&外观
Change current code style scheme, color\onts scheme, keymap or Look\eel=改变当前的代码风格方案，颜色&字体方案，快捷键或外观&感觉等。
Change current code style scheme, color\\onts scheme, keymap or Look\\eel=改变当前的代码风格方案、颜色等 (&F)
Change file encoding=更改文件编码
Check Component Functions Usage Search=Check Component Functions Usage Search
Check Partial Body Resolve=检查部分体解析
Check Project Status=检查项目状态
Check Status=检查状态
Check for Update=检查更新
Check out project from Version Control=从版本控制检出项目
Checkout Revision=检出版本
Cherry-Pick=Cherry-Pick
Choose <s0>File | Settings</s0> on the main menu, and then open the page <s1>Terminal</s1>.=在主菜单选择<s0>File | Settings</s0> ，然后打开 <s1>Terminal</s1> 页。
Choose <s0>VCS | VCS Operations Popup</s0> on the main menu, and get a popup with the VCS commands that are relevant to the current context:=在主菜单选择 <s0>VCS | VCS Operations Popup</s0> ，然后获得一个与当前上下文关联的VCS命令弹窗。
Choose Debug Configuration=选择调试配置
Choose Directory=选择目录
Choose Run Configuration=选择运行配置
Choose a task to assign a shortcut=选择一个任务来分配快捷键
Choose symbol from the drop-down list that appears.=从出现的下拉列表中选择符号。
Choose the class from a drop-down list that appears.=从出现的下拉列表中选择类。
Choose the desired action from the suggestion list.=从建议列表中选择所需的操作。
Choose the desired file and press <s2>Enter</s2> to open it.=选择所需的文件，然后按<s2>Enter</s2>将其打开。
Choose the desired inspection from the suggestion list and then specify the desired scope.=从建议列表中选择所需的检查，然后指定所需的范围。
Class=类
Class Hierarchy=类层次结构
Clean Already Unshelved=Clean Already Unshelved
Clean Project=清除项目
Cleanup=清除
Cleanup Project=清除项目
Clear=清除
Clear Context=清除上下文
Click color icons to choose the desired color from the color picker.=单击颜色图标可以从颜色选择器中选择所需的颜色。
Click one of these buttons to append contents of the current pane of the Differences viewer to the other pane.=单击其中一个按钮将差异查看器的当前窗格的内容附加到另一个窗格。
Click the icon or link to select your VCS=点击图标或链接,选择您的VCS。
Click this button to revert changes.=单击此按钮还原更改。
Clicking a hyperlink brings you directly to an issue in your task tracker.=单击超链接可以直接引导您到任务跟踪器中的问题。
Clone=克隆
Clone the cursor strictly upwards or downwards.=严格向上或向下地克隆光标。
Close=关闭
Close Active Task=关闭活动任务
Close Active Window=关闭活动窗口
Close First=关闭第一个
Close Others=关闭其他
Close Project=关闭项目
Close Unmodified=关闭未修改的
Close active editor tab=关闭活动编辑器选项卡
Close current project=关闭当前项目
Close thumbnails=关闭缩略图
Close thumbnails window=关闭缩略图窗口
Code=代码
Code Editor View Actions=代码编辑器视图操作
Code Formatting Actions=代码格式化操作
Code Iris=Code Iris
Code View Actions=代码视图操作
Collapse=折叠
Collapse All=全部折叠
Collapse Linear Branches=折叠线性分支
Collapse Tree Node=折叠树节点
Collapse all=全部折叠
Column Selection Mode=列选择模式
Combine to Resource Bundle=合并到资源包
Comment / uncomment with block comment=用块注释注释/取消注释
Comment / uncomment with line comment=用行注释注释/取消注释
Comment Actions=注释操作
Commit File=提交文件
Commit Project=提交项目
Commit project to VCS=向VCS提交项目
Compact References View=Compact References View
Compare Base and Left Contents=比较基础和左边内容
Compare Base and Middle Contents=比较基础和中边内容
Compare Base and Right Contents=比较基础和右边内容
Compare Left and Middle Contents=比较左右内容
Compare Left and Right Contents=比较左右的内容
Compare Subversion Properties=比较Subversion属性
Compare Versions=比较版本
Compare a class or class member with another class or class member=将类或类成员与另一个类或类成员进行比较
Compare a local file with the current revision in your version control repository=将本地文件与版本控制存储库中的当前版本进行比较
Compare a local file with versions in the Local History=将本地文件与本地历史记录中的版本进行比较
Compare any 2 local files to each other: text or binary=将任何2个本地文件彼此进行比较：文本或二进制
Compare any local file with the current file in the Editor=将任何本地文件与编辑器中的当前文件进行比较
Compare directories=比较目录
Compare selected text in the Editor with Clipboard contents=将编辑器中的选定文本与剪贴板内容进行比较
Compare with Branch=与分行比较
Compare with Branch/Bookmark=与分支/书签比较
Compare with Clipboard=与剪贴板比较
Compare with Local=与本地比较
Compare with Specified Revision=与具体修订比较
Compare {0,choice,0#Left|1#Middle|2#Right} and {1,choice,0#Left|1#Middle|2#Right} Contents=比较 {0,choice,0#Left|1#Middle|2#Right} 和 {1,choice,0#Left|1#Middle|2#Right} 的内容
Compile=编译
Compile and Run=编译和运行
Compile selected file, package or module=编译选定的文件，包或模块
Compile/Debug Actions=编译/调试操作
Compile/Run Actions=编译/运行操作
CompileDirty=CompileDirty
CompileProject=编译项目
Complete statement=补全语句
Completion=完成
Composite Build Configuration=复合构建配置
Configure CVS Roots=配置CVS根
Configure Default Encoding=配置默认编码
Configure Kotlin (JavaScript) in Project=在项目中配置Kotlin (JavaScript)
Configure Kotlin Plugin Updates=配置Kotlin插件更新
Configure Kotlin in Project=在项目中配置Kotlin
Configure Plugins=配置插件
Configure Project Subset=配置项目子集
Configure Servers=配置服务器
Configure project structure=配置项目结构
Connect=连接
Connection Assistant=连接助手
Constructor=构造函数
Content Provider=Content Provider
Content-based=基于内容
Context Help=上下文帮助
Context Info=上下文信息
Context info=上下文信息
Continue Grafting=继续 Grafting
Continue Rebasing=继续 Rebasing
Convert Indents=转换缩进
Convert Java File to Kotlin File=将Java文件转换为Kotlin文件
Convert Schema=转换 Schema
Convert To Instance Method=转换为实例方法
Convert project to the new format=新格式转换项目
Convert project to the new format.=将项目转换为新格式
Convert to Block=转换为块
Convert to Function=转换为函数
Convert to Instance Variable=转换为实例变量
Convert to Java=转换为Java
Convert to Method=转换为方法
Convert to PNG=转换为PNG
Convert to Property=转换为属性
Convert to WebP=转换为WebP
Copy=复制
Copy Configuration=复制配置
Copy Current Diagram to Clipboard=将当前图复制到剪贴板
Copy Current File As Diagnostic Test=将当前文件复制为诊断测试
Copy Paths=复制路径
Copy Revision Number=复制版本号
Copy current line to clipboard=将当前行复制到剪贴板
Copy to clipboard=复制到剪贴板
Copyright=版权
Coverage=覆盖率
Create=创建…
Create 9-Patch file=创建9-Patch文件
Create Branch=创建分支
Create Changelist=创建修改列表
Create CodeIris Graph=创建CodeIris图
Create External=创建 External
Create Gist=创建Gist
Create Git Repository=创建Git存储库
Create JavaDocs for all elements=为所有元素创建JavaDocs
Create JavaDocs for the selected element=为选中元素创建JavaDoc
Create Mercurial Repository=创建Mercurial存储库
Create New File=创建新文件
Create New Project=创建新项目
Create Patch=创建补丁
Create Project=创建项目
Create Pull Request=创建拉请求
Create Rectangular Selection=创建矩形选区
Create Run Configuration=创建运行配置
Create Tag=创建标签
Create a new project=创建一个新项目
Create a new project from scratch=从头开始创建一个新项目
Create backup for debugging Kotlin incremental compilation=创建用于调试Kotlin增量编译的备份
Create new file=创建新文件
Custom Folding=自定义折叠
Custom View=自定义View
Cut=剪切
Cut current line to clipboard=将当前行剪切到剪贴板
Cut up to Line End=剪切到行尾
Cut/Copy/Paste Actions=剪切/复制/粘贴操作
DEFAULT KEYMAP=默认快捷键
Daydream=Daydream
Debug=调试
Debug Actions=调试操作
Debug Build Process=调试构建过程
Debug context configuration=调试上下文配置
Debugger Actions=调试器操作
Debugging=调试
Declaration=声明
Declare Members=声明的成员
Decompile Kotlin To Java=将Kotlin解码为Java
Default Settings=默认设置
Define=定义
Delete=删除
Delete Line=删除行
Delete Tag=删除标签
Delete line at caret=删除插入符号所在行
Delete to word end=删除到词尾
Delete to word start=删除到词首
Depending on the context, you can choose to disable inspection, fix all problems, change inspection profile, etc.=根据上下文，您可以选择禁用检查，修复所有问题，更改检查配置文件等。
Deploy=部署
Deploy Module to App Engine=将模块部署到App Engine
Desktop Directory=桌面目录
Destructor=析构函数
Detach=分离
Device File Explorer=设备文件浏览器
Did you know that it's possible to copy rich text ?=你知道有可能复制富文本吗？
Did you know that you can close tabs in the editor and the tool windows of roductName; without actually using the context menu commands?=你知道吗？你可以关闭&productName;的编辑器中的选项卡和工具窗口，而不使用上下文菜单命令。
Did you know that you can edit both opening and closing tags in XML/HTML files ?=你知道你可以同时编辑XML / HTML文件中的打开和关闭标签吗？
Did you know that you can remove just those tool window buttons you don't currently need?=你知道你可以删除你当前不需要的那些工具窗口按钮吗？
Diff & Merge=差异与合并
Diff Show Settings Popup=差异显示设置弹出窗口
Direction is determined by initial character(s)=方向由初始字符确定
Display tasks inherited from sub-projects=从子项目继承的显示任务
Dissociate Resource Bundle=拆分资源包
Docked Mode=停靠模式
Drop an OutOfMemoryError in Metaspace=在Metaspace中丢弃一个内存溢出错误
Dump Lookup Element Weights=转储查找元素权重
Dump lookup element weights to log=转储查找元素权重进行日志记录
Duplicate Watch=复制观察点
Duplicate current line=重复当前行
Duplicates Form Send To Left=复制表单发送到左
Duplicates Form Send To Right=复制表单发送到右
ECTranslation=ECTranslation
Each antivirus check in your project consumes resources.=项目中的每个防病毒检查都会消耗资源。
Edit=编辑
Edit Build Types=编辑构建类型
Edit Code Actions=编辑代码操作
Edit Configuration=编辑配置
Edit Custom Properties=编辑自定义属性
Edit Custom VM Options=编辑自定义VM选项
Edit Flavors=编辑Flavors
Edit Libraries and Dependencies=编辑库和依赖
Edit Macros=编辑宏
Edit Properties=编辑属性
Edit Revision Comment=编辑修订注释
Edit Run Configuration=编辑运行配置
Edit Task=编辑任务
Edit and Watch=编辑和观察点
Edit source / View source=编辑源码/查看源码
Editing=编辑
Emmet Preview=Emmet预览
Emoji & Symbols=Emoji和符号
Empty Activity=空Activity
Enable ADB Integration=启用ADB集成
Enable Tracking With Hidden Memory View=启用隐藏内存查看跟踪
Enable Version Control Integration=启用版本控制集成
Enable or disable additional log categories=启用或禁用附加日志类别
Enable or disable additional log categories.=启用或禁用额外的日志类别
Enable the horizontal scrolling with the mouse wheel by holding the <s0>Shift</s0> key.=按住 <s0>Shift</s0> 键滚动鼠标滚轮可以启用水平滚动。
Enable this framework in the corresponding page of the <s0>Editor | Emmet</s0> node (<s1>Settings/Preferences</s1>):=在<s0>Editor | Emmet</s0> (<s1>Settings/Preferences</s1>) 节点下相应的页面启用此框加：
Enable value renderers=启用值渲染器
Encode XML/HTML Special Characters=编码XML/HTML特殊字符
Enter Distraction Free Mode=进入免打扰模式
Enter Presentation Mode=进入演示模式
Enter Presentation mode=进入演示模式
Equality Operators=相等运算符
Evaluate Expression=计算表达式
Evaluate expression=计算表达式
Event Log=事件日志
Exclude=排除
Exclude From Project=从项目中排除
Exclude from stub generation=从存根生成中排除
Exclude from suite=排除套件
Execute After Build=执行后构建
Execute After Rebuild=重建后执行
Execute After Sync=同步后执行
Execute Before Build=构建前执行
Execute Before Rebuild=重建前执行
Execute Before Run/Debug=运行/调试之前执行…
Execute Before Sync=同步前执行
Execute Gradle Task=执行Gradle任务
Execute Groovy Code=执行Groovy代码
Execute Kotlin Code=执行Kotlin代码
Exit=退出
Exit Distraction Free Mode=退出免打扰模式
Exit Presentation Mode=退出演示模式
Exit Presentation mode=退出演示模式
Expand / collapse code block=展开/折叠代码块
Expand All=全部展开
Expand Linear Branches=展开线性分支
Expand Tree Node=展开树节点
Expand all=全部展开
Export Settings=导出设置
Export Test Results=导出测试结果
Export To Eclipse=导出到Eclipse
Export global settings=导出全局设置
Export to Text File=导出到文本文件
Export to Zip File=导出到Zip文件
Export to file=导出到文件
Export/Import Actions=导出/导入操作
Extend selection=扩展选择
External Build Systems=外部构建系统
External Doc=外部文档
External Settings=外部设置
External Tools=外部工具
Extract=提取
Extract Constant=提取常量
Extract Method=提取方法
Fetch=取
Field=字段
File=文件
File Encoding=文件编码
File History=文件历史记录
File Open Actions=文件打开操作
File Path=文件路径
File Size=文件大小
File Structure=文件结构
Find=查找
Find Implicit Nothing Calls=Find Implicit Nothing Calls
Find Sample Code=查找示例代码
Find and Add Module=查找和添加模块
Find in path=在路径中查找
Find next / previous=查找下一个/上一个
Find usages / Find usages in file=查找使用/在文件中查找使用
Finish Patches=完成补丁
First, right-click the editor tab, and choose <s0>Close Others</s0> on the context menu.=其一，右击选项卡，在上下文菜单中选择<s0>Close Others</s0>。
Fix doc comment=修复文档注释
Floating Mode=浮动模式
Focus Text Filter=关注文本过滤
Fold=折叠
Fold Code Block=折叠代码块
Fold Lines Like This=像这样折叠行
Folder=文件夹
Folding=折叠
Following a link shows documentation for the selected constructor.=下面的链接显示所选构造函数的文档。
For a directory, new line separator applies recursively.=对于目录，新的换行符递归地应用。
For example, go to the <s0>java.util.Collections</s0> JDK class, place the cursor within the <s1>EMPTY_MAP</s1> field and press <s2>hortcut:CopyReference;</s2>:=例如。转到<s0>java.util.Collections</s0> JDK 类，将插入符号放到 <s1>EMPTY_MAP</s1> 字段内，然后按 <s2>&shortcut:CopyReference;</s2>：
For example, if the <s0>*.properties</s0> file contains a property value=比如，如果 <s0>*.properties</s0> 文件包含属性值
For example, in the code fragment below, you can select an expression in the code:=例如，在下面的代码片段中，您可以在代码中选择一个表达式：
For example, it may select a method name, then the expression that calls this method, then the whole statement, then the containing block, etc.=例如，它也许会选择方法名称，然后选择调用此方法的表达式，然后整个语句，然后包含语句的代码块等等。
For example, start typing=例如，开始输入
For example, start typing a class name and press <s0>hortcut:CodeCompletion;</s0> to complete it.=例如，先输入一个类名，然后按<s0>&shortcut:CodeCompletion;</s0> 来补全它。
For example, type=例如，输入
For example, type <s2>it</s2> and press <s3>hortcut:InsertLiveTemplate;</s3> to see what happens.=比如，输入 <s2>it</s2> 然后按 <s3>&shortcut:InsertLiveTemplate;</s3> 看会发生什么。
For example, use $DATE$ and $TIME$ to specify the exact date and time of the printout.=比如，使用 $DATE$ 和 $TIME$ 指明打印的确切日期和时间。
For example, when you have=例如，当你有
For the embedded local terminal, you can define your favorite shell, default tab name, and other settings.=对于嵌入的本地终端，您可以定义自己喜欢的shell，默认选项卡名称和其他设置。
For the pattern search in the <s0>Go to Class</s0>, <s1>Go to Symbol</s1> and <s2>Go to File</s2> pop-up frames, use <s3>*</s3> and space symbols.=在 <s0>Go to Class</s0> ， <s1>Go to Symbol</s1> 和 <s2>Go to File</s2> 的弹窗的搜索模式中，可以使用 <s3>*</s3> 和空格符。
Force Return=强制返回
Force Run to Cursor=强制运行到光标处
Force recompilation for selected module, file or package=强制重新编译选中模块，文件或软件包
Fragment=Fragment
Fragment (Blank)=Fragment (空白)
Fragment (List)=Fragment (列表)
Fragment (with a +1 button)=Fragment (with a +1 button)
From the <s0>Changes</s0> tool window you can perform all the necessary version control actions: commit changes, manage changelists, put resources under version control, examine differences and more.=在<s0>Changes</s0> 工具窗口，您可以执行所有必要的版本控制操作：提交更改，管理更改列表，将资源放在版本控制下，检查差异等。
Fullscreen Activity=全屏Activity
Fully Expand Tree Node=完全展开树节点
Function to Scope=功能范围
Gant Script=Gant Script
Generate=生成
Generate Butterknife Injections=生成butterknife注入
Generate Definitions=生成定义
Generate GroovyDoc=生成GroovyDoc
Generate Signed APK=生成签名的APK
Generate Sources=生成资源
Generate XML Document from XSD Schema=从XSD架构生成XML文档
Generate XSD Schema from XML File=从XML文件生成XSD架构
Generate code=生成代码
Generate code...=生成代码...
GenerateAntBuild=GenerateAntBuild
Generated Sources Root=生成资源root
Genymotion=Genymotion
Genymotion Device Manager=Genymotion设备管理器
Get=获取
Get thread dump=获取线程dump
Git=Git
Git Integration=Git集成
GitHub=GitHub
Global CVS Settings=全局CVS设置
Go To=转到
Go back to previous tool window=返回上一个工具窗口
Go to Desktop directory=去桌面目录目录
Go to declaration=转到声明
Go to editor (from tool window)=转到编辑器（从工具窗口）
Go to file=转到文件
Go to home directory=转到主目录
Go to implementation(s)=转到实现
Go to line=转到行
Go to module directory=转到模块目录
Go to next / previous editor tab=转到下一个/上一个编辑器选项卡
Go to numbered bookmark=转到编号书签
Go to previous / next method=转到上一个/下一个方法
Go to project directory=转到项目目录
Go to super-method / super-class=转到超级方法/超类
Go to type declaration=转到类型声明
Google=Google
Google AdMob Ads Activity=Google AdMob 广告 Activity
Google Cloud Tools Core=Google云端工具核心
Google Cloud Tools For Android Studio=适用于Android Studio的Google云端工具
Google Developers Samples=Google Developers示例
Google Login=Google登录
Google Maps Activity=Google 地图 Activity
Google Maps Wear Activity=Google 地图穿戴 Activity
Goto=转到
Goto patch=跳转到补丁
Gradle=Gradle
Gradle Console=Gradle控制台
Grid=网格
Groovy=Groovy
Groovy Console=Groovy控制台
Groovy IDE Scripting Shell=Groovy IDE脚本Shell
Groovy Resources=Groovy资源
Groovy Shell=Groovy Shell
Groovy.NewClass=Groovy.NewClass
Groovy.NewScript=Groovy.NewScript
Group Tasks=组任务
GsonFormat=GsonFormat
Have you noticed the buttons <i0><i1> marking differences in the Differences viewer?=你有没有注意到按钮 <i0><i1> 在差异查看器中处理差异？
Help=帮助
Hide=隐藏
Hide Coerage Info=隐藏覆盖率信息
Hide Coverage Data=隐藏覆盖数据
Hide Grid=隐藏网格
Hide active or last active window=隐藏活动窗口或上一个活动窗口
Hide active tool window=隐藏活动工具窗口
Hide out-of-scope variables=隐藏超出范围的变量
Highlight Non-Picked Commits=高亮未选择的提交
Highlight usages in file=在文件中高亮显示使用
Home Directory=主目录
Horizontal Toolbars=水平工具栏
Hover over the tab title and either press the middle mouse button or use <s0>Shift+click</s0>.=将鼠标悬停在选项卡标题上，然后按鼠标中键或使用<s0> Shift单击</s0>。
Hover your mouse pointer over a warning, error stripe or just some section of source code on the scroll bar outside of the scroll box, and you will see a lens:=将鼠标指针悬停在警告、错误条纹或滚动条外的滚动条上的部分源代码，您将看到一个镜头：
I18n for Java=I18n for Java
If a method signature has been changed, roductName; highlights the tags that ran out of sync with the documentation comment and suggests a quick fix:=如果方法签名已更改，&productName;高亮与文档注释不同步的标签，并给出快速修复的建议：
If it turns red, then you have to look for a mistake.=如果变成红色，那么你必须寻找一下有什么错误。
If necessary, you can always return the file to its original type using the <s0>Mark as <file type></s0> context menu command.=如果需要，你总是可以在上下文菜单命令中使用<s0>Mark as <file type></s0> 返回文件的原始类型。
If necessary, you can show the tool window buttons just for a moment.=如有必要，您可以稍等一下显示工具窗口按钮。
If nothing is selected in the editor, and you press <s0>hortcut:$Copy;</s0>, then the whole line at caret is copied to the clipboard.=如果编辑器中没有选中的话，按<s0>&shortcut:$Copy;</s0> 会把插入符号处的整行复制到剪贴板中。
If the background turns green, you are lucky.=如果背景变绿，你很幸运，说明校验通过。
If the cursor is between the parentheses of a method call, pressing <s0>hortcut:ParameterInfo;</s0> brings up a list of valid parameters.=如果光标位于一个方法调用的括号之间，按 <s0>&shortcut:ParameterInfo;</s0> 带来一系列有效的参数。
If the lens annoys you, get rid of it by clearing the check box on the context menu of the code analysis marker:=如果镜头惹恼你，可以通过清除代码分析标记的上下文菜单的复选框摆脱它：
If the namespace is not declared yet the declaration is generated automatically.=如果该命名空间还未申明，则会自动生成声明。
If there are too many run/debug configurations of the same type, you can group them into folders, and thus distinguish them visually.=如果有太多相同类型的运行调试配置，可以将它们分组到文件夹中，从而可视化地区分它们。
If you are working on a large project, with numerous TODO items, filter them by scopes.=如果您工作于大型项目，有许多TODO项目，请通过范围过滤他们。
If you close the dialog, you can always get back to it from the <s0>Help | Tip of the Day</s0> main menu item.=如果你关闭了对话框，你总是可以在主菜单中的 <s0>Help | Tip of the Day</s0> 找回它。
If you don't like a list of members to autopopup after you type a dot, you may turn it off in the "Editor" options (<f0>Options | IDE Settings</f0>).=如果您在键入点后不喜欢自动弹窗的成员列表，你可以在"Editor"选项中将它关闭 (<f0>Options | IDE Settings</f0>)。
If you don't want the "lightbulb" icon to appear in the editor to indicate a particular fix, open the list of available actions by pressing <s0>hortcut:ShowIntentionActions;</s0> and toggle the lightbulb icon near the text of the action into inactive state by clicking it with the mouse.<br1>=如果您不希望编辑器中出现“灯泡”图标来指示特定修复，请按<s0>&shortcut:ShowIntentionActions;</s0> 打开可用操作列表，然后通过用鼠标点击操作文本旁边的灯泡按钮来切换为未激活状态。<br1>
If you don't want to commit some of your changes to the repository, you can set them aside for a while, by moving to a separate changelist, or by putting them to a shelf.=如果您不想将某些更改提交到存储库，通过移动到单独的更改列表或将它们放到shelf，你可以将它们暂放到一边，
If you keep <s0>Shift</s0> pressed, the <i1>chevrons</i1> turn into <i2>.=如果按住 <s0>Shift</s0> ， <i1>chevrons</i1> 变为 <i2>。
If you lack words in the pre-defined dictionaries, you can create your own ones.=如果您在预定义的字典中缺少单词，您可以创建自己的字典。
If you need more workspace, you can hide the tool windows bars: click <i0> in the lower left corner.=如果您需要更多的工作区，您可以隐藏工具窗口栏：点击左下角的<i0>。
If you notice that roductName; works slowly, consider the possibility to reduce the number of folders under antivirus protection.=如果你注意到 &productName; 工作缓慢，考虑一下减少防病毒保护下的文件夹数量的可能性。
If you place the caret at certain symbol and press <s0>hortcut:Refactorings.QuickListPopupAction;</s0>, you will see the list of refactorings applicable to the current context.=如果你把插入符号放到某符号处并按下 <s0>&shortcut:Refactorings.QuickListPopupAction;</s0>，你将会看到适用于当前上下文的重构列表。
If you want the method you chose to be imported statically, press <s1>hortcut:ShowIntentionActions;</s1> and see what happens:=如果你想让你选择的方法静态导入，按下 <s1>&shortcut:ShowIntentionActions;</s1> 看会发生什么。
If you want to return to the original text, right-click such a blue template, and choose <s0>Restore defaults</s0> on the context menu.=如果要恢复原始文本，请右键单击此蓝色模板，然后在上下文菜单上选择<s0>Restore defaults（恢复默认值）</s0>。
If you've changed a live template, it becomes blue.=如果您更改了代码模板，则它会变成蓝色。
Ignore=忽略
Ignore Left Side=忽略左侧
Ignore Right Side=忽略右侧
Ignore external project=忽略外部项目
Image Asset=图像资源
Image Layers=图像层
Implement Method=实现方法
Import=导入
Import Patches=导入补丁
Import Project=导入项目
Import Projects=导入项目
Import Sample=导入Sample
Import Settings=导入设置
Import Test Results=导入测试结果
Import an Android code sample=导入Android代码示例
Import global settings=导入全局设置
Import into CVS=导入CVS
Import into Subversion=导入Subversion
Import into Version Control=导入到版本控制
Import project (Gradle, Eclipse ADT, etc.)=导入项目（Gradle，Eclipse ADT，等）
Imports Hierarchy=导入层次结构
In order to do this press the "<f0>Export</f0>" button on the toolbar to the left from the results tree.=为此，请在结果树左侧的工具栏上的点击“<f0>Export（导出）</f0>”按钮。
In the <s0>Live Templates</s0> settings, use speed search to find templates with certain text in the template abbreviation, body or description.=在 <s0>Live Templates（代码模板）</s0> 设置中，使用快速搜索来查找在模板缩写、内容或描述中包含某些文字的模板。
In the <s0>Project</s0> tool window, select the file you want to ignore, and choose <s1>Mark as plain text</s1> in its context menu.=在<s0>Project</s0> 工具窗口中，选择想要忽略的文件，然后在上下文菜单中选择 <s1>Mark as plain text</s1> 。
In the pop-up frame type a string that you think should match your regular expression.=在弹出框架中，输入一个您认为应该与正则表达式匹配的字符串。
Include=包含
Indent / unindent selected lines=缩进/取消缩进所选行
Infer Annotations=插入注解
Inline=内联
Inline Layout=内联Layout
Inline Style=内联Style
Input special characters using macOS system palette=使用macOS系统面板输入特殊字符
Insert element=插入元素
Inspect=检查
Inspect code=检查代码
Inspect current file with current profile=使用当前配置检查当前文件
Integrate=整合
Integrate Project=整合项目
Integrate project=整合项目
Integrate to Branch=集成到分支
IntelliJ IDEA Help=IntelliJ IDEA 帮助
IntelliSort=IntelliSort
Interface=接口
Internationalize=国际化
Interrupt=中断
It is enough to point with your mouse cursor to a tab to be closed, and click the middle mouse button, or just use the <s0>Shift+click</s0> combination.=只需鼠标光标指向要关闭的选项卡，点击鼠标中键，或使用 <s0>Shift+click</s0> 组合键。
It is enough to type the initial letters of the camel names in lower case, and they will be smartly recognized.=只需输入骆驼名字的首字母小写就足够了，他们将被智能地识别。
It is especially useful when processing search results or compiler messages.=在处理搜索结果或编译器消息时特别有用。
It is possible to rename CSS selectors directly from HTML.=可以直接从HTML重命名CSS选择器。
It is very easy to copy and paste fragments of code between different files with roductName; because it automatically inserts necessary imports to the destination file to make the code compilable.=使用 &productName; 在不同的文件中复制和粘贴的代码片段很容易，因为它会在目标文件中自动插入必要的导入来使代码可编译。
It is very easy to toggle between find and replace functionality.=很容易在查找和替换功能之间切换。
It shows the list of members of the current class.=它显示当前类的成员列表。
It will be inserted before the boolean method or variable you were completing, thus negating the whole expression.=感叹号将插入到你补全的布尔值的方法或变量之前，从而否定整个表达式。
It's possible to use Preview tab in the Find in Path dialog box, for quicker search, without ever leaving the dialog box.=可以在“在路径中查找”对话框中使用“预览”选项卡，以便更快速地进行搜索，而无需离开对话框。
It's quite easy to do - just right-click the button you want to hide, and on the context menu choose <s0>Remove from Sidebar</s0> .=这是很容易做到的——只需右击想要隐藏的按钮，然后在上下文菜单中选择 <s0>Remove from Sidebar</s0> 。
JNI Folder=JNI 文件夹
JSONOnlineViewer=JSONOnlineViewer
JSONViewer=JSONViewer
Java Bytecode Decompiler=Java字节码解码器
Java Class=Java类
Java Folder=Java 文件夹
Java Resources Folder=Java 资源文件夹
JavaDoc=JavaDoc
JavaDocs=JavaDocs
Jump To Allocation Position=跳转到分配位置
Jump to Colors and Fonts=跳转到颜色和字体
Jump to Colors and Fonts option at caret=跳转到插入符号处的颜色和字体选项
Jump to External Editor=跳转到外部编辑器
Jump to Navigation Bar=跳转到导航栏
Just click on highlighted source file name and line number in the console to see the source in the editor.=只需在控制台中点击突出显示的源文件名和行号，即可在编辑器中查看源代码。
Just click the Terminal tool window button, and enjoy using the embedded local terminal.=只需点击终端工具窗口按钮，并尽情使用嵌入的本地终端。
Just place the caret at the <s0>throws</s0> keyword in a method declaration, press <s1>hortcut:HighlightUsagesInFile;</s1> and select the desired exception class from the list.=只需将插入符号放到方法申明中的 <s0>throws</s0> 关键字，按 <s1>&shortcut:HighlightUsagesInFile;</s1> 然后从列表中选择期望的异常类。
Just press <s0>hortcut:GotoAction;</s0> (<s1>Help | Find Action</s1> on the main menu) and start typing the name of the action.=只需按 <s0>&shortcut:GotoAction;</s0> (在主菜单的<s1>Help | Find Action</s1> ) ，然后开始输入操作的名字。
Just press <s0>hortcut:QuickChangeScheme;</s0> (<s1>View | Quick Switch Scheme</s1>), to specify the scheme you want to change.=只需按 <s0>&shortcut:QuickChangeScheme;</s0> (<s1>View | Quick Switch Scheme</s1>)来指定你想要更改的方案。
Just press <s1>hortcut:$Copy;</s1> on any element in the lookup list.=只需在查找列表中的任何元素处按 <s1>&shortcut:$Copy;</s1> 。
Just press <s1>hortcut:IntroduceVariable;</s1>, and choose the desired expression:=只需按 <s1>&shortcut:IntroduceVariable;</s1>，然后选择所需的表达式：
Just right-click an annotation and use the <s0>Show Diff</s0> command in the context menu.=只需右键单击注释并在上下文菜单中使用 <s0>Show Diff</s0> 命令。
Just type some characters that, in your opinion, exist in the option description, and the list of settings will reduce to the matching ones.=只需输入一些您认为存在于选项描述中的字符，然后设置列表将减少到匹配的项目。
Keep the <s0>Ctrl</s0> key pressed, and the <i1>chevron</i1> buttons change to <i2><i3>.=按住 <s0>Ctrl</s0> 键， <i1>chevron</i1> 按钮变为了 <i2><i3>。
Keep your source code typo-free with the help of the built-in <s0>Spellchecker</s0>.=在内置<s0>拼写检查器</s0>的帮助下，你可以保持源代码不含拼写错误。
Keeping <s1>Ctrl</s1> pressed, use the <s2>Up</s2> and <s3>Down</s3> arrow keys, <s4>Tab</s4> or <s5>Shift+Tab</s5>, <s6>Alt</s6> for navigation; use <s7>Delete</s7> or <s8>BackSpace</s8> to close editor tab or hide a tool window.=按住 <s1>Ctrl</s1> 键，使用 <s2>Up</s2> 和 <s3>Down</s3> 方向键， <s4>Tab</s4> 或 <s5>Shift+Tab</s5> 及 <s6>Alt</s6> 来导航，使用 <s7>Delete</s7> 或 <s8>BackSpace</s8> 来关闭编辑器选项卡或隐藏工具窗口。
Kotlin=Kotlin
Kotlin File/Class=Kotlin 文件/类
Kotlin Internal Mode=Kotlin内部模式
Kotlin REPL=Kotlin REPL
LF - Unix and OS X (
)=LF - Unix and OS X (
)
Later, when you browse through the changelists in the repository, such comments turn into hyperlinks:=稍后，当您浏览存储库中的更改列表时，这些注释会变成超链接：
Layout Inspector=布局检测
Layout XML File=Layout XML File
Layout configuration=布局配置
Left-to-Right=左到右
Library Properties=库属性
Licenses=许可证
Line Separators=换行符
Line/Column=行/列
Link C++ Project with Gradle=用Gradle链接C++项目
Live Templates allow you to generate many typical code constructs in seconds!=代码模板允许您在几秒内生成许多典型的代码结构！
Load Context=加载上下文
Local History=本地历史
Localize Plugin=本地化插件
Log=日志
Logcat=Logcat
Login Activity=登录Activity
Lookup Down=向下查找
Lookup Up=向上查找
Macro Actions=宏操作
Macros=宏
Main Toolbar=主工具栏
Main menu=主菜单
Maintenance=维护
Maintenance Action=维护行动
Make Module(s)=制作模块
Make project=编译项目
Make sure that the check box <s0>Copy rich text by default</s0> in the General page of the Editor settings/preferences is selected:=确保选中编辑器的settings/preferences 的常规页中的单选框 <s0>Copy rich text by default</s0> 。
Make sure to select the check box <s0>Simultaneous <tag></tag> editing</s0> in the Smart keys page of the Editor settings/preferences.=确保在编辑器设置/偏好中的Smart keys 页面，选中复选框<s0>Simultaneous <tag></tag> editing</s0> 
Make the editor tabs and lines in navigation lists stand out using the <s0>File Colors</s0> page of the project settings.=使用项目设置的<s0>File Colors</s0>页面，可使导航列表中的编辑器选项卡和线条突出。
Make your printouts (File | Print) nice and informative with the help of keywords.=借助关键字，可以让输出 (File | Print) 更好，信息更全。
Make {2,choice,1#File|2#Files} {0,choice,0#Read-only|1#Writeable}=使 {2,choice,1#File|2#Files} {0,choice,0#Read-only|1#Writeable}
Make {3,choice,1#Directory|2#Directories} {0,choice,0#Read-only|1#Writeable}=使 {3,choice,1#Directory|2#Directories} {0,choice,0#Read-only|1#Writeable}
Manage Projects=管理项目
Mark Directory as=标记目录为
Mark File as=标记文件为
Mark Object=标记对象
Mark Resolved=标记已解决
Mark Tree Conflict Resolved=标记树冲突已解决
Mark all notifications as read=将所有通知标记为已读
Mark as Original File Type=标记为原始文件类型
Mark as Resolved=标记为已解决
Master/Detail Flow=主/细节流
Match Case=匹配
Maximize/Restore Active Dialog=最大化/恢复活动对话框
May we suggest some hints that will increase your productivity!=我们可以给出一些提示，将提高您的生产力！
Media service=媒体服务
Memory Management=内存管理
Mercurial=Mercurial
Merge Changes=合并更改
Merge With=合并
Messages=消息
Messaging service=消息服务
Method=方法
Method Navigation Actions=方法导航操作
Method Object=方法对象
Method hierarchy=方法层次结构
Migrate CVS Root=迁移CVS根
Mind that you can move method parameters in both declaration and invocation.=注意，您可以在方法声明和调用中移动参数。
Minimize=最小化
Minimize current window=最小化当前窗口
Modal Bottom Sheet=Modal Bottom Sheet
Modularize=模块化
Module=模块
Module Directory=模块目录
Module Settings=模块设置
Moreover, it's possible to propagate such a move in a method declaration to the method invocations - just immediately after move press <s0>hortcut:ShowIntentionActions;</s0>, and choose <s1>Apply signature change</s1>.=此外，可以将这种移动从方法申明应用到方法调用，只需在移动后立即按下<s0>&shortcut:ShowIntentionActions;</s0>并选择 <s1>Apply signature change</s1>。
Move=移动
Move Caret Backward a Paragraph=插入符号向后移动一个段落
Move Caret Forward a Paragraph=插入符号向前移动一个段落
Move Caret to Previous Word with Selection in Different "CamelHuml" Mode=在驼峰匹配模式中自动移动插入符号到上个单词并选择
Move Module to Group=移动模块到组
Move Watch Down=下移观察点
Move Watch Up=上移观察点
Move and Push=移动和推送
Move down=向下移动
Move module=移动模块
Move to code block end / start=移动到代码块结尾/开头
Move to the next unresolved conflict=移动到下一个未解决的冲突
Move to the previous unresolved conflict=移动到上一个未解决的冲突
Mvc.Actions=Mvc.Actions
Navigate=导航
Navigate back / forward=导航后退/前进
Navigate to a line (and/or column) in editor by its number=通过数字在编辑器中导航到某一行（和/或列）
Navigate to last edit location=导航到上一个编辑位置
Navigation=导航
Navigation Bar=导航栏
Navigation Drawer Activity=导航抽屉Activity
Navigation bar is a quick alternative to the <s0>Project</s0> view.=导航栏是<s0>Project（项目）</s0>视图的快速替代方法。
New=新建
New Branch=新分枝
New Class Level Watch=新建类级别的Watch
New File=新建文件
New Folder=新建文件夹
New Project=新建项目
New Project Group=新项目组
New Scratch Buffer=新建临时缓冲区
New Tag=新标签
NewHtmlFile=NewHtmlFile
NewPackagelnfo=NewPackagelnfo
Next / previous highlighted error=上一个/下一个高亮的错误
Next Bookmark=下一个书签
Next Conflict=下一个冲突
Next Emmet Edit Point=下一个Emmet编辑点
Next Page=下一页
Next Parameter=下一个参数
Next Project Window=下一个项目窗口
Not Excluded=不排除
Notification=Notification
Notifications=通知
On Mac use <s0>Alt</s0> instead of <s1>Ctrl</s1>.=在 Mac 上，使用 <s0>Alt</s0> 代替 <s1>Ctrl</s1> 。
Open=打开
Open Another Log Tab=打开另一个日志选项卡
Open In New Editor Window=在新编辑器窗口中打开
Open Library Settings=打开库设置
Open Module Settings=打开模块设置
Open New Tabs At The End=打开的新选项卡放在最后
Open Project Actions=打开项目操作
Open Project Structure dialog=打开项目结构对话框
Open Selected=打开选中
Open Settings=打开设置
Open Settings dialog=打开设置对话框
Open Task=打开任务
Open Translations Editor=打开翻译编辑器
Open an existing Android Studio project=打开现有的Android Studio项目
Open corresponding tool window=打开相应的工具窗口
Open in Browser=在浏览器中打开
Open in default browser=在默认浏览器中打开
Open on GitHub=在GitHub中打开
Open quick definition lookup=打开快速定义查询
Open {0} file or project=打开项目{0}
Open {0} file or project.=打开 {0} 文件或项目。
Orthogonal Layout=正交布局
Other Settings=其他设置
Override Methods=重写方法
Override methods=重写方法
Overwrite Local=覆盖本地
Overwrite Remote=覆盖远程
Parameter=参数
Parameter Info=参数信息
Parameter info=参数信息
Parameter info (within method call arguments)=参数信息（在方法调用参数中）
Parameters Function=Parameters Function
Parameters Method=参数方法
Paste=粘贴
Paste Simple=简单粘贴
Paste from clipboard=从剪贴板粘贴
Paste from recent buffers...=从最近的缓冲区粘贴...
Pause Program=暂停程序
PlantUML=PlantUML
PlantUML integration=PlantUML集成
Play Saved Macros=播放保存的宏
Plug-ins=插件
Plugins=插件
Position the caret at the selector to be renamed and press <s0>hortcut:RenameElement;</s0> (<s1>Refactor | Rename</s1>).=将插入符号定位到要重命名的选择器，然后按 <s0>&shortcut:RenameElement;</s0> (<s1>Refactor | Rename</s1>)。
Postfix code completion is applied "from right to left" and lets you avoid backward caret jumps when coding.=后缀代码补全是从“从右到左”的应用，允许您在编码时避免插入符号往回跳转。
Press <s0>hortcut:EditorContextInfo;</s0> (<s1>View | Context Info</s1>) to see the declaration of the current method without the need to scroll to it.=按下 <s0>&shortcut:EditorContextInfo;</s0> (<s1>View | Context Info</s1>) 查看当前方法的申明而不需要滚动到方法声明处。
Press <s0>hortcut:EditorEscape;</s0> to remove highlighting.=按 <s0>&shortcut:EditorEscape;</s0> 移除高亮。
Press <s1>hortcut:ActivateTerminalToolWindow;</s1>, and see the terminal running.=按下 <s1>&shortcut:ActivateTerminalToolWindow;</s1>并查看终端运行。
Press the "<f2>Find usages</f2>" button to find all usages and the "Do Move" button of the search results panel to finish the movement operation.=按下 "<f2>Find usages</f2>" 按钮找到所有使用，在搜索结果面板按下 "Do Move"按钮来完成移动操作。
Pressing <s0>hortcut:HippieCompletion;</s0> helps complete words in the visible scope - so doing, the prototypes are highlighted.=使用 <s0>&shortcut:HippieCompletion;</s0> 来在可视范围内补全单词，这样做的话，补全的原型将会高亮。
Pressing <s0>hortcut:JumpToLastChange;</s0> a few times moves you deeper into your changes history.=按 <s0>&shortcut:JumpToLastChange;</s0> 多次可以让你深入到你的更改历史中。
Pressing <s1>hortcut:CodeCompletion;</s1> once more to view all accessible classes.=再按一次 <s1>&shortcut:CodeCompletion;</s1> ，查看所有可访问的类。
Pressing <s1>hortcut:Replace;</s1> adds field, where you can type the replace string.=按下 <s1>&shortcut:Replace;</s1> 添加字段，你可以输入替换字符串。
Pressing the same shortcut after you have invoked Smart-type Completion when a collection type is expected will search for arrays with same component type and suggest to convert them using Arrays.asList() call.=调用智能类型补全后，如果预期一个集合类型，按下相同的快捷方式，将搜索具有相同组件类型的数组，并建议使用Arrays.asList()转换它们。
Pressing the same shortcut after you have invoked Smart-type Completion when an array type is expected will search for collections with same component type and suggest to convert them using toArray() call.=调用智能类型补全后，如果预期一个数组类型，按下相同的快捷方式，将搜索具有相同组件类型的集合，并建议使用toArray()转换它们。
Pressing the same shortcut after you have invoked Smart-type Completion when there's an array of expected type in context will suggest to get an element from this array.=调用智能类型补全后，当上下文中有一个预期类型的数组时，再按相同的快捷方式，将建议从该数组中获取元素。
Pressing the same shortcut after you have invoked Smart-type Completion will search for chained expressions which have expected type.=调用智能类型补全后，按下相同的快捷方式，将搜索具有预期类型的链式表达式。
Prev Parameter=上一个参数
Previous Bookmark=上一个书签
Previous Conflict=上一个冲突
Previous Emmet Edit Point=上一个Emmet编辑点
Previous Page=上一页
Previous Parameter=上一个参数
Previous Project Window=上一个项目窗口
Previous Template Variable=上一个模板变量
Primary direction for mixed LTR/RTL text=混合LTR/RTL文本的主要方向
Print=打印
Print Preview=打印预览
Print file=打印文件
Print/Export Actions=打印/导出操作
Productivity Guide=生产力指南
Profile or Debug APK=查看或调试APK
Profile or debug APK=查看或调试APK
Project Directory=项目目录
Project Structure=项目结构
Project View Actions=项目视图操作
Project View Popup Refactoring Group=项目视图弹出重构组
Project from Version Control=从版本控制中导入项目
Properties Support=属性支持
Protocol=协议
Pull=拉
Push=推
Push commits=推送提交
Quick Action Popup=快速操作弹窗
Quick Lists=快速列表
Quick Settings=快速设置
Quick documentation lookup=快捷文档查询
Quick switch current scheme=快速切换当前方案
QuickList=快速列表
Rebase=Rebase
Rebase my GitHub fork=Rebase 我的 GitHub fork
Rebuild=重建
Rebuild Resources=重建资源
Recent Files=最近的文件
Recent Tests=最近的测试
Recompile all files in the project=重新编译项目中的所有文件
Record Espresso Test=记录 Espresso 测试
Record Robo Script=记录 Robo 脚本
Recursive=递归
Refactor=重构
Refactor This=重构当前
Refactor this=重构当前
Refactoring=重构
Refactorings Quick List Popup Action=重构快速列表弹出动作
Refer to a non-existing target tag in your Ant build file, and roductName; will suggest you to automatically create the corresponding tag.=在Ant构建文件中引用一个不存在的目标标签， &productName; 将会建议你自动创建相应的标签。
Refer to the Comparison section of online help for details.=有关详细信息，请参阅在线帮助的比较部分。
Reformat Code=重新格式化代码
Refresh=刷新
Refresh File Status=刷新文件状态
Refresh Linked C++ Projects=刷新链接的C++项目
Refresh all external projects=刷新所有外部项目
Refresh external project=刷新外部项目
Refresh the file system tree=刷新文件系统树
Regex=正则表达式
Registry=注册
Relational Operators=关系运算符
Reload PlantUml Diagrams=重新加载PlantUml图
Reload Project=重新加载项目
Relocate=重新定位
Remember these Shortcuts=记住这些快捷键
Remote Servers=远程服务器
Remotes=远程
Remove=移除
Remove JavaDocs for all elements=删除所有元素的JavaDocs
Remove JavaDocs for the selected element=删除选中元素的JavaDocs
Remove Run Configuration=删除运行配置
Remove Selected from Welcome Screen=从欢迎屏幕中删除选中项
Remove Unused Resources=删除未使用的资源
Remove tool window button from sidebar=从侧边栏移除工具窗口按钮
Rename=重命名
Rename File=重命名文件
Rename Patch=重命名补丁
RenderScript Folder=RenderScript 文件夹
Reopen Closed Tab=重新打开已关闭的选项卡
Replace=替换
Replace in path=在路径中替换
Report Instant Run Issue=报告Instant Run问题…
Repository=存储库
Rerun=重新运行
Rerun Failed Tests=重新运行失败的测试
Rerun Tests=重新运行测试
Res Folder=Res 文件夹
Reset=重置
Reset Current Branch to Here=将当前分支复位到这里
Reset HEAD=重置HEAD
Resolve Automatically=自动解决
Resolve Conflicts=解决冲突
Resolve Text Conflict=解决文本冲突
Resource Bundle=资源包
Restart Activity=重启 Activity
Restore Default Extensions=恢复默认扩展
Restore Layout=恢复布局
Resume Program=恢复程序
Resume program=恢复程序
Revert Changes=还原更改
Right-clicking on a breakpoint marker (on the bar to the left from the text) invokes the speedmenu where you can quickly enable/disable the breakpoint or adjust its properties.=右击一个断点标记（在文本的左边栏上）调用快速菜单，你可以快速启用/禁用断点或调整其属性。
Right-to-Left=右到左
Rollback=回滚
Rollback File=回滚文件
Run=运行
Run / Debug=运行/调试
Run Class=运行类
Run Command=运行命令
Run Configurations=运行配置
Run Conflict Resolver=运行冲突解决器
Run Inspection=运行检查
Run Inspection by Name=按名称运行检查
Run Task=运行任务
Run context configuration=运行上下文配置
Run context configuration from editor=从编辑器运行上下文配置
Run inspection on=运行检查
Run with Coverage=运行Coverage
Run with Coverage context configuration=运行Coverage上下文配置
Run/Debug=运行/调试
SDK Manager=SDK 管理
Safe Delete=安全删除
Same way, press <s2>hortcut:FindInPath;</s2> to hide the <s3>Replace with</s3> field, and switch to mere search.=同样的，按<s2>&shortcut:FindInPath;</s2> 来隐藏<s3>Replace with</s3> 字段，切换为只搜索。
Sample Data directory=示例数据目录
Save All Diagrams in Current File=将所有图保存在当前文件中
Save Context=保存上下文
Save Current Diagram Only=仅保存当前图
Save all=保存全部
Save all files and settings=保存所有文件和设置
Save as Directory-Based Format=保存为基于目录的格式
Scratch File=新建Scratch文件
Scratch files allows you experiment and prototype right in the editor, without creating any project files.=临时文件允许您在编辑器右侧进行实验和试样，而无需创建任何项目文件。
Scroll=滚动
Scroll Down=向下滚动
Scroll End=滚动到结尾
Scroll Home=滚动到开头
Scroll Left=向左滚动
Scroll Page Down=向下滚动页面
Scroll Page Left=向左滚动页面
Scroll Page Right=向右滚动页面
Scroll Page Up=向上滚动页面
Scroll Right=向右滚动
Scroll Up=向上滚动
Scrolling Activity=滚动Activity
Search / Replace=结构/替换
Search Not Property Candidates=Search Not Property Candidates
Search everywhere=全局搜索
Second, keeping the Alt key pressed, click <i0/> on the editor tab.=其二，按住Alt键，在编辑器选项卡上单击<i0/>。
Secondary Constructor=次构造函数
See <s1>File | Settings | Live Templates</s1> for more details.=参阅<s1>File | Settings | Live Templates</s1> 。
Select All=全选
Select Build Variant=选择构建变量
Select Project Data To Import=选择要导入的项目数据
Select a code fragment and press <s0>hortcut:MoveStatementUp;</s0> or <s1>hortcut:MoveStatementDown;</s1>.=选择一个代码片断，然后按 <s0>&shortcut:MoveStatementUp;</s0> 或者 <s1>&shortcut:MoveStatementDown;</s1>。
Select all occurrences=选择所有出现
Select an element you want to navigate to and press the <s0>Enter</s0> key or the <s1>hortcut:EditSource;</s1> key.=选择一个你想到导航到的元素，然后按 <s0>Enter</s0> 或 <s1>&shortcut:EditSource;</s1> 。
Select configuration and run / debug=选择配置并运行/调试
Select current file or symbol in any view=在任何视图中选择当前文件或符号
Select in Git Log=在Git Log中选择
Select in Project View=在项目视图中选择
Select in Tree=在树中选择
Select next occurrence=选择下一个出现
Select several tasks, using <s0>Shift</s0> or <s1>Control/Command</s1> keys, click the right arrow, and then click <s2>Remove<s3>.=使用 <s0>Shift</s0> 或 <s1>Control/Command</s1> 键选中多个任务，点击右键头，然后点击 <s2>Remove<s3>。
Select such file in the <s0>Local</s0> tab of the <s1>Changes</s1> tool window, and on the context menu choose <s2>Move to Another Changelist</s2>, or <s3>Shelve Changes</s3>.=在<s1>Changes</s1> 工具窗口的 <s0>Local</s0> 选项卡先择这样的文件，然后在上下文菜单中选择 <s2>Move to Another Changelist</s2> 或者 <s3>Shelve Changes</s3> 。
Select the desired entry, and see the setting that contains the entered characters highlighted:=选择所需的条目，并查看包含高亮的的输入字符的设置：
Select the necessary element in the drop-down, and the corresponding file path opens in an external browser (e.g., in the Explorer, if your OS is Windows).=在下拉框中选择所需的元素，相应的文件路径将在外部浏览器中打开（例如，如果您的操作系统是Windows，会在资源管理器中打开）。
Select till code block end / start=选择直到代码块结尾/开头
Send EOF=发送EOF
Service=Service
Service (IntentService)=Service (IntentService)
Set Background Image=设置背景图像
Set Copy to Left=将副本设置为左
Set Copy to Right=将副本设置为右
Set Default=默认设置
Set Delete=设置删除
Set Do Nothing=设置什么也不做
Set Property=设置属性
SetUp Function=设置方法
Settings=设置
Settings Actions=设置操作
Settings Activity=设置Activity
Settings Repository=设置存储库
Settings Summary=设置摘要
Setup on Google Cloud Source Repositories=在Google Cloud Source Repositories上设置
Share Direciory=分享目录
Share Directory=共享目录
Share Project (Subversion)=分享项目（Subversion）
Share Project on GitHub=在GitHub上分享项目
Shelf Settings=Shelf设置
Shelve=Shelve
Shelve Changes Unshelve With Dialog=搁置更改对话框
Shelve Silently=Shelve Silently
Show=显示
Show All Affected Files=显示所有受影响的文件
Show All Branches=显示所有分支
Show Bookmarks=显示书签
Show Coerage Info=显录覆盖率信息
Show Code Coverage Data=显示代码覆盖率数据
Show Color Picker=显示颜色选择器
Show Compiler Info=显示编译器信息
Show Context Menu=显示上下文菜单
Show Coverage Data=显示覆盖数据
Show Current Revision=显示当前的修订版本号
Show Decompiled Class=显示反编译的类
Show Description=显示说明
Show Diff=显示差异
Show Diff Settings Popup=显示差异设置弹出窗口
Show Diff in External Tool=在外部工具中显示差异
Show Editors=显示编辑器
Show Execution Point=显示执行点
Show File View=显示文件视图
Show Git Repository Log=显示Git存储库日志
Show Grid=显示网格
Show Hidden Files and Directories=显示隐藏的文件和目录
Show History for Revision=显示修订历史
Show Ignored=显示忽略
Show Instances=显示实例
Show Kotlin Bytecode=显示Kotlin字节码
Show Line Numbers=显示行号
Show Local Changes=显示本地更改
Show Log in File Manager=在文件管理器中打开日志文件
Show Long Edges=显示长边
Show Mq Unapplied Patches=显示Mq未应用的补丁
Show New Instances=显示新实例
Show Non-Zero Diff Only=仅显示非零差异
Show Quick Actions Popup=显示快速操作弹窗
Show Quick list=显示快速列表
Show Referring Objects=显示引用对象
Show Root Names=显示根名称
Show Running List=显示运行列表
Show Severities Editor=显示严重性编辑器
Show Shelf=显示 Shelf
Show Tabs In Single Row=单行显示选项卡
Show Tag Names=显示标签名称
Show Tracked Classes Only=仅显示跟踪的类
Show VCS Log=显示VCS日志
Show Watchers=显示Watchers
Show With Instances Only=仅显示实例
Show Working Copies=显示工作副本
Show bookmarks=显示书签
Show descriptions of error at caret=显示插入符号处的错误
Show diff for selected change=显示选中更改的差异
Show difference=显示差异
Show equal files=显示相等的文件
Show help contents=显示帮助内容
Show hidden files and directories=显示隐藏的文件和目录
Show in Explorer=在资源管理器里显示
Show intention actions and quick-fixes=显示推荐操作及快速修复
Show navigation bar=显示导航栏
Show new files on left side=在左侧显示新文件
Show new files on right side=在右侧显示新文件
Show properties=显示属性
Show related stack=显示相关堆栈
Show types=显示类型
Show/Hide background tasks window=显示/隐藏后台任务窗口
Show/hide the main toolbar=显示/隐藏主工具栏
Show/hide the navigation bar=显示/隐藏导航栏
Show/hide the status bar=显示/隐藏状态栏
Show/hide tool window buttons=显示/隐藏工具窗口按钮
Shrink selection=缩小选择
Skip Commit in Rebasing=在Rebase中跳过提交
Smart code completion=智能代码补全
Smart line join=智能连接行
Smart line split=智能分割行
Smart step into / Step out=智能步入/步出
SmartType=智能类型
So doing, <s0>roductName;</s0> pinpoints the top five most suitable results and highlights them on the blue background.=这样做的话， <s0>&productName;</s0> 会确定前五名最适合的结果，并将它们突出显示在蓝色背景上。
So doing, if a class has more than one constructor, the links are shown:=这样做，如果一个类有多个构造函数，则会显示以下链接：
Sort Tabs By Filename=按文件名排序选项卡
Space at the end means the end of a pattern, and the preceding string will be considered not just a prefix but a whole pattern.=结束处的空格表示模式的结尾，并且前一个字符串将被认为不仅仅是前缀，而是整个模式。
Speed up HTML, XML or CSS development with <s0>Emmet</s0>.=使用<s0>Emmet</s0>加速 HTML ， XML 或 CSS 的开发。
Split Line=拆分行
Split Mode=拆分模式
Split Vertically=垂直拆分
Start a new Android Studio project=开始一个新的Android Studio项目
Start new line=开始新行
Start the "New Project" Wizard that will guide you through the steps necessary for creating a new project=启动“新项目”向导，它将引导你创建一个新的项目或者导入一个已存在的项目
Start typing a method declaration or a statement, and press <s0>hortcut:EditorChooseLookupItemCompleteStatement;</s0> after the opening parenthesis.=开始输入方法申明或语句，然后在左括号后按<s0>&shortcut:EditorChooseLookupItemCompleteStatement;</s0> 。
Start typing a regular expression, then press <s0>hortcut:ShowIntentionActions;</s0> and choose <s1>Edit RegExp</s1>.=开始输入一个正则表达式，然后按 <s0>&shortcut:ShowIntentionActions;</s0> 并选择 <s1>Edit RegExp</s1>。
Start typing the desired text, and the list of available templates will shrink to show matching templates only:=开始输入所需的文本，可用的模板列表将缩小，仅显示匹配的模板：
Start typing, press <s1>hortcut:CodeCompletion;</s1>, and select the desired string from the suggestion list.=开始输入，按下 <s1>&shortcut:CodeCompletion;</s1> ，然后从建议列表中选择想要的字符串。
Stash Changes=存储更改
Status Bar=状态栏
Step over / into=步过/步入
Stop=停止
Stop Capturing Allocations=停止捕获分配
Stop process=停止进程
Stream Output Operator=流输出运算符
String s = (<s0><caret is here></s0>=String s = (<s0><插入符置于此处></s0>
Structure=结构
Style=样式
Subclass=子类
Submit Feedback=提交反馈
Subversion=Subversion
Subversion Integration=Subversion集成
Surround with Emmet=使用Emmet环绕
Surround with...=环绕...
Switch Task=切换任务
Switch to the next project window=切换到下一个项目窗口
Switch to the previous project window=切换到上一个项目窗口
Sync Project with Gradle Files=使用Gradle文件同步项目
Sync Settings=同步设置
Synchronize=同步
Synchronize Griffon settings=同步Griffon设置
Syne Project with Gradle Files=使用Gradle文件同步项目
Syne Settings=同步设置
TODO=TODO
Tabbed Activity=选项卡Activity
Tabs (in the editor, hierarchy views, etc.) can be closed without using the context menu.=可以在不使用上下文菜单的情况下关闭选项卡（在编辑器，层次结构视图等中）。
Tabs Placement=选项卡放置
Tag Repository=给存储库打tag
Task Management=任务管理
Tasks & Contexts=任务和上下文
Tasks Activation=任务激活
TearDown Function=TearDown Function
Templates���������By default expand with Custom���������������������������������������������������������������������Tab���������������������������������������������������������������=Templates���������By default expand with Custom���������������������������������������������������������������������Tab���������������������������������������������������������������
Terminal=终端
Test=测试
Test Fixture=Test Fixture
Test Function=测试方法
Test Method=测试方法
Test Recorder=测试记录
TestNG-J=TestNG-J
Text Filter Settings=文本过滤器设置
That is, it opens the content of the active commander's panel in the non-active panel.=也就是说，它在非活动面板中打开主动指挥官面板的内容。
The "To package" field will be automatically filled with the package shown in the opposite commander's panel.="To package" 字段将在相对的命令面板显示自动用包进行填充。
The hortcut:CloseActiveTab; key combination closes the currently opened tab in the Message Window, regardless whether the focus is in there or not.= &shortcut:CloseActiveTab; 组合键会关闭消息窗口中当前打开的选项卡，无论焦点是否在该位置。
The hortcut:JumpToLastWindow; key moves focus from the editor to the last focused tool window.= &shortcut:JumpToLastWindow; 快捷键将光标从编辑器移动到上一次激活的工具窗口。
The <f0>View | Synchronize Views</f0> (hortcut:CommanderSyncViews;) menu item synchronizes content of both commander's panels.=<f0>View | Synchronize Views</f0> (&shortcut:CommanderSyncViews;) 菜单同步两个命令面板中的内容。
The <s0>hortcut:EditorEscape;</s0> key in any tool window moves the focus to the editor.=<s0>&shortcut:EditorEscape;</s0> 将焦点从任何工具窗口移动到编辑器。
The <s0>hortcut:JumpToLastWindow;</s0> key moves the focus from the editor to the last focused tool window.=<s0>&shortcut:JumpToLastWindow;</s0> 将焦点从编辑器移到上一个激活的工具窗口。
The <s0>Code | Move Statement Up/Down</s0> action is useful for reorganizing the code lines in your file, e.g., for bringing a variable declaration closer to variable usage.=<s0>Code | Move Statement Up/Down</s0> 操作对在文件中组织代码行很有用，比如移动一个变量声明使其接近变量的使用。
The <s0>Edit | Copy Reference</s0> action can be used to insert a reference to a field/method/class/file into the current position in the editor.=<s0>Edit | Copy Reference</s0> 可以用来在编辑器中的当前位置插入一个字段/方法/类/文件的引用。
The <s0>Quick Definition Viewer</s0> (<s1>hortcut:QuickImplementations;</s1>) can also be used for items in lookup lists that appear on code completion and class/file/symbol navigaton commands.=<s0>Quick Definition Viewer（快速定义查看）</s0> (<s1>&shortcut:QuickImplementations;</s1>) 也可以用于代码补全或类/文件/符号导航命令时显示的查询列表。
The <s0>Version Control</s0> tool window shows all deleted, modified, and unversioned files in a single view.=<s0>Version Control</s0>工具窗口在一个视图中显示所有删除、修改和未加入版本控制的文件。
The <s1>color</s1> properties have the icons of the corresponding color in the left gutter area of the editor.=<s1>color</s1> 属性在编辑器左边的gutter中有相应颜色的图标。
The Code Completion feature lets you quickly complete different kinds of statements in the code.=代码补全功能可以让您快速补全代码中不同类型的语句。
The CodeCompletion feature can suggest a name for a variable when you declare it.=当您声明变量时，代码补全功能可以为它提供一个建议名称。
The Extract Variable refactoring helps you simplify complicated statements in your code.=提取变量重构可帮助您简化代码中的复杂语句。
The SmartType code completion greatly helps to find methods and variables that are suitable in the current context, by analyzing the expected type of the whole expression.=通过分析整个表达式的预期类型，智能类型代码补全大大有助于查找在当前上下文中适用的方法和变量。
The SmartType code completion may be used after the <s0>new</s0> keyword, to instantiate an object of the expected type.=智能代码补全可以用于 <s0>new</s0> 关键字后，实例化一个期望类型的对象。
The SmartType completion also works after the <s0><s1>return</s1></s0> keyword, in an assignment, in an argument list of a method call and other places.=智能类型补全也适用于 <s0><s1>return</s1></s0> 关键字之后、变量申明处、方法调用的参数列表中以及其他地方。
The braces are created, with the caret placed inside:=大括号会被创建，并且插入符号放在大括号里面：
The catch blocks for all the exceptions thrown inside the block will be generated automatically.=代码块内部抛出的所有异常的catch块将自动生成。
The corresponding Eclipse project is imported with default settings, without launching the wizard.=将会使用默认设置导入相应的Eclipse项目，而不启动向导。
The corresponding Maven project is imported with default settings, without launching the wizard.=使用默认设置导入相应的Maven项目，而不启动向导。
The directory ''{0}'' is not empty=目录 ''{0}'' 不能为空
The directory ''{0}'' is not empty.=目录 ''{0}'' 不能为空。
The first 100 search results show in the Preview tab right away.=前100个搜索结果立即显示在“预览”选项卡中。
The following pictures show an initial location of a code fragment, and the results of moving the selected fragment up and down.=以下图片显示了代码片段的初始位置，以及上下移动所选片段的结果。
The format of a regular expression can be rather complicated.=正则表达式的格式可能相当复杂。
The keyboard shortcut <s0>hortcut:CheckinProject;</s0> enables you to quickly invoke the <s1>Commit Changes</s1> dialog.=快捷键<s0>&shortcut:CheckinProject;</s0> 使你能够快速调用 <s1>Commit Changes（提交改变）</s1> 对话框。
The list of the suggested names will be reduced accordingly.=建议名称的列表将相应减少。
The regular expression opens in a separate tab in the editor, where you can type backslashes as is.=在编辑器中的单独选项卡中打开正则表达式，您可以在其中按正常键入反斜杠。
The selected file will open with the caret at the specified line.=所选文件将打开，并将插入符号置于指定行。
The selected name is automatically entered in the editor followed by dot.=所选名称将在编辑器中自动输入并加上点。
The selected name is automatically entered in the editor followed by the entered character.=选择的名称将在编辑器中自动输入，并且后面加上所输入的符号。
The shortcuts such as <s0>hortcut:QuickJavaDoc;</s0> (<s1>View | Quick Documentation</s1>), <s2>hortcut:ParameterInfo;</s2> (<s3>View | Parameter Info</s3>), <s4>hortcut:GotoDeclaration;</s4> (<s5>Navigate | Declaration</s5>) and others can be used not only in the editor but in the code completion popup list as well.=快捷键如 <s0>&shortcut:QuickJavaDoc;</s0> (<s1>View | Quick Documentation</s1>) ， <s2>&shortcut:ParameterInfo;</s2> (<s3>View | Parameter Info</s3>) ， <s4>&shortcut:GotoDeclaration;</s4> (<s5>Navigate | Declaration</s5>) 等，即可以用于编辑器，也可以用于弹窗中的代码补全。
The speed search is available in all the tree views: just start typing and you'll quickly locate the necessary item.=所有树视图中都提供速度搜索：只需开始输入，您就可以快速找到所需的项目。
The underlying image will be opened in a popup instead of a separate editor tab.=底层图像将在弹出窗口中打开，而不是单独的编辑器选项卡。
Theme Editor=主题编辑
Theme Preview=主题预览
Then return to your source code and press <s0>hortcut:$Paste;</s0>:=然后返回你的源码，按<s0>&shortcut:$Paste;</s0>：
Then type the colon (<s2>:</s2>) and a line number.=然后输入冒号 (<s2>:</s2>) 和行号。
There are two ways of closing all tabs in the editor, except the current one:=有两种方法可以关闭编辑器中的除当前选项卡外的所有选项卡：
There will be no lightbulb shown for this particular action but you will be still able to use it with the <s3>hortcut:ShowIntentionActions;</s3> shortcut.=对于该操作将不会有灯泡显示，但你仍然可以通过 <s3>&shortcut:ShowIntentionActions;</s3> 来使用它。
These tips will be shown while the start up process is going on.=这些提示将在启动过程中显示。
They are visible in the <s0>Favorites</s0> tool window, which you can dock or float as required:=它们将在<s0>Favorites</s0> 工具窗口可见，您可以根据需要设置停靠或浮动：
This can be especially useful for replacing one method or variable name with another.=这对于将一个方法或变量名替换为另一个方法或变量名时尤其有用
This can be useful, for example, when you need to create a class which has much in common with some existing class and it's not feasible to put the shared functionality in a common superclass.=这有时是有用的，比如，当您需要创建一个与现有类有很多共同点的类，而将共享功能放在一个共同的超类中又是不可行的时候。
This dialog shows all modifications in project, gives summary information of file status and suggests improvements before check-in.=此对话框显示项目中的所有修改、给出文件状态的摘要信息和检入前的建议改进。
This intention action will not even make you change your current editing location.=此意图行动甚至不会改变您当前的编辑位置。
This will also work for <s2>try</s2> and <s3>catch</s3>.=这也适用于 <s2>try</s2> 和 <s3>catch</s3>。
This will result in the following:=这将导致以下内容：
Throw Debug Exception=抛出调试异常
Throw cached PCE=抛出缓存PCE
Tips Of The Day are not ready yet.=每日提示还没有准备好。
To access the corresponding settings, use <s1>File | Settings | Code Style | Imports</s1>.=要访问相应的设置，使用 <s1>File | Settings | Code Style | Imports</s1> 。
To change the current line ending style, just click the spinner.=要更改当前换行符样式，只需单击spinner。
To compare two directories, select one or both of them in the <s0>Project</s0> view and press <s1>hortcut:CompareDirs;</s1>.=要比较两个目录，在 <s0>Project</s0> 视图中选择一个或两个都选中，然后按 <s1>&shortcut:CompareDirs;</s1>。
To compare two jar files, select one or both of them in the <s0>Project</s0> view and press <s1>hortcut:CompareDirs;</s1>.=要比较两个jar文件，在 <s0>Project</s0> 视图中选择一个或两个都选中，然后按 <s1>&shortcut:CompareDirs;</s1>。
To create a scratch file, press <s0>hortcut:NewScratchFile;</s0>, and then select its language.=要创建临时文件，按 <s0>&shortcut:NewScratchFile;</s0>，然后选择语言。
To do that, it's enough to keep <s0>Alt+Shift</s0> and drag your mouse cursor:=要这样做，只需按住 <s0>Alt+Shift</s0> ，然后拖支鼠标光标：
To do that, just choose <s0>Move to Another Changelist</s0> on the file context menu in the Version Control tool window:=要这样做，只需在版本控制工具窗口的上下文菜单中选择 <s0>Move to Another Changelist</s0> 。
To do that, place the caret at the symbol's name or at its usage in code and press <s0>hortcut:ShowUsages;</s0> (<s1>Edit | Find | Show Usages</s1> in the main menu), scroll the list and click the desired usage.=要这样做，将插入符号置于符号的名称处或代码中它的使用处，然后按下 <s0>&shortcut:ShowUsages;</s0> (在主菜单中的<s1>Edit | Find | Show Usages</s1> )，滚动列表并点击期望的使用。
To do that, press <s0>hortcut:GotoAction;</s0>, type <s1>Clone caret</s1>, and then choose the desired action.=要做到这样，按下 <s0>&shortcut:GotoAction;</s0> ，输入 <s1>Clone caret</s1> 并选择所需的操作。
To do that, press <s0>Ctrl</s0> twice and hold the key, and then press the arrow keys.=要做到这一点，按下 <s0>Ctrl</s0> 两次并按住，然后按方向键。
To do that, press the key <s0>Alt</s0> (for Windows/*nix) or <s1>Command</s1> (for Mac) twice and keep it down.=要做到那样，按下两次 <s0>Alt</s0> (for Windows/*nix) 或 <s1>Command</s1> (for Mac) 并保持按下。
To do that, select a character, and then on the main menu choose <s0>Edit | Encode XML/HTML Special Characters</s0>.=要做到这一点，选择一个字符，然后在主菜单选择 <s0>Edit | Encode XML/HTML Special Characters</s0>。
To do that, use <s0>hortcut:MoveElementLeft;</s0>/<s1>hortcut:MoveElementRight;</s1>.=要这样做，可以使用<s0>&shortcut:MoveElementLeft;</s0>/<s1>&shortcut:MoveElementRight;</s1>。
To do that, use the same <s0>hortcut:RecentFiles;</s0> shortcut with the <s1>Find</s1> tool window having the focus, and select the desired find usages result from the <s2>Recent Find Usages</s2> popup.=要做到这一点，当<s1>Find</s1> 工具窗口有焦点时，使用相同的 <s0>&shortcut:RecentFiles;</s0> ，然后从 <s2>Recent Find Usages</s2> 弹窗中选择所需的使用查找结果。
To easily evaluate the value of any expression while debugging the program, select its text in the editor (you may press a <s0>hortcut:EditorSelectWord;</s0> a few times to efficiently perform this operation) and press <s1>hortcut:EvaluateExpression;</s1>.=要在调试程序时轻松计算任何表达式的值，请在编辑器中选择其文本（你可能会按 <s0>&shortcut:EditorSelectWord;</s0> 几次来高效地执行该操作），然后按<s1>&shortcut:EvaluateExpression;</s1>。
To easily locate an item in the list, just start typing its name.=要轻松找到列表中的项目，只需开始输入其名称。
To enable this feature, select the check box <s0>Show quick doc on mouse move</s0> in the editor settings.=要启用该功能，在编辑器设置中选中复选框 <s0>Show quick doc on mouse move</s0> 。
To help you learn the purpose of each item in the main menu, its short description is shown in the status bar at the bottom of the application frame when you position the mouse pointer over this item.=为了帮助您了解主菜单中每个项目的目的，当您将鼠标指针放在该项目上时，其简短描述将显示在应用程序框架底部的状态栏中。
To implement methods of the interfaces that the current class implements (or of the abstract base class), use <s0>hortcut:ImplementMethods;</s0> (<s1>Code | Implement methods</s1>).=要实现当前类继承的接口的方法（或抽象类的方法），使用 <s0>&shortcut:ImplementMethods;</s0> (<s1>Code | Implement methods</s1>)。
To make sure you didn't miss some slash of quotation mark, place the caret somewhere in the expression you want to check, and press <s0>hortcut:ShowIntentionActions;</s0>.=为了确保你不会遗漏引号中的斜线，将插入符号放到想检查表达式处，然后按<s0>&shortcut:ShowIntentionActions;</s0>。
To navigate to the declaration of a class, method or variable used somewhere in the code, position the caret at the usage and press <s0>hortcut:GotoDeclaration;</s0> (<s1>Navigate | Declaration</s1>).=要从类，方法或字段在代码中的使用处导航到定义处，请将插入符号定位到使用处，然后按 <s0>&shortcut:GotoDeclaration;</s0> (<s1>Navigate | Declaration</s1>)。
To navigate to the implementation(s) of an abstract method, position the caret at its usage or its name in the declaration and press <s0>hortcut:GotoImplementation;</s0>.=要导航到抽象方法的实现，将插入符号定位它的使用处或申明的名字处，然后按 <s0>&shortcut:GotoImplementation;</s0>。
To open any class in the editor quickly, press <s0>hortcut:GotoClass;</s0> (<s1>Navigate | Class</s1>) and start typing the name of the class.=要在编辑器中快速打开任意类，按下 <s0>&shortcut:GotoClass;</s0> (<s1>Navigate | Class</s1>) 并开始输入类名。
To open any class or file in the editor at the desired line, press <s0>hortcut:GotoFile;</s0> (<s1>Navigate | File</s1>), start typing the name, and choose the one from the suggestion list.=要在编辑器中打开任何类或文件并跳转到期望行，按 <s0>&shortcut:GotoFile;</s0> (<s1>Navigate | File</s1>)，开始输入名字，然后从建议列表中选择一个。
To open any particular file in the editor quickly, press <s0>hortcut:GotoFile;</s0> (<s1>Navigate | File</s1>) and start typing its name.=要在编辑器中快速打开任意文件，按下 <s0>&shortcut:GotoFile;</s0> (<s1>Navigate | File</s1>) 并开始输入名字。
To open any particular method or field in the editor quickly, press <s0>hortcut:GotoSymbol;</s0> (<s1>Navigate | Symbol</s1>) and start typing its name.=要在编辑器中打开特定的方法或字段，按 <s0>&shortcut:GotoSymbol;</s0> (<s1>Navigate | Symbol</s1>) 并输入它的名字。
To open your browser with documentation for the element at the editor's caret, press <s0>hortcut:ExternalJavaDoc;</s0> (<s1>View | External Documentation</s1>).=要在浏览器中打开插入符号处的元素的文档，按 <s0>&shortcut:ExternalJavaDoc;</s0> (<s1>View | External Documentation</s1>)。
To quickly complete a method call of a static method located anywhere in your project, libraries or JDK, enter a prefix and press <s0>hortcut:CodeCompletion;</s0> twice.=要快速补全一个位于您项目、库或JDK中的方法或静态方法，输入前缀并按两次 <s0>&shortcut:CodeCompletion;</s0> 。
To quickly evaluate the value of any expression while debugging the program, hold Alt and click this expression to see its value and calculate it, call a method, etc.=要在调试程序时快速计算任何表达式的值，请按住Alt键并单击此表达式以查看其值并计算它，调用方法等。
To quickly find a menu command or toolbar action, you do not need to look through the menus.=要快速找到菜单命令或工具栏操作，您不需要查看菜单。
To quickly find and run an inspection, press <s0>hortcut:RunInspection;</s0> and start typing the name of the inspection or its group.=要快速查找和运行检查，按 <s0>&shortcut:RunInspection;</s0> 并开始输入检查的或检查组的名字。
To quickly see the documentation for a class or method at caret, press <s0>hortcut:QuickJavaDoc;</s0> (<s1>View | Quick Documentation</s1>).=要快速查看插入符号处的类或方法的文档，按 <s0>&shortcut:QuickJavaDoc;</s0> (<s1>View | Quick Documentation</s1>)。
To quickly select the currently edited element (class, file, method or field) in any view (<s0>Project</s0> view, <s1>Structure</s1> view or other), press <s2>hortcut:SelectIn;</s2>.=要在任何视图(<s0>Project</s0> 视图, <s1>Structure</s1> 视图或其他)中选择当前编辑的元素（类，文件，方法或字段），请按 <s2>&shortcut:SelectIn;</s2>。
To see all the available scratch files, choose Scratches view in the Project tool window.=要查看所有可用的临时文件，请在Project（项目）工具窗口中选择Scratches视图。
To see the inheritance hierarchy for a selected class, press <s0>hortcut:TypeHierarchy;</s0> (<s1>Navigate | Type Hierarchy</s1>).=要查看所选类的继承层次，按<s0>&shortcut:TypeHierarchy;</s0> (<s1>Navigate | Type Hierarchy</s1>)。
To see your local history of changes in a file, invoke <s0>Local History | Show History</s0> from the context menu.=要查看一个文件的本地修改历史记录，在上下文菜单中执行 <s0>Local History | Show History</s0> 。
To select multiple fragments in the "column mode", keep <s0>Control+Alt+Shift</s0>(on Windows and Linux) or <s1>Cmd+Alt+Shift</s1>(on MAC), and drag your mouse cursor:=若要在“列模式”中选择多个片段，按住 <s0>Control+Alt+Shift</s0>(Windows 和 Linux) 或 <s1>Cmd+Alt+Shift</s1>(MAC)，然后拖动鼠标光标。
To select multiple words, press <s0>Alt+Shift</s0>, place the caret at each word to be selected and double-click the left mouse button.=要选择多个单词，按住 <s0>Alt+Shift</s0>，将插入符放到每个要选的词中并双击鼠标左键。
To show separator lines between methods in the editor, open the editor settings and select the <s0>Show method separators</s0> check box in the <s1>Appearance</s1> page.=要在编辑器中的方法之前显示分隔线，打开编辑器设置在<s1>Appearance</s1> 页选择 <s0>Show method separators</s0> 复选框。
To skip warnings right click on the validation side bar / marker bar and choose <s0>Go to high priority problems only</s0>.=要跳过警告，请右键单击验证侧栏/标记栏，然后选择<s0>仅转到高优先级问题</s0>。
To try it, go to commander and invoke <f1>Move to...</f1> on any class there.=要尝试，在任何类上的命令中执行 <f1>Move to...</f1> 。
To try it, place the caret at the symbol you want to rename, and press <s0>hortcut:RenameElement;</s0> (<s1>Refactor | Rename</s1>).=要这样做，将插入符号放到你想重命名的符号处，然后按 <s0>&shortcut:RenameElement;</s0> (<s1>Refactor | Rename</s1>)。
To uncomment a commented block press <s0>hortcut:CommentByBlockComment;</s0> anywhere inside it.=要取消块注释，在注释内部按<s0>&shortcut:CommentByBlockComment;</s0> 。
To view all exit points of a method, place the caret at one of them, e.g. the <s0>return</s0> statement, and press <s1>hortcut:HighlightUsagesInFile;</s1>:=要查看一个方法的所有退出点，将插入符号放到其中一个退出点上，比如<s0>return</s0> 语句，然后按 <s1>&shortcut:HighlightUsagesInFile;</s1>：
To view which line separators style is used in the current file, look at the <s0>Status Bar</s0>:=要查看当前文件中使用的换行符样式，请查看<s0>Status Bar（状态栏）</s0>：
Toggle Bookmark=切换书签
Toggle Bookmark With Mnemonic=使用助记符切换书签
Toggle Distraction Free mode=切换免打扰模式
Toggle Full Screen mode=切换全屏模式
Toggle Line Breakpoint=切换行断点
Toggle Offline Mode=切换离线模式
Toggle Presentation mode=切换演示模式
Toggle Read-Only Attribute=切换只读属性
Toggle between the vertical and side-by-side placement of the tool windows by Ctrl+Click/Cmd+Click on the splitter:=在分割线上使用Ctrl+单击 / Cmd+单击，可以在工具窗口的垂直放置和并排放置之间切换：
Toggle bookmark=切换书签
Toggle bookmark with mnemonic=使用助记符切换书签
Toggle breakpoint=切换断点
Toggle case for word at caret or selected block=切换插入符号处的词或所选块的大小写
Toggle maximizing editor=切换最大化编辑器
Toggle parameter name hints=切换参数名称提示
Toggle recursive browsing=切换递归浏览
Tool Buttons=工具按钮
Tool Windows=工具窗口
Toolbar=工具栏
Toolbar Find Actions=工具栏查找操作
Toolbar Run Actions=工具栏运行操作
Tools=工具
Tools Basic Group=基本工具组
Track New Instances=跟踪新实例
Translate=翻译
Tree Layout=树布局
Try Live Templates=尝试代码模板
Tune the <s0>roductName;</s0> tool windows layout to make better use of your screen.=调整 <s0>&productName;</s0> 的工具窗口布局，以更好地利用你的屏幕。
Type Alias=类型别名
Type Declaration=类型声明
Type Migration=类型迁移
Type Parameter=类型参数
Type hierarchy=类型层次结构
Type the new name in the popup window that appears, or select one of the suggested names, and press <s2>Enter</s2>.=在出现的弹窗中输入新的名字，或选择一个建议的名字，然后按 <s2>Enter</s2>。
Typedef=Typedef
UI Component=UI 组件
UI Debugger=UI 调试器
UnStash Changes=取出存储更改
Undeploy=取消部署
Under construction=正在构建
Undo 'Add'=撤消“添加”
Undo Commit=撤消提交
Unedit=撤销编辑
Unlike accepting with the <s0>hortcut:EditorChooseLookupItem;</s0> key, the selected name will overwrite the rest of the name to the right of the caret.=不像 <s0>&shortcut:EditorChooseLookupItem;</s0> ，该操作会用所选名字覆盖插入符号右侧剩余的名字。
Unlock=解锁
Unmark Generated Sources Root=取消标记生成的资源root
Unmark Object=取消标记对象
Unselect occurrence=取消选择出现
Unshelve=Unshelve
Unshelve Silently=Unshelve Silently
Update=更新
Update Copyright=更新版权
Update PlantUml Diagrams - changes only=更新PlantUml图 - 仅更改
Update Project=更新项目
Update project from VCS=从VCS更新项目
Update to=更新到
Update to Revision=更新到修订
Uploading SSH key to the cloud=将SSH密钥上传到云端
Usage Search=使用搜索
Use <s0>hortcut:EditorCompleteStatement;</s0> to complete a current statement such as <s1>if</s1>, <s2>do-while</s2>, <s3>try-catch</s3>, <s4>return</s4> (or a method call) into a syntactically correct construct (e.g. add curly braces).=使用<s0>&shortcut:EditorCompleteStatement;</s0> 来把当前语句（如 <s1>if</s1>, <s2>do-while</s2>, <s3>try-catch</s3>, <s4>return</s4> (或方法调用)）补全为语法正确的结构（比如加上大括号）。 
Use <s0>hortcut:FindNext;</s0> and <s1>hortcut:FindPrevious;</s1> keys to navigate through highlighted usages.=使用 <s0>&shortcut:FindNext;</s0> 和 <s1>&shortcut:FindPrevious;</s1> 在高亮使用间导航。
Use <s0>hortcut:GotoNextError;</s0>/<s1>hortcut:GotoPreviousError;</s1> keys to jump between highlighted syntax errors.=使用 <s0>&shortcut:GotoNextError;</s0>/<s1>&shortcut:GotoPreviousError;</s1> 在高亮的语法错误间跳转。
Use <s0>hortcut:HighlightUsagesInFile;</s0> (<s1>Edit | Find | Highlight Usages in File</s1>) to quickly highlight usages of some variable in the current file.=使用 <s0>&shortcut:HighlightUsagesInFile;</s0> (<s1>Edit | Find | Highlight Usages in File</s1>) 来在当前文件中快速高亮一些变量的使用。
Use <s0>hortcut:HippieBackwardCompletion;</s0> to do same in reverse order.=使用 <s0>&shortcut:HippieBackwardCompletion;</s0> 来反向执行相同的操作。
Use <s0>hortcut:InsertLiveTemplate;</s0> to complete any valid <s1>Live Template</s1> abbreviation if you don't remember it.=如果你不记得完整缩写的话，可以使用 <s0>&shortcut:InsertLiveTemplate;</s0> 来补全任何有效的 <s1>Live Template（代码模板）</s1> 缩写。
Use <s0>hortcut:MethodUp;</s0> and <s1>hortcut:MethodDown;</s1> keys to quickly move between methods in the editor.=使用 <s0>&shortcut:MethodUp;</s0> 和 <s1>&shortcut:MethodDown;</s1> 可以在编辑器中的方法间快速移动。
Use <s0>hortcut:PreviousOccurence;</s0>/<s1>hortcut:NextOccurence;</s1> shortcuts to jump between compiler error messages or search operation results.=使用 <s0>&shortcut:PreviousOccurence;</s0>/<s1>&shortcut:NextOccurence;</s1> 在编译错误消息或搜索操作结果之前跳转。
Use <s0>hortcut:QuickImplementations;</s0> (<s1>View | Quick Definition</s1>), to quickly review definition or content of the symbol at caret, without the need to open it in a new editor tab.=使用 <s0>&shortcut:QuickImplementations;</s0> (<s1>View | Quick Definition</s1>)，可以快速查看插入符所在处的符号的定义或内容，而无需在新的编辑器选项卡中打开它。
Use <s0>hortcut:RecentChanges;</s0> to quickly review your recent changes to the project.=使用 <s0>&shortcut:RecentChanges;</s0> 快速查看项目中最的的更改。
Use <s0>hortcut:ShowIntentionActions;</s0> to see the list of available actions.=使用 <s0>&shortcut:ShowIntentionActions;</s0> 查看可用的操作列表。
Use <s0>hortcut:ShowNavBar;</s0> keyboard shortcut to show the navigation bar, and arrow keys to locate the necessary files or folders.=使用 <s0>&shortcut:ShowNavBar;</s0> 显示导航栏，然后用方向键定位文件或文件夹。
Use <s0>Basic Completion</s0> (<s1>hortcut:CodeCompletion;</s1>) for completing words in text and comments in files of many different types.=使用 <s0>Basic Completion（基本补全）</s0> (<s1>&shortcut:CodeCompletion;</s1>) 补全文本中的单词及很多种不同类型的文件的注释。
Use <s0>Basic Completion</s0> (<s1>hortcut:CodeCompletion;</s1>) within HTML, CSS and other files, for completing image file names.=在 HTML， CSS 和其他文件中，使用<s0>Basic Completion（基本补全）</s0> (<s1>&shortcut:CodeCompletion;</s1>)  来补全图片文件名。
Use <s0>Code | Reformat Code</s0> to reformat code according to your code style preferences (<s1>File | Settings | Code Style</s1>).=使用 <s0>Code | Reformat Code</s0> 来根据你的代码风格(<s1>File | Settings | Code Style</s1>) 格式化代码。
Use <s0>Refactor | Copy</s0> to create a class which is a copy of the selected class.=使用<s0>Refactor | Copy</s0> 来创建所选类的副本。
Use <s1>hortcut:ActivateChangesToolWindow;</s1> keyboard shortcut to show or hide this tool window.=使用 <s1>&shortcut:ActivateChangesToolWindow;</s1> 来显示或隐藏该工具窗口。
Use Interface Where Possible=尽可能使用接口
Use Style Where Possible=尽可能使用Style
Use context menus to invoke comparison commands.=使用上下文菜单调用比较命令。
Use either a slash or a backslash as a delimiter.=使用斜杠或反斜杠作为分隔符。
Use other items in the list to surround with other constructs.=使用列表中的其他项目可以用其他结构环绕。
Use the <s0>hortcut:PasteMultiple;</s0> shortcut to choose and insert recent clipboard contents into the text.=使用<s0>&shortcut:PasteMultiple;</s0> 来选择和插入最近的剪贴板内容到文本中。
Use the <s0>Project tool window</s0> instead: select one or more files, or folders, point to <s1>File | Line Separators</s1> on the main menu, and then choose the desired line ending style.=只需在 <s0>Project tool window</s0> 选择一个或多个方件、文件夹，选择主菜单的 <s1>File | Line Separators</s1> ，然后选择所需的换行符。
Use the <s0>Tab</s0> key to move between the template fields.=使用 <s0>Tab</s0> 键在模板字段间移动。
Use the Scope-Based tab in the TODO tool window to show only those items that pertain to the scope of interest.=使用TODO工具窗口中的“基于范围的”选项卡仅显示与感兴趣的范围相关的项目。
Use the Switcher (<s0>hortcut:Switcher;</s0>) to switch between open files and tool windows.=使用切换器 (<s0>&shortcut:Switcher;</s0>) 在打开的文件和工具窗口间切换。
Use the same context menu item to see the history of changes on a directory.=使用相同的上下文菜单项来还可查看目录上的更改历史记录。
Using <s0>hortcut:Generate;</s0> (<s1>Code | Generate</s1>) in the editor, you can easily generate getter and setter methods for any fields of your class.=在编辑器中使用 <s0>&shortcut:Generate;</s0> (<s1>Code | Generate</s1>) ，你可以很容易地为类中的任何字段生成getter和setter方法。
VCS=VCS
VCS / Local History=VCS /本地历史
VCS Operations Popup=弹出VCS操作窗口
Values XML File=Values XML File
Variable=变量
Vcs Quick List Popup Action=Vcs快速列表弹出动作
Vcs.Specific=Vcs.Specific
Vector Asset=Vector资源
Version Control=版本控制
Version Control Group=版本控制组
Version Control Systems=版本控制系统
Version control annotations show the latest changes of each line in one click.=版本控制注释在一次点击中显示每一行的最新更改。
Vice versa, if a non-ASCII character is entered in the resource bundle editor, it is reflected in the underlying <s0>*.properties</s0> file as a corresponding escaped character in the format <s1>\uXXXX</s1>.=反之，如果在资源束编辑器中输入了非ASCII字符，则它在原本的<s0>*.properties</s0> 文件中将显示为<s1>\uXXXX</s1>格式的转义字符。
View=视图
View Breakpoints=查看断点
View Mode=视图模式
View breakpoints=查看断点
View/Edit Text=查看/编辑文本
Virtual File Info=虚拟文件信息
Warn When Delete=删除时发出警告
Watch Face=Watch Face
Watch Off=Watch关
Watch On=Watch开
Wear=Wear
Welcome to <s0>roductName;</s0> <s1>ajorVersion;.inorVersion;</s1>=欢迎使用 <s0>&productName;</s0> <s1>&majorVersion;.&minorVersion;</s1>
Welcome to <s0>roductName;</s0> <s1>5.0</s1>=迎来到 <s0>&productName;</s0> <s1>5.0</s1>
Welcome to <s0>roductName;</s0> Productivity Guide=欢迎来到 <s0>&productName;</s0> 生产力指南
When an autopopup completion is active, <s0>hortcut:EditorLookupDown;</s0> and <s1>hortcut:EditorLookupUp;</s1> will close it and move the caret down or up in the editor.=当一个自动弹窗被全激活时， <s0>&shortcut:EditorLookupDown;</s0> 和 <s1>&shortcut:EditorLookupUp;</s1> 将关闭它，并且在编辑器中上移或下移插入符号。
When choosing a live template from a suggestion list, press <s0>hortcut:QuickJavaDoc;</s0> to view quick documentation - to be sure you make a right choice:=在从建议列表中选择一个代码模板时，按 <s0>&shortcut:QuickJavaDoc;</s0> 查看快速文档——以确保你做出正确的选择。
When in a Code Completion lookup, press <s0>hortcut:QuickJavaDoc;</s0> to show documentation for a lookup item, including class constructors.=当显示代码补全的可选列表时，可以按下 <s0>&shortcut:QuickJavaDoc;</s0> 来显示当前查看项的文档，包括类的构造函数。
When in the <s0>Go to Class</s0>, <s1>Go to Symbol</s1>, or <s2>Go to File</s2> popup, you can ease the search by filtering the lookup list with the help of the "camel words" prefixes.=当在<s0>转到类</s0>， <s1>转到符号</s1>或者 <s2>转到文件</s2> 弹窗时，您可以借助“驼峰词”前缀过滤查找列表，来轻松完成搜索。
When in the Code Completion lookup, you can ease the search by filtering the list with the help of the "camel words" prefixes.=在代码补全的查找中，您可以借助“驼峰词”前缀过滤列表，来轻松完成搜索。
When multiple choices are available, they are shown in the lookup list.=当有多个选择可用时，它们将显示在查找列表中。
When no text is selected in the editor, the "Copy" command selects and copies the current line.=当编辑器中没有选择任何文本时，“复制”命令选择并复制当前行。
When nothing is selected in the editor, the line at the cursor will be moved.=当编辑器中没有选择任何内容时，光标上处行将被移动。
When ready, just press <s0>hortcut:EditorEscape;</s0> to close the regular expression editor.=准备好后，只需按 <s0>&shortcut:EditorEscape;</s0> 来关闭正则表达式编辑器。
When searching for a text string in a file, use recent history: with the search pane already open, click the down arrow to show the list of recent entries.=在文件中搜索文本字符串时，可以使用最近的历史记录：搜索窗格打开时，点击向下箭头来显示最近的记录。
When using Code Completion in Java, you can accept the currently highlighted selection in the popup list with the exclamation sign (!) character.=在Java中使用代码补全时，您可以使用感叹号（!）字符来接受弹出列表中当前高亮的选项。
When using Code Completion, you can accept the currently highlighted selection in the popup list with <s0>hortcut:EditorChooseLookupItemReplace;</s0> key.=当使用代码补全时，你可以使用 <s0>&shortcut:EditorChooseLookupItemReplace;</s0> 来接受弹窗列表中当前高亮的选项。
When using Code Completion, you can accept the currently highlighted selection in the popup list with the <s0>hortcut:EditorChooseLookupItemCompleteStatement;</s0>, roductName; will not just insert the selected string, but also will do its best to turn current code construct into syntactically correct one (balance parentheses, add missing braces and semicolons, etc.)=使用代码补全时，你可使用 <s0>&shortcut:EditorChooseLookupItemCompleteStatement;</s0> 来接受弹出列表中当前高亮的项目， &productName; 不仅会插入所选字符串，还会尽力将当前代码调整为语法正确的结构（平衡括号，添加丢失的大括号、分号等）。
When using Code Completion, you can accept the currently highlighted selection in the popup list with the period character (<s0>.</s0>), comma (<s1>,</s1>), semicolon (<s2>;</s2>), space and other characters.=当使用代码补全时，你可以使用句号(<s0>.</s0>)，逗号 (<s1>,</s1>)，分号(<s2>;</s2>)，空格及其他字符来接受弹出列表中当前高亮的选中。
When using autopopup Code Completion, you can select the first item using <s0>hortcut:EditorChooseLookupItemDot;</s0>.=使用自动弹窗的代码补全时，你可以用 <s0>&shortcut:EditorChooseLookupItemDot;</s0> 来选择第一行。
When using basic code completion (<s0>hortcut:CodeCompletion;</s0>), type any characters that exist anywhere in an identifier.=使用基本代码补全时 (<s0>&shortcut:CodeCompletion;</s0>)，可以输入任何标识符中任何位置的任何字符。
When using basic code completion (<s0>hortcut:CodeCompletion;</s0>), you don't need to type upper-case letters in CamelHump names.=使用基本代码补全时(<s0>&shortcut:CodeCompletion;</s0>)，你不需要在驼峰样式的名字中输入大写字母。
When working with a lengthy list of tasks, you don't need to delete them one by one.=当使用冗长的任务列表时，您不需要逐个删除它们。
When you are finding text in the current file (<s0>hortcut:Find;</s0>), you don't need to type the whole search string: Basic Code Completion is available in the search field.=当你在当前文件中查找文件时 (<s0>&shortcut:Find;</s0>)，你不需要输入整个查找字符串，在搜索字段时，基本代码补全是可以使用的。
When you close a code block by typing a closing curly brace ('}'), the editor automatically adjusts its position on the line according to your code style preferences (see "Source Code" page in the IDE Options dialog).=当您通过键入关闭大括号（'}'）关闭代码块时，编辑器会根据代码样式首选项自动调整它的行位置（请参阅“IDE选项”对话框中的“Source Code”页）。
When you commit a changelist, and type the check-in comment, make sure it matches one of your issue navigation patterns.=当你提交一个变更列表，并输入检入注释时，确保注释匹配你的问题导航模式。
When you invoke the <s0>Move</s0> refactoring (<s1>hortcut:Move;</s1>) on an inner class that is declared <s2>static</s2>, you are provided with an option to either make it a top-level class, or move it to another class.=当你在一个申明为<s2>static</s2>的内部类上执行 <s0>Move</s0> 重构时 (<s1>&shortcut:Move;</s1>) ，你可以选择一个选项，使其成为项级类，或者将其移到另一个类。
When you invoked Basic Completion (<s0>hortcut:CodeCompletion;</s0>) in Java and didn't find your desired class in the list, it means that it's not yet imported in current file.=当你在Java中使用基本补全时 (<s0>&shortcut:CodeCompletion;</s0>) ，如果没有在列表中找到你所需的类，这意味着它没有导入到当前文件中。
When you need to cast an expression value to the required type the SmartType code completion will help you.=当您需要将表达式值转换为所需类型时，智能代码补全将帮助您。
When you paste a text block into your code, <f0>roductName;</f0> helps you by autoindenting it to fit the new location.=将文本块粘贴到代码中时，<f0>&productName;</f0> 帮助您自动缩进来适应新的位置。
When you perform any kind of project-wide search (usage search, multi-file textual search) you may easily export its results to a text file or to the system clipboard.=当您执行任何类型的项目范围搜索（使用搜索，多文件文本搜索）时，您可以轻松地将其结果导出到文本文件或系统剪贴板。
When you perform search and replace in a file, pressing <s0>hortcut:Find;</s0> shows the search pane.=当你在一个文件中执行搜索和替换，按 <s0>&shortcut:Find;</s0> 显示搜索面板。
When you press <s0>hortcut:ShowIntentionActions;</s0> to invoke a quick fix or intention action, press the right arrow key to reveal the list of additional options.=当你按下 <s0>&shortcut:ShowIntentionActions;</s0> 来调用快速修复或建议操作时，按右方向键可显示额外的选项列表。
When you press the hortcut:EditorLineEnd; key on an empty line, the caret is positioned to the place where you most likely will start typing on this line (Smart End).=当你在空行按下 &shortcut:EditorLineEnd; 时，插入符将定位到该行中你最可能开始输入的位置 (Smart End（智能结尾）)。
When you run or debug your program and some exception is traced in the console view you may easily navigate to source code lines of this stack trace.=当您运行或调试程序并且在控制台视图中跟踪一些异常时，您可以轻松地导航到此堆栈跟踪的源代码行。
When you want to catch exceptions thrown by some code fragment, select it in the editor, press <s0>hortcut:SurroundWith;</s0> (<s1>Code | Surround With</s1>) and choose <s2>try / catch</s2>.=当你想要捕获一些代码片段内抛出的异常时，在编辑器中选择，然后按下 <s0>&shortcut:SurroundWith;</s0> (<s1>Code | Surround With</s1>) 并选择 <s2>try / catch</s2>。
While in the <s0>Find in Path</s0> dialog, you can switch to replace by pressing <s1>hortcut:ReplaceInPath;</s1>.=在<s0>Find in Path</s0> 对话框中，你可以按 <s1>&shortcut:ReplaceInPath;</s1>切换为替换。
While the key is pressed, the tool window buttons are visible.=当按下该键时，工具窗口按钮是可见的。
Widget=Widget
Window=窗口
Windowed Mode=窗口模式
With a single keystroke, you can apply another code style/coloring scheme or keymap right from the editor.=通过单次击键，您就可以从编辑器中应用另一种代码样式/颜色方案或快捷键设置。
With the caret at the class name in the editor, press <s1>hortcut:ShowIntentionActions;</s1>, and choose <s2>Create Test</s2> from the suggestion list:=将插入符号放到编辑器中的类名处，按下 <s1>&shortcut:ShowIntentionActions;</s1>，从建议列表中选择 <s2>Create Test</s2> 。
Work Offline=离线工作
Would you like to create a project from existing sources instead?=你想从现有的源码创建一个项目吗？
XML=XML
XML Configuration File=XML配置文件
You can also click the mouse on usages with the <s2>Ctrl</s2> key pressed to jump to declarations.=你也可以按住 <s2>Ctrl</s2> 键，在使用处点击鼠标，即可跳转到定义处。
You can also copy references in the <s0>GotoClass/GotoSymbol/GotoFile</s0> dialogs.=你也可以在 <s0>GotoClass/GotoSymbol/GotoFile</s0> 对话框中复制引用。
You can also invoke the hierarchy view right from the editor to see the hierarchy for the currently edited class.=您还可以在编辑器右侧显示层次结构视图，以查看当前编辑的类的层次结构。
You can also select the word at the caret and the expanding areas of the source code by double-clicking the target areas in the editor.=您还可以通过双击编辑器中的目标区域来选择插入符处的词及在源代码中扩展区域。
You can also use <s0>Code | Optimize Imports</s0> to automatically optimize imports (remove unused imports, etc.).=你也可以使用 <s0>Code | Optimize Imports</s0> 来自动优化导入（删除未使用的导入等）。
You can always get back to them by selecting <s0>Help | Productivity Guide</s0> from the menu bar.=你总是可以从菜单中选择<s0>帮助|生产力指南</s0>来找回它们。
You can avoid escaping backslashes in your regular expressions.=您可以避免在正则表达式中转义反斜杠。
You can bring forward the list of all usages of a class, method or variable across the whole project, and quickly jump to the selected usage.=您可以列出类、方法或变量在整个项目中的所有使用，并快速跳转到所选的使用。
You can check out an entire project from a Version Control System=可以从一个版本控制系统中签出整个项目
You can check out an entire project from a Version Control System.=可以从一个版本控制系统中签出整个项目
You can comment or uncomment lines and blocks of code using <s0>hortcut:CommentByLineComment;</s0> and <s1>hortcut:CommentByBlockComment;</s1>.=你可以使用 <s0>&shortcut:CommentByLineComment;</s0> 和 <s1>&shortcut:CommentByBlockComment;</s1> 来注释/取消注释行或代码块。
You can configure usage of the differences tool in the <s0>Settings</s0> dialog ( <s1>File | Settings | IDE: General: Diff options</s1>).=你可以在 <s0>Settings（设置）</s0> 对话框中配置不同工具的使用 ( <s1>File | Settings | IDE: General: Diff options</s1>)。
You can create code constructs using statement completion.=您可以使用语句补全来创建代码结构。
You can customize name prefixes for local variables, parameters, instance and static fields in <s0>File | Settings | Code Style</s0>.=你可以在 <s0>File | Settings | Code Style</s0> 中为局部变量，参数，实例和静态字段自定义前缀。
You can customize the bodies of the generated catch blocks on the <s0>Code</s0> tab of <s1>File | Settings | File and Code Templates</s1>.=你可以在 <s1>File | Settings | File and Code Templates</s1> 的 <s0>Code</s0> 选项卡自定义生成的catch块的主体。
You can drag an external file from the Explorer or Finder, and drop it onto the <s0>Favorites</s0> tool window.=您可以从Explorer或Finder拖动外部文件，并将其放在<s0> Favorites </s0>工具窗口中。
You can easily create new classes, interfaces, packages and files by pressing hortcut:Generate; (<f0>Edit | Insert...</f0>) in commander.=你可以通过按 &shortcut:Generate; (<f0>Edit | Insert...</f0>) 轻松创建新的类，接口，包和文件。
You can easily make column selection by dragging your mouse pointer while keeping the <s0>Alt</s0> key pressed.=按住<s0>Alt</s0> 键的同时拖动鼠标指针，你可以轻松地进行列选择。
You can easily open an external file for editing, if you just drag it from the Explorer or Finder to the editor.=只需将外部文件从Explorer（资源管理器）或Finder中拖动到编辑器，就可以轻松打开外部文件进行编辑。
You can easily rename your classes, methods and variables with automatic correction of all places where they are used.=您可以轻松地重命名您的类，方法和变量，并自动更正所有使用它们的位置。
You can easily select multiple fragments of text.=您可以轻松选择多个文本片段。
You can exclude any file from your project.=您可以从项目中排除任何文件。
You can jump directly to any deeply buried file, if you press <s0>hortcut:GotoFile;</s0>, and type just a couple of characters of the enclosing directories and file names:=你可以跳转到任何深层的文件，只需按 <s0>&shortcut:GotoFile;</s0> ，然后输入几个目录或文件名的字符：
You can move any file to a changelist of your choice.=您可以将任何文件移动到您选择的更改列表。
You can navigate through different file versions, see the differences and roll back to any previous version.=您可以浏览不同的文件版本，查看差异并回滚到任何以前的版本。
You can open any file in your project in a similar way by using <s0>hortcut:GotoFile;</s0> (<s1>Navigate | File</s1>)=你可以用类似的方法，使用 <s0>&shortcut:GotoFile;</s0> (<s1>Navigate | File</s1>)打开项目中的任何文件。
You can quickly find a setting you need in the <s0>Settings/Preferences</s0> dialog, without browsing through the numerous options.=你可以在 <s0>Settings/Preferences</s0> 对话框中快速找到所需设置，而无需浏览众多选项。
You can quickly find all places where a particular class, method or variable is used in the whole project by positioning the caret at the symbol's name or at its usage in code and pressing <s0>hortcut:FindUsages;</s0> (<s1>Edit | Find | Find Usages</s1> in the popup menu).=你可以很快地找到特定类，方法或变量在整个项目中的所有使用，只需将插入符号定位于符号的名字处或代码中的使用处，然后按 <s0>&shortcut:FindUsages;</s0> (<s1>Edit | Find | Find Usages</s1> )。
You can quickly find an element in the commander's panel by just typing its first letters (speed search).=您可以通过在命令面板中键入首字母来快速找到元素（快速搜索）。
You can quickly get familiar with the main features of the IDE by reading these tips.=您可以通过阅读这些技巧来快速了解IDE的主要功能。
You can quickly navigate in the currently edited file with <s0>hortcut:FileStructurePopup;</s0> (<s1>Navigate | File Structure</s1>).=通过 <s0>&shortcut:FileStructurePopup;</s0> (<s1>Navigate | File Structure</s1>)，你可以在当前编辑的文件快速导航。
You can quickly open a Maven project by selecting a <s0>pom.xml</s0> file in the <s1>File | Open</s1> dialog.=在<s1>File | Open</s1>对话框中选择一个 <s0>pom.xml</s0> 文件来快速打开Maven 项目。
You can quickly open an Eclipse project by selecting a <s0>.classpath</s0> or <s1>.project</s1> file in the <s2>File | Open</s2> dialog.=你可以在 <s2>File | Open</s2>对话框中选择一个<s0>.classpath</s0> 或 <s1>.project</s1> 文件，来快速打开一个Eclipse项目。
You can quickly review all styles currently applied to an HTML tag, by right-clicking the tag name and selecting <s0>Show Applied Styles For Tag</s0> from the context menu:=你可以快速查看应用于HTML标签的所有样式，只需右击标签名字，然后从上下文菜单中选择 <s0>Show Applied Styles For Tag</s0> ：
You can quickly view the image referenced at caret by using the <s0>Quick Definition</s0> (<s1>hortcut:QuickImplementations;</s1>).=你可以使用 <s0>Quick Definition</s0> (<s1>&shortcut:QuickImplementations;</s1>)来快速查看插入符号处的图片引用。
You can replace special characters in the XML or HTML files with their ASCII values that start with an apostrophe.=您可以使用以撇号开头的ASCII值替换XML或HTML文件中的特殊字符。
You can significantly improve the performance, if you exclude certain folders from the antivirus protection.=如果从防病毒保护中排除某些文件夹，您可以显着提高性能。
You can simply apply differences between panes, by clicking one of these <i0>chevron</i0> buttons.=你可以通过点击<i0>chevron</i0> 按钮之一来简单地应用窗格中的差异。
You can start referring to an Ant property or target even if it is not defined yet.=即使尚未定义，也可以引用Ant属性或目标。
You can switch between sorting completion variants by relevance or alphabetically by using an icon at the bottom right:=你可以使用右下角的图标，来切换补全变量按相关性或字母顺序排列。
You can use <s0>Basic Completion</s0> (<s1>hortcut:CodeCompletion;</s1>) in HTML, CSS and JavaScript files, for completing attributes, parameters, tags, selectors, etc.=你可以在HTML， CSS 和 JavaScript 文件中使用 <s0>Basic Completion（基本补全）</s0> (<s1>&shortcut:CodeCompletion;</s1>) 来被全属性，参数，标签，选择器等。
You can use <s0>Basic Completion</s0> (<s1>hortcut:CodeCompletion;</s1>) within Java String literals and in other file types, for completing <s2>.properties</s2> keys.=你可以在Java字符串及其他文件类型中，使用<s0>Basic Completion（基本补全）</s0> (<s1>&shortcut:CodeCompletion;</s1>) 来补全 <s2>.properties</s2> 。
You can use the <s0>Extract Variable</s0> refactoring even on incomplete statements.=即使在不完整的语句上，也可以使用<s0>Extract Variable（提取变量）</s0>重构。
You can view all methods of the implemented interfaces in a class, if you place the caret at the implements keyword in the class declaration, press <s0>hortcut:HighlightUsagesInFile;</s0>, and select the desired interface from the list:=你可以查看类中所实现的接口的所有方法，将插入符号放到类申明的 implements 关键字上，按 <s0>&shortcut:HighlightUsagesInFile;</s0>，然后从列表中选择所需的接口。
You can view all statements within the method where certain exceptions can be caught.=您可以查看方法中可以捕获某些异常的所有语句。
You do not need to open a file in the editor to change its line separator style.=您不需要在编辑器中打开一个文件来更改其换行符样式。
You don't need to guess which <s0>index.html</s0> file you are looking at...=你不需要猜测你在看哪一个<s0>index.html</s0> 
You don't need to invoke quick documentation explicitly (<s0>hortcut:QuickJavaDoc;</s0>) - if you just move your mouse pointer over the desired symbol, the quick documentation pop-up window will show automatically.=你不需要明确地调用快捷文档 (<s0>&shortcut:QuickJavaDoc;</s0>) ，只需将鼠标指针移到期望符号上，快捷文档将会自动弹窗显示。
You don't need to leave <s0>roductName;</s0> to work with your favorite shell.=你不需要离开 <s0>&productName;</s0> 去使用你喜欢的 shell 。
You may always invoke it explicitly by using hortcut:CodeCompletion;.=你总可以通过 &shortcut:CodeCompletion; 明确调用它。
You may easily move classes between packages with automatic correction of all places where they are used at.=您可以轻松地在包之间移动类，并自动更正使用它们的所有地方。
You may easily override methods of the base class by pressing <s0>hortcut:OverrideMethods;</s0> (<s1>Code | Override Methods</s1>).=你可以通过按 <s0>&shortcut:OverrideMethods;</s0> (<s1>Code | Override Methods</s1>)轻松地覆写基类的方法。
You may try out the features described in the tips while this dialog stays open on the screen.=当对话框在屏幕上保持打开状态时，您也可以尝试提示中描述的功能。
You must have the correct indent size and other settings set in the correspondence to your code style preferences in the "Source Code" options.=您必须在与“Source Code”选项中的代码样式首选项中设置正确的缩进大小和其他设置。
You must have the path to your browser set in the <s0>File | Settings | Web Browsers</s0> options and paths to documentation files added to your project (<s1>File | Project Structure...</s1>) to use this feature.=要使用该功能，你必须在 <s0>File | Settings | Web Browsers</s0> 选项中配置浏览器路径，并在 (<s1>File | Project Structure...</s1>) 中将文档文件添加到项目中。
You want your bookmarks and breakpoints to be always at hand, so that you can easily navigate through them?=您希望您的书签和断点永远在手前，以便您可以轻松浏览它们吗？
You will never lose any code with this feature!=使用此功能，你将不会失去任何代码！
You will not be able to open the project by earlier versions of IDEA=您将无法通过早期版本的IDEA打开该项目
You'll see all the matching methods.=您将看到所有匹配的方法。
Zoom In=放大
Zoom Out=缩小
Zoom in=放大
Zoom out=缩小
alt insert in editor=编辑器中的代码生成
and press hortcut:EditorLineEnd; anywhere on the empty line between braces, the caret is positioned to one indent to the right from the position just under "public".=然后在括号中的任何位置按下 &shortcut:EditorLineEnd; ，插入符将定位到"public"下方一个缩进位置的右侧。
and press <s0>hortcut:CodeCompletion;</s0>.=然后按下 <s0>&shortcut:CodeCompletion;</s0> 。
and press <s0>hortcut:IntroduceVariable;</s0> (<s1>Refactor | Extract | Variable...</s1>).=然后按 <s0>&shortcut:IntroduceVariable;</s0> (<s1>Refactor | Extract | Variable...</s1>)。
and press <s0>hortcut:SmartTypeCompletion;</s0> to see what happens.=然后按下 <s0>&shortcut:SmartTypeCompletion;</s0> 看会发生什么。
and press <s0>hortcut:SmartTypeCompletion;</s0>:=然后按下 <s0>&shortcut:SmartTypeCompletion;</s0>：
annotations and diffs=注释和差异
antivirus=防病毒
breakpoint speedmenu=断点快速菜单
camel humps in code completion=代码补全中的驼峰模式
camel prefixes in navigation popups=导航弹窗中驼峰前缀
cancel by control arrows=通过方向箭头取消
change signature after moving parameters=移动参数后更改签名
change sorting=更改排序
changes view=changes 视图
clipboard stack=剪贴板栈
close others=关闭其他
code completion=代码补全
code completion in search=搜索中的代码补全
code completion middle=中间代码补全
code completion no shift=不区分大小写补全
color editing in android=android中的颜色编辑
color files=颜色标记文件
column selection=列选择
comment code=注释代码
commit ctrl K=提交更改
commit ctrl k=提交更改
complete method=补全方法
complete statement=代码补全
completion import static=补全时导入static
configuring terminal=配置终端
constructor docs=构造函数文档
context info=上下文信息
copy class=复制类
copy paste reference=复制粘贴引用
copy with no selection=未选择时复制
create property tag=创建属性标签
create test intention action=创建测试意图动作
createTest=createTest
css/tips.css=css/tips.css
ctrl D=重复行或块
ctrl W=扩展选择
ctrl d=重复行或块
ctrl dot in lookups=在查找列表中按Ctrl+点
ctrl shift I=快速定义
ctrl shift I for lookup=查找列表中查看定义
ctrl shift i=快速定义
ctrl shift i for lookup=查找列表中查看定义
ctrl w=扩展选择
delete line=删除行
diff chevron=差异 chevron
dir diff=目录差异
dot etc in lookups=查找列表中的点等
drag to open=拖动打开
edit reg exp=编辑正则表达式
en=en
enter directory in goto file=转到文件时输入目录
equals() and hashCode()=equals() 和 hashCode()
escape=Esc
evaluate expression in editor=编辑器中计算表达式
exclude from project=从项目排除
excludeFromSuite=从套件中排除
external java doc=外部 java 文档
favorites tool window 1=收藏夹工具窗口1
favorites tool window 2=收藏夹工具窗口2
favorites tool window1=收藏夹工具窗口1
favorites tool window2=收藏夹工具窗口2
file structure popup=文件结构弹窗
find replace toggle=查找替换切换
find usages=查找使用
finish by exclamation=通过感叹号完成
finish by smart enter=通过智能输入完成
fix doc comment=修复文档注释
from https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf=来自 https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf
go to action=转到操作
go to class=转到类
go to declaration=转到声明
go to file=转到文件
go to implementation=转到实现
go to inspection=转到检查
go to symbol=转到符号
goto line in file=转到文件中的行
goto_symbol.gif - a snapshot of Ctrl+Alt+Shift+N feature.=goto_symbol.gif -  Ctrl+Alt+Shift+N 功能的截图。
hg4idea=hg4idea
hierarchy browser=层次浏览器
highlight implements=高亮实现
highlight method exit point=高亮方法退出点
highlight throws=高亮抛出
highlight usages in file=在文件中的高亮用法
hippie completion=hippie 补全
horizontal scrolling=水平滚动
image file completion=图像文件补全
images/CodeCompletionInSearch.png=images/CodeCompletionInSearch.png
images/PostfixCompletion.png=images/PostfixCompletion.png
images/RunConfigFolder.png=images/RunConfigFolder.png
images/SSHKeyUpload.png=images/SSHKeyUpload.png
images/SpeedSearchInLiveTemplates.png=images/SpeedSearchInLiveTemplates.png
images/alt_insert_in_editor.png=images/alt_insert_in_editor.png
images/annotationShowDiff.png=images/annotationShowDiff.png
images/ant_property_intention.png=images/ant_property_intention.png
images/ant_target_intention.png=images/ant_target_intention.png
images/apply_signature_change.png=images/apply_signature_change.png
images/arrayMember.png=images/arrayMember.png
images/arrow.png=images/arrow.png
images/arrowLeftDown.png=images/arrowLeftDown.png
images/arrowRight.png=images/arrowRight.png
images/arrowRightDown.png=images/arrowRightDown.png
images/aslist_after.png=images/aslist_after.png
images/aslist_before.png=images/aslist_before.png
images/bookmarks1.png=images/bookmarks1.png
images/breakpoint_speedmenu.png=images/breakpoint_speedmenu.png
images/camel_completion.png=images/camel_completion.png
images/camel_goto.png=images/camel_goto.png
images/chain_after.png=images/chain_after.png
images/changeLookupSorting.png=images/changeLookupSorting.png
images/checkRegExp.png=images/checkRegExp.png
images/close1.png=images/close1.png
images/close_others.png=images/close_others.png
images/closing_tags.png=images/closing_tags.png
images/code_completion.png=images/code_completion.png
images/code_completion_middle.png=images/code_completion_middle.png
images/code_completion_no_shift.png=images/code_completion_no_shift.png
images/coloredFiles.png=images/coloredFiles.png
images/columnSelection.png=images/columnSelection.png
images/complete_statement.png=images/complete_statement.png
images/completionImportStatic.png=images/completionImportStatic.png
images/completion_in_html.png=images/completion_in_html.png
images/completion_in_html2.png=images/completion_in_html2.png
images/copy_rich_text.png=images/copy_rich_text.png
images/createTest.png=images/createTest.png
images/cssColor.png=images/cssColor.png
images/ctrl_click.png=images/ctrl_click.png
images/ctrl_shift_i.png=images/ctrl_shift_i.png
images/ctrl_shift_in_lookup.png=images/ctrl_shift_in_lookup.png
images/dragToOpen.png=images/dragToOpen.png
images/editregexp.png=images/editregexp.png
images/emmet.png=images/emmet.png
images/enterDirectory.png=images/enterDirectory.png
images/exclamationFinish_after.png=images/exclamationFinish_after.png
images/exclamationFinish_before.png=images/exclamationFinish_before.png
images/external_file.png=images/external_file.png
images/extract_variable_incomplete.png=images/extract_variable_incomplete.png
images/fix_doc_comment.png=images/fix_doc_comment.png
images/gotoFileLineNumber.png=images/gotoFileLineNumber.png
images/goto_class.png=images/goto_class.png
images/goto_file.png=images/goto_file.png
images/goto_symbol.png=images/goto_symbol.png
images/hierarchy_browser.png=images/hierarchy_browser.png
images/highlightExceptions.png=images/highlightExceptions.png
images/highlightImplemented.png=images/highlightImplemented.png
images/hippie.png=images/hippie.png
images/image_completion.png=images/image_completion.png
images/image_lookup.png=images/image_lookup.png
images/insert_live_template.png=images/insert_live_template.png
images/introduce_variable_1.png=images/introduce_variable_1.png
images/introduce_variable_2.png=images/introduce_variable_2.png
images/issueNavigation.png=images/issueNavigation.png
images/issueNavigation1.png=images/issueNavigation1.png
images/lens.png=images/lens.png
images/lens1.png=images/lens1.png
images/line_separator.png=images/line_separator.png
images/line_separator_folder.png=images/line_separator_folder.png
images/live_templates_1.png=images/live_templates_1.png
images/live_templates_2.png=images/live_templates_2.png
images/methodExitPoints.png=images/methodExitPoints.png
images/method_separator.png=images/method_separator.png
images/move_inner.png=images/move_inner.png
images/move_to_changelist.png=images/move_to_changelist.png
images/move_up_down_witharrows_down.png=images/move_up_down_witharrows_down.png
images/move_up_down_witharrows_initial.png=images/move_up_down_witharrows_initial.png
images/move_up_down_witharrows_up.png=images/move_up_down_witharrows_up.png
images/multicursor.png=images/multicursor.png
images/multicursor1.png=images/multicursor1.png
images/multiselection2.png=images/multiselection2.png
images/multiselection_column.png=images/multiselection_column.png
images/multiselection_words.png=images/multiselection_words.png
images/navigateToFilePath.png=images/navigateToFilePath.png
images/navigationbar.png=images/navigationbar.png
images/param_info.png=images/param_info.png
images/properties_completion.png=images/properties_completion.png
images/qdoc_live_template.png=images/qdoc_live_template.png
images/quick_evaluate.png=images/quick_evaluate.png
images/quick_fix_options.png=images/quick_fix_options.png
images/quick_javadoc.png=images/quick_javadoc.png
images/quick_javadoc_in_lookups.png=images/quick_javadoc_in_lookups.png
images/quick_switch_scheme.png=images/quick_switch_scheme.png
images/quickdoc.png=images/quickdoc.png
images/recentSearch.png=images/recentSearch.png
images/recent_changes.png=images/recent_changes.png
images/recent_files_1.png=images/recent_files_1.png
images/recent_files_2.png=images/recent_files_2.png
images/refactor_this.png=images/refactor_this.png
images/reference_copied.png=images/reference_copied.png
images/reference_pasted.png=images/reference_pasted.png
images/remove.png=images/remove.png
images/remove_from_sidebar.png=images/remove_from_sidebar.png
images/rename.png=images/rename.png
images/resource_bundle_1.png=images/resource_bundle_1.png
images/resource_bundle_2.png=images/resource_bundle_2.png
images/scratch.png=images/scratch.png
images/scratches_view.png=images/scratches_view.png
images/search_settings.png=images/search_settings.png
images/second_code_completion.png=images/second_code_completion.png
images/select_in.png=images/select_in.png
images/select_tasks.png=images/select_tasks.png
images/showUsages.png=images/showUsages.png
images/show_applied_styles.png=images/show_applied_styles.png
images/show_hide_tool_window_bars.png=images/show_hide_tool_window_bars.png
images/sidebyside.png=images/sidebyside.png
images/smart_type_after_new_1.png=images/smart_type_after_new_1.png
images/smart_type_after_new_2.png=images/smart_type_after_new_2.png
images/smart_type_completion_1.png=images/smart_type_completion_1.png
images/smart_type_completion_2.png=images/smart_type_completion_2.png
images/speed_search.png=images/speed_search.png
images/surround_with.png=images/surround_with.png
images/switcher.png=images/switcher.png
images/tagNameCompletion.png=images/tagNameCompletion.png
images/terminal.png=images/terminal.png
images/toar_after.png=images/toar_after.png
images/toar_before.png=images/toar_before.png
images/todo_preview.png=images/todo_preview.png
images/todo_scopes.png=images/todo_scopes.png
images/variable_name_completion.png=images/variable_name_completion.png
images/vcsQuickList.png=images/vcsQuickList.png
images/wildcard_goto.png=images/wildcard_goto.png
images/word_completion.png=images/word_completion.png
import Module=导入模块
in a method and press the <s0>Tab</s0> key to see what happens.=，然后按 <s0>Tab</s0> 键看会发生什么。
insert live template=插入代码模板
introduce variable=引入变量
introduce variable incomplete code=不完整代码引入变量
issue navigation=问题导航
jar diff=jar 差异
join lines=连接行
jump to last edit=跳转到最后一次编辑
layout code=布局代码
lens mode=透镜模式
line endings=换行符
line endings folder=为文件夹修改换行符
live templates=代码模板
live templates restore=代码模板重置
local VCS=本地VCS
local v c s=本地版本历史
menu items descriptions=菜单项的描述
method separators=方法分隔线
method up down=方法间上下称动
methodMissing( )=methodMissing( )
module-info.java=module-info.java
move file to changelist=移到更改列表
move inner to upper=内部类移出
move to changelist=移到更改列表
move up down=上下移
multicursor=多个光标
multicursor 1=多个光标1
multicursor1=多个光标1
multiselection 1=多选1
multiselection 2=多选2
multiselection words=多选单词
multiselection1=多选1
multiselection2=多选2
nav bar=导航栏
navigate to file path=导航到文件路径
next prev error=下一个/上一个错误
override implement methods=重写/实现方法
parameter info=参数信息
postfix completion=后缀完成
preview TODO=预览TODO
preview t o d o=预览 TODO
print keywords=打印关键词
private FileOutputStream=private FileOutputStream
properties completion=属性补全
propertyMissing( )=propertyMissing( )
public void f(){=public void f(){
qfo=qfo
quick doc in suggestion list=建议列表中的快速文档
quick doc on mouse move=鼠标移动时的快速文档
quick evaluate expression=快速计算的表达
quick fix right arrow=快速修复的右箭头
quick java doc=快速 java 文档
quick java doc in lookups=查找列表中查看快速 java 文档
quick switch scheme=快速切换方案
recent changes=最近的更改
recent files=最近的文件
recent search=最近搜索
refactor this=重构
remove tool window button=删除工具窗口按钮
rename=重命名
rich text copy=富文本复制
run config folders=分组运行配置
scopes in TODO=TODO 中的范围
scopes in t o d o=TODO 中的范围
scratch=临时文件
scratches view=临时文件视图
search everywhere=全局搜索
search in settings=在设置中搜索
second basic class name completion=第二次智能补全类名
second smart completion array member=第二次智能补全数组成员
second smart completion as list=第二次智能补全 asList
second smart completion chain=第二次智能补全链式
second smart completion toar=第二次智能补全 toArray
select in=选择
select run debug configuration=选择运行调试配置
select tasks=选择任务
show hide side bars=显示隐藏侧栏
show usages=显示使用
smart type after new=new之后的智能类型
smart type casting=智能类型转换
smart type completion=智能类型完成
speed search=快速搜索
speed searchin live templates=在代板模板中快速搜索
spellchecker=拼写检查
spellchecker dictionaries=拼写检查字典
surround with=环绕
switcher=切换器
tab in editor close=编辑器中关闭的选项卡
tab in lookups=查找中的选项卡
terminal=终端
terminal open=终端打开
then the resource bundle editor will show=那么资源束编辑器将显示
toString( )=toString( )
variable name completion=变量名补全
vcs quick list=版本控制快速列表
welcome=欢迎
wide screen=加宽屏幕
wildcards in navigation popups=在导航弹窗中的通配符
word completion=单词补全
{0,choice,0#File|1#Directory} Path={0,choice,0#File|1#Directory} 路径
}=}
Mark as=标记为
Whole &project=整个项目
Project ''{0}''=项目 ''{0}''
Directory ''{0}''=目录 ''{0}''
Show Files=显示文件
Show/Hide Files=显示/隐藏文件
Include Test Dependencies=包括测试依赖关系
Analysis=分析
Flatten Packages=拼合包
Show Modules=显示模块
Show/Hide Modules=显示/隐藏模块
Edit Rules=编辑规则
Edit Dependency Rules=编辑依赖规则
Dependency Analysis=依赖性分析
{0} the whole &project={0}整个项目
cycle=循环
Usages of package ''{0}'' in package ''{1}''=在包''{1}''里,包''{0}''的使用
Select package to analyze from the left tree=从左边树选择分析的包
Building dependencies graph=构建依赖关系图
Inspect &module ''{0}''=检查模块"{0}"
Inspect the whole &project=检查整个项目
Usages of the left tree scope selection in the right tree scope selection=左树选择范围的使用,在右树选择范围
Select where to search in right tree and what to search in left tree=选择在右树哪里搜索和在左树搜索什么
Usages of the right tree scope selection in the left tree scope selection=右树选择范围的使用,在左树选择范围
Select where to search in left tree and what to search in right tree=选择在左树哪里搜索和在右树搜索什么
Searching for usages in: {0}=搜索使用在:{0}
Dependencies of {0}={0}的依赖
Dependencies of {0} on {1}=在{1}上{0}的依赖
No dependencies of {0} on {1} found=在{1}没有发现{0}的依赖
Backward Dependencies of {0}={0}的反向依赖
Scanning packages=扫描包
Scanning Packages=扫描包
Library Classes=库类
Test Classes=测试类
Production Classes=生产类
Libraries=库
No rules are violated=没有违背规则
The following rule{0, choice, 1# is|2#s are} violated: {1}=以下规则{{0, choice, 1# is|2#s are} 违反: {1}
Dependency Validation=依赖验证
in=位于
only in=仅位于
Deny usages of scope ''{0}'' in scope ''{1}''=在范围''{1}''禁用范围''{0}''的使用
Allow usages of scope ''{0}'' in scope ''{1}''=在范围''{1}''启用范围''{0}''的使用
&Uncommitted files=未提交的文件
Skip import statements=跳过导入语句
Mark Illegal=非法掩码
Settings Import Failed=设置导入失败
Complete Installation=完成安装
Insert '()'=插入 '()'
Insert '('=插入 '('
Brackets:=方括号:
First letter=首字母
Around initializer:=围绕初始化:
Blank Lines=空行
Preview=预览
Instance fields=实例字段
Static fields=静态字段
Instance methods=实例方法
Static methods=静态方法
Constructors=构造函数
Inner classes=内部类
Static inner classes=静态内部类
Comment Code=注释的代码
Order of Members=成员顺序
Move &Up=上移
Naming=命名
Name prefix:=名称前缀:
Name suffix:=名称后缀:
Field:=字段：
Static field:=静态字段：
Parameter:=参数：
Code Generation=代码生成
Insert New Line Before Tags=在标签之前插入新行
Inline Elements=内联元素
Preselect old name=预选旧名称
Generated quote marks:=生成的引号:
Spaces=空格
lines=行
Keep line breaks=保留换行符
Imports=导入
Use fully qualified class names in javadoc=在javadoc中使用全修饰类名
Use fully qualified class names in JavaDoc:=使用Javadoc中完全合格的类名:
Never, use short name and add import=切勿使用短名称添加导入
Import Layout=导入布局
Wrap on typing=键入换行
No=否
Yes=是
Line breaks=换行符
Comment at first column=注释在第一列
Simple classes in one line=简单的类在同一行
Simple methods in one line=简单的方法在同一行
Multiple expressions in one line=多个表达式在同一行
Simple blocks in one line=简单的块在同一行
Do not wrap=不换行
Wrap always=总是换行
In class declaration=在类声明
In method declaration=在方法声明
End of line=行尾
Next line=下一行
Align when multiline=多行时对齐
Align parenthesised when multiline=多行时对齐括号
Method declaration parameters=方法声明参数
Method call arguments=方法调用参数
Chained method calls=链式方法调用
Wrap first call=换行第一个调用
'for()' statement='for()'语句
'if()' statement='if()'语句
'while()' statement='while()'语句
'do ... while()' statement='do ... while()'语句
'switch' statement='switch'语句
'try' statement='try'语句
Binary expressions=二进制表达式
Throws list=异常列表
Align 'throws' to method start=对齐'throws'到方法开始处
Ternary operation=三元操作
Assignment statement=赋值语句
Class annotations=类注释
Method annotations=方法注释
Parameter annotations=参数注释
Ensure right margin is not exceeded=确保不超过右边距
Annotation parameters=注释参数
Chained methods=链式方法
Method parameters=方法参数
Call arguments=调用参数
Extends list=扩展列表
Assignments=赋值
Control statement in one line=控制语句在同一行
Braces Placement=括号布置
Edit &Global Settings=编辑全局设置
Around Operators=运算符周围
Before Parentheses=括号之前
Before Left Brace=左大括号之前
Before Keywords=关键字之前
Within=内部
Within Type Arguments=在类型参数
Method call parentheses=方法调用括号
Method declaration parentheses=方法声明括号
'if' parentheses='if'括号
'while' parentheses='while'括号
'for' parentheses='for'括号
'try' parentheses='try'括号
'catch' parentheses='catch'括号
'switch' parentheses='switch'括号
'synchronized' parentheses='synchronized'括号
Assignment operators (=, +=, ...)=赋值操作符 (=, +=, ...)
Equality operators (==, !=)=相等运算符 (==, !=)
Relational operators (<, >, <=, >=)=关系运算符 (<, >, <=, >=)
Additive operators (+, -)=加法运算符 (+, -)
Multiplicative operators (*, /, %)=乘法运算符 (*, /, %)
Shift operators (<<, >>, >>>)=移位运算符 (<<, >>, >>>)
Unary operators (!, -, +, ++, --)=一元运算符 (!, -, +, ++, --)
Class left brace=类的左大括号
Method left brace=方法左大括号
'if' left brace='if'左大括号
'else' left brace='else'左大括号
'while' left brace='while'左大括号
'for' left brace='for'左大括号
'do' left brace='do'左大括号
'switch' left brace='switch'左大括号
'try' left brace='try'左大括号
'catch' left brace='catch'左大括号
'finally' left brace='finally'左大括号
'synchronized' left brace='synchronized'左大括号
'else' keyword='else'关键字
'while' keyword='while' 关键字
'catch' keyword='catch' 关键字
'finally' keyword='finally' 关键字
Brackets=方括号
Array initializer braces=数组初始化大括号
Empty array initializer braces=空数组初始化大括号
Type cast parentheses=类型转换括号
Annotation parentheses=注释括号
After comma=逗号之后
Before comma=逗号之前
After semicolon=分号之后
Before semicolon=分号之前
Warning=警告
Indent Block=缩进块
Indent Each Line=缩进每一行
Unindent:=取消缩进:
Disabled=禁用
To nearest indent position=最近缩进位置
To proper indent position=正确缩进位置
Appearance=外观
Smooth scrolling=平滑滚动
Show method separators=显示方法分隔符
Show line numbers=显示行号
Show breadcrumbs=显示面包屑(breadcrumbs)
Code Folding=代码折叠
<html>Anonymous classes</html>=<html>匿名类</html>
<html>Annotations</html>=<html>注释</html>
Documentation comments=文档注释
File header=文件头
Custom folding regions=自定义折叠区域
Show code folding outline=显示代码折叠大纲
Tab Appearance=选项卡外观
Tab limit:=选项卡限制:
Navigation from non-modified tab will reuse it=非修饰的标签导航将重新使用它
Hide tabs if there is no space=如果没有空格则隐藏选项卡
Tab Closing Policy=选项卡关闭策略
<html>Activate most recently opened tab</html>=<html>激活最近打开的选项卡</html>
Soft Wraps=自动换行
Show soft wrap indicators for current line only=显示当前行的软包
Limits=限制
Override console cycle buffer size ({0} KB)=覆盖控制台循环缓冲区大小 ({0} KB)
Highlight matched brace=突出显示匹配的括号
Mouse=鼠标
<html>Enable Drag'n'Drop functionality in editor</html>=<html>在编辑窗口中启用拖放功能</html>
Insert pair bracket=插入成对括号
Smart indent=智能缩进
Smart Enter:=智能输入:
Home=首页
Error highlighting=错误高亮显示
Use tab character=使用制表符
Keep indents on empty lines=保持空行缩进
Absolute label indent=绝对标签缩进
System-Dependent=系统相关
Windows (\\r\\n)=Windows (\r\n)
Classic Mac (\\r)=Classic Mac (\r)
Invalid tags=无效标签
Blank lines=空行
Alignment=对齐
Enable JavaDoc formatting=启用JavaDoc格式
Align parameter descriptions=对齐参数说明
Align thrown exception descriptions=对齐抛出异常说明
Keep invalid tags=保持无效标签
Keep empty lines=保持空行
Choose Code Style Scheme=选择代码风格方案
Export=导出
Edit Global Settings=编辑全局设置
Import Scheme=导入方案
Unnamed=未命名
Export As=导出为
Target File=目标文件
Export to=导出到
Cannot write to selected file/location=无法写入选定的文件/位置。
Export failed: {0}=导出失败: {0}
Scheme must have a name=方案必须有一个名字
Illegal scheme name=非法方案名称
Select Font=选择字体
Apply editor font settings=应用编辑器字体设置
Show only monospaced fonts=只显示等宽字体
Enter tag name:=输入标签名称:
Tag Name=标签名称
Effects=效果
Underscored=下划线
Strikeout=删除线
Dotted Line=虚线
Bold=粗体
Italic=斜体
Font=字体
File Status=文件状态
Size:=大小:
Analyzing Fonts=分析字体
Cannot Modify Read-Only Scheme=不能修改只读方案
Read-only scheme, copy to edit=只读模式，复制到编辑
Path Variables=路径变量
Value:=值:
Value=值
Add Variable=添加变量
Edit Variable=编辑变量
Confirm Exit=确认退出
Exclude Package=排除包
No exclude patterns=不排除模式
Inline elements:=内联元素:
Open code folding options=打开代码折叠选项
Use &external annotations=使用外部注释
Auto Import=自动导入
Other Languages=其他语言
Create Launcher Script=创建启动脚本
Filesystem Case-Sensitivity Mismatch=文件系统中区分大小写不匹配
Type=类型
Modifier=修饰符
Order=顺序
Add rule=添加规则
Grouping rules=分组规则
Matching rules=匹配规则
Rules alias definitions=别名定义的规则
Type:=类型:
Text:=文本:
Order:=顺序:
Aliases:=别名:
Namespace:=命名空间:
tag=标签
attribute=属性
Never=从不
Additional settings=附加设置
Can not find start section rule for the current end rule=找不到启动部分规则结束当前规则。
Default Options=默认选项
Formatter Control=格式化程序控制
Regular expressions=正则表达式
Invalid regular expression=无效的正则表达式
Markers=标记
Options=选项
From\:=从:
Color scheme=配色方案
More than {0} matches=超过 {0} 匹配
Other File Types=其他文件类型
Remote desktop detected=远程桌面检测
Animation disabled=禁用动画
&Selected text=选中的文本
&Include subdirectories=包含子目录
&Output directory:=输出目录:
Select output directory=选择输出目录
Show &line numbers=显示行号
Open generated HTML in &browser=在浏览器中打开生成的HTML
Header and Footer=页眉和页脚
Paper size=纸张大小
Orientation=方向
Syntax printing=语法印刷
Print as graphics=作为图形打印
No wrap=不换行
Line #1=行 #1
Line #2=行 #2
Text line=文本行
A&pply=应用
File - $FILE$=文件 - $FILE$
File Is Read-Only=文件是只读的
process only VCS changed files=只处理 VCS 更改的文件
&Optimize imports=优化导入
Adjust code style settings=调整代码样式设置
Skip=跳过
Filtering settings affecting selected code fragment=影响选定代码片段的过滤设置…
Press 'Skip' to show all settings=按“跳过”显示所有设置
Optimize Imports Before Commit=提交前优化导入
Optimizing imports=优化导入
Expanding necessary children indents=扩大必要的子项缩进
Rearranging code=重新编码…
<html>The code fragment which you have pasted uses classes that are not accessible by imports in the new context.<br/>Select classes that you want to import to the new file.</html>=<html>你所粘贴的代码片段使用的是不是在新的形势下，可以通过导入类。<br/>选择类，您要导入到新文件。</html>
<html>The code fragment which you have pasted uses elements that are not accessible by imports in the new context.<br/>Select elements that you want to import to the new file.</html>=<html>你所粘贴的代码片段使用，是不是在新的上下文访问的导入元件。<br/>选择元素，你想导入到新文件。</html>
FoldingData=折叠数据
ReferenceData=参考数据
Generate equals() and hashCode()=生成equals()和hashCode()
No java.lang.Object=没有java.lang.Object
Please Correct "Overridden/Implemented Method Body" Template=请正确"覆盖/实现方法主体"模板
File Template Error=文件模板错误
Runnable=可运行状态
Invalid File Template for Catch Body!=无效的文件模板,用于catch body
Surround With Try / Catch=环绕用try-catch
Remove 'else...'=移除 'else...'
Remove 'catch...'=移除 'catch...'
Unwrap 'lambda...'=展开 'lambda...'
Choose &fields to be included in equals()=选择要被包含在equals()中的字段(f)
Choose &fields to be included in hashCode()=选择要被包含在hashCode()中的字段(f)
Select all non-null &fields=选择所有非空字段
Use &getters during code generation=在代码生成过程中使用 &getters
&Template:=模板(&T):
Accept &subclasses as parameter to equals() method=接受子类作为参数equals()方法(
<html><body>While generally incompliant to Object.equals() specification accepting<br>subclasses might be necessary for generated \method to work correctly<br>with frameworks, which generate Proxy subclasses like Hibernate.</body></html>=<html><body>Object.equals() 不符合接受范围内<br>子类可能需要生成方法的正确工作<br>在框架中, 它生成的代理子类如Hibernate。</body></html>
Internal error=内部错误
equals() for nested arrays is not supported=equals()不支持嵌套的数组
Generated equals() for Object[] can be incorrect=生成的Object[]的equals()可能不正确
hashCode () for arrays is not supported=hashCode()不支持数组
All listed=所有列出的
{0} exit {0, choice, 1#point|2#points} highlighted (press {1} again to remove the highlighting, Escape to remove all highlighting)={0}exit {0, choice, 1#point|2#points} 高亮的 (按{1}再次移除高亮显示, 取消移除所有高亮)
{0} {0, choice, 1#usage|2#usages} of {1} found (press {2} again to remove the highlighting, Escape to remove all highlighting)={0}{0, choice, 1#usage|2#usages} 由{1}找到 (按 {2} 再次移除高亮显示, 取消移除所有高亮)
{0} {0, choice, 1#usage|2#usages} found (press {2} again to remove the highlighting, Escape to remove all highlighting)={0}{0, choice, 1#usage|2#usages} 找到 (按 {2} 再次移除高亮显示, 取消移除所有高亮)
{0} overridden {0, choice, 1#method|2#methods} found (press {1} again to remove the highlighting, Escape to remove all highlighting)={0}overridden {0, choice, 1#method|2#methods} 找到 (按{1}再次移除高亮显示, 取消移除所有高亮)
No usages of {0} found={0}发现没有用途
Property Info=属性信息
Java Code Info=Java代码信息
I18nize string concatenation containing hard coded string literal=I18nize字符串连接包含硬编码字符串
String concatenation not found=字符串连接没有找到
Hard coded strings=硬编码字符串
Ignore for assert statement arguments=忽略断言语句参数
Ignore for exception constructor arguments:=忽略异常构造函数参数:
Ignore for specified exception constructor arguments=忽视对指定的异常构造函数参数
Ignore for JUnit assert arguments=忽视对JUnit断言参数
Ignore literals which have value equal to existing qualified class name=忽略文字具有价值等于现有的完全限定类名
Ignore literals which have value equal to existing property key=忽略文字具有价值等于现有的属性键
Ignore literals which do not contain alphabetic characters=忽略文字不包含字母字符
I18nize hard coded string literal=I18nize硬编码字符串
Hard coded string literal: {0}=硬编码字符串:{0}
Invalid property key=无效属性健
String literal ''{0}'' doesn''t appear to be valid property key=字符串文字"{0}"不似乎是有效的属性键
Invalid resource bundle reference ''{0}''=无效的资源束参考"{0}"
I18nize Hardcoded String=I18nize硬编码字符
Class Not Found=类未找到
Choose Properties File=选择属性文件
Property Already Exists=属性已经存在
Split Declaration=拆分声明
Join Declaration and Assignment=加入宣言和赋值
Split into separate declarations=拆分为分开的声明
Join declaration and assignment=加入宣言和赋值
Split into declaration and assignment=拆分为声明和赋值
Split If=分裂如果
Split into 2 if's=分成2如果的
Introduce local variable=引入局部变量
Encapsulate field=封装领域
Implement Abstract Method=实现抽象方法
Implement method ''{0}''=实现方法 ''{0}''
Add Annotation=添加注释
Add On Demand Static Import=对需求添加静态导入
Add on demand static import for ''{0}''=对需求添加静态导入"{0}"
Add Single-Member Static Import=添加单一静态导入
Add static import for ''{0}''=添加静态导入"{0}"
Add import for ''{0}''=添加导入"{0}"
Replace Concatenation with Formatted Output=更换连接与格式化输出
Replace '+' with 'java.text.MessageFormat.format()'=用'java.text.MessageFormat.format()'替换'+'
Choose Color=选择颜色
Convert to Basic Latin=转换为基本的拉丁
Surround with try-with-resources block=环绕用try-with-resources
Create Field=创建字段
Field Already Exists=字段已经存在
Field of type:=字段的类型:
Choose Destination Package=选择目标文件包
Create directory=创建目录
Failed to Create Class=创建类失败
Assign Parameter to Field ''{0}''=分配参数字段"{0}"
Assign Parameter to Field=分配参数场
Create field for parameter ''{0}''=创建字段参数"{0}"
Create field for parameter=创建字段参数
Bind {0} parameters to fields={0}参数绑定到字段
Bind parameters to fields=绑定参数字段
Searching For Descendants=寻找的后代
There are no classes found where this method can be implemented=没有发现这类方法可以实现
No Classes Found=没有找到的类
Choose Implementing Class=选择实现类
Implement method=实现方法
Invert 'if' condition=转化如果条件
Extract if ({0})=提取if({0})
Extract If Condition=提取if条件
Underscores in numeric literals=凸显了在数字字面值
Remove underscores from literal=移除下划线文字
Insert underscores into literal=插入到文字的下划线
Replace ''{0}'' with ''{1}''=用"{1}"替换"{0}"
Replace cast with variable=用变量替换转换
Convert to ''new Color{0}''=转换为"新颜色{0}"
Convert Color representation=转换颜色表示
Create Test=创建测试
Testing &library:=测试库:
Language:=语言:
Choose Superclass=选择超类
Description copied from interface:=描述复制从接口:
Description copied from class:=描述复制从类:
Deprecated=过时的
Since:=自从:
Returns:=返回:
Throws:=抛出：
{0} in interface {1}={0}在界面{1}里面
{0} in class {1}={0}在类{1}里边
Specified by:=指定的:
Cannot fetch remote documentation: internal error=无法获取远程文件:{0}
Searching For Implementations=寻找实现
Implementations of {0}={0}的实现
No implementations found=没有实现发现
Tests for {0}=测试为{0}
Test Subjects for {0}=测试对象为{0}
No test subjects found=没有测试对象发现
Choose super property=选择超级属性
Choose super method=选择父类方法
Super methods of {0}={0}的超级方法
Choose super class or interface=选择父类或接口
View External Documentation=查看外部文档
No Documentation=没有文档
Fetching Documentation=读取文档
No documentation found=没有发现文档
<html>Candidates for new <b>{0}</b>() are:<br>{1}</html>=<html>新的候选 <b>{0}</b>() 是:<br>{1}</html>
<html>Candidates for method call <b>{0}</b> are:<br><br>{1}</html>=<html>候选方法调用 <b>{0}</b> 是:<br><br>{1}</html>
<html>No candidates found for method call <b>{0}</b>.</html>=<html>没有候选人发现方法调用<b>{0}</b>.</html>
Choose Declaration=选择声明
Space=空格
Custom=自定义
Edit Template Variables=编辑模板变量
Variables=变量
Expression=表达式
Default value=默认值
Abbreviation=缩写
By default expand with=默认展开与
Default ({0})=默认({0})
&Template text:=模板文本:
&Edit variables=编辑变量
E&xpand with=展开与
Shorten &FQ names=缩短浆名称(
Use static &import if possible=如果可能，使用静态导入(i)
Context=上下文
Smart type c&ompletion=智能类型完成(o)
Cannot Save=无法保存
Finish Template=完成模板
Insert Code Template=插入代码模板
Go to Next Code Template Tab=转到下一个代码模板选项卡
Go to Previous Code Template Tab=转到上一个代码模板选项卡
className()=类名()
enum(...)=枚举(...)
Surround with runtime cast=环绕用运行时转换
The I18nized Expression template is not a valid expression=I18nized表达式模板的不是一个有效的表达式
Error=错误
Tag pair=一对标签
Iterate elements of array=遍历数组元素
Iterate elements of java.util.Collection=遍历java.util.Collection元素
Iterate java.util.Enumeration=迭代java util枚举
Iterate java.util.Iterator=迭代java util迭代器
Iterate elements of java.util.List=遍历java.util.List元素
Iterate tokens from String=迭代标记从字符串
Iterate elements of java.util.Vector=遍历java.util.Vector元素
Iterate elements of array in reverse order=反序遍历数组元素
Iterate Iterable | Array in J2SDK 5.0 syntax=迭代数组在J2SDK Iterable | 5.0语法
Iterate over an Iterable or Array selection in J2SDK 5.0 syntax=遍历一个数组选择J2SDK Iterable或在5.0语法
Checks object type with instanceof and down-casts it=检查对象类型和运算符和下投下它
Fetches last element of an array=获取数组的最后一个元素
Sets lesser value to a variable=集较小值给一个变量
Sets greater value to a variable=设置变量更大的价值
main() method declaration=main() 方法声明
Stores elements of java.util.Collection into array=存储元素的java跑龙套.收集到数组
Performs lazy initialization=执行延迟初始化
Inserts ''if not null'' statement=插入''if not null''语句
Inserts ''if null'' statement=插入''if null''语句
Inserts singleton method getInstance=插入单例方法getInstance
Prints a string to System.err=打印一个字符串到System.err
Prints a string to System.out=打印一个字符串到System.out
Prints a formatted string to System.out=打印一个格式化字符串到System.out
Prints current class and method names to System.out=打印当前的类名和方法名到System.out
Prints method parameter names and values to System.out=打印方法参数的名称和值到System.out
Prints a value to System.out=打印一个值System.out
String=字符串
public static final=公共静态最终
public static final int=公共静态最终int
public static final String=公共静态最终字符串
Surround with ()=环绕用()
Surround with <tag></tag>=环绕用<标签></标签>
Surround with <tag></tag> in HTML/JSP=环绕用<标签></标签>在HTML/JSP
Surround with CDATA section=环绕用CDATA
Surround with Callable=环绕用Callable
Surround with ReadWriteLock.readLock=环绕用ReadWriteLock.readLock
Surround with ReadWriteLock.writeLock=环绕用ReadWriteLock.writeLock
Initialize variable ''{0}''=初始化变量 ''{0}''
Initialize variable=初始化变量
Annotate as @{0}=注释为 @{0}
Annotate {0} ''{1}'' as @{2}=注释{0} ''{1}'' 为 @{2}
Disable ''{0}''=禁用''{0}''
Enable ''{0}''=启用''{0}''
Ignore lines containing this comment (pattern in java.util.Pattern format):=忽略线路包含该评论(模式在java跑龙套.模式格式):
Non-Nls comment pattern=非nls评论模式
Ignore literals assigned to constants=忽略文字分配常数
Ignore contents of toString() method=忽略toString()方法的内容
Move initializer to constructor=移动到构造函数初始化器
Move initializer to setUp method=初始化设置移动方法
Cannot I18nize Selection=不能I18nize选择
Do you want to display coverage data for ''{0}''?=您要显示覆盖率数据"{0}"吗？
Code Coverage=代码覆盖率
Choose Package=选择包
No coverage=没有覆盖
Code coverage is supported for jre 5.0 or higher=代码覆盖率支持jre 5.0或更高
Coverage Suites=覆盖率套房
Do you want to remove ''{0}'' coverage data?=你要删除"{0}"覆盖率数据吗?
Remove Coverage Data=移除覆盖率数据
Coverage data outdated=覆盖率数据已过期
Coverage data not found=未找到覆盖率数据
Cannot resolve class ''{0}''=无法解析类''{0}''
Definition of {0}={0}的定义
Documentation for {0}=文档为{0}
Add EJB interceptor=添加EJB拦截器
Add interceptor for EJB class ''{0}''=添加拦截器对EJB类"{0}"
Add interceptor for business method ''{0}''=对业务方法添加拦截"{0}"
Interceptor Bindings=拦截器绑定
Edit Interceptor ''{0}'' bindings=编辑拦截"{0}"绑定
Powered by=启动by
''{0}'' plugin=''{0}''插件
Cannot resolve {0} ''{1}''=无法解析{0} { 1 }
Unknown enum value ''{0}''=未知的枚举值''{0}''
Can''t create properties file ''{0}'' because its name is associated with the {1}=不能创建属性文件"{0}",因为它的名字是相关的{1}
Error creating properties file=错误创建属性文件
Anonymous Class=匿名类
Exception=异常
JUnit Test=JUnit测试
Runnable Class=Runnable类
Abstract=抽象的
Final=最后的
Static=静态
Multiple implementations=多个实现
{0}class initializer={0}类初始化器
Set language level=设置语言级别
Set language level to {0}=设置语言级别为{0}
Remove annotation=移除注释
Choose annotation to delete=选择要删除的注释
Choose Classes to Highlight Overridden Methods from=从...选择高亮重写方法的类
No methods overriding {0, choice, 0#|1# '{1}'|2#these classes} are found=没有重写方法 {0, 选择, 0#|1# '{1}'|2#these classes} 被发现
No existing implementations found=没有找到现有的实现
Use existing implementation of ''{0}''=使用现有实现''{0}''
Choose implementation to copy=选择要复制的实现
Use Abstract Method Implementation=使用抽象方法实现
Please specify properties file path=请指定属性的文件路径
Choose Type=选择类型
Cast expression=强制转换表达式
Cast to ''{0}''=转换为''{0}''
Press {0} to search for matching files of any type=按{0}搜索匹配任何类型的文件
Property ''{0}'' expected {1} {1, choice, 1#parameter|2#parameters}, passed {2}=属性"{0}"预期的{1}{1,选择,1
Create File=创建文件
Create Directory {0}=创建目录{0}
Create File {0}=创建文件{0}
Rename class ''{0}'' to ''{1}''=将类''{0}''重命名为''{1}''
Rename ''{0}'' to ''{1}''=将''{0}''重命名为''{1}''
Choose Imported Classes to Highlight=选择导入高亮的类
Choose Imported Members to Highlight=选择导入高亮的成员
Couldn''t resolve URL <i>{0}</i> <p>Configuring paths to API docs in <a href="open://Project Settings">project settings</a> might help=无法解析 URL <i>{0}</i> <p>配置路径的API文档在 <a href="open://Project Settings">项目设置</a>中可能有帮助
&Yes=是
&No=否
Choose Date=选择日期
&Retry=重试
&Password:=密码:
Manual proxy configuration=使用代理
HTTP Proxy Settings=HTTP代理设置
Con&tinue=继续
Yes for &All=全是
N&o for All=全否
&Apply=应用
&Close=关闭
&Reset=重置
Preferences=首选项
Edit application settings=编辑应用程序设置
Edit application preferences=编辑应用程序首选项
Today=今天
Yesterday=昨天
{0,choice, 0#zero days|1#one day|2#{0,number} days}={0,number} 天
{0,choice, 0#zero minutes|1#one minute|2#{0,number} minutes}={0,number} 分钟
{0,choice, 0#zero hours|1#one hour|2#{0,number} hours}={0,number} 小时
{0,choice, 0#zero months|1#one month|2#{0,number} months}={0,number} 月
{0,choice, 0#zero weeks|1#one week|2#{0,number} weeks}={0,number} 个星期
{0,choice, 0#zero years|1#one year|2#{0,number} years}={0,number} 年
in {0,choice, 0#zero days|1#one day|2#{0,number} days}={0,number} 天内
in {0,choice, 0#zero minutes|1#one minute|2#{0,number} minutes}={0,number} 分钟内
in {0,choice, 0#zero hours|1#one hour|2#{0,number} hours}={0,number} 小时内
in {0,choice, 0#zero months|1#one month|2#{0,number} months}={0,number} 个月内
in {0,choice, 0#zero weeks|1#one week|2#{0,number} weeks}={0,number} 星期内
in {0,choice, 0#zero years|1#one year|2#{0,number} years}={0,number} 年内
The system cannot open the file=系统无法打开文件
Capturing Memory Snapshot=捕捉内存快照
Compressing Memory Snapshot=压缩内存快照
Captured snapshot ''{0}'' is placed in user home directory. <a href="{1}">Show in {2}</a>=捕获快照“{0}”是放置在用户的主目录。
Failed to capture snapshot: {0}=未能捕获快照:{0}
Once {0}=一次{0}
{0} with name ''{1}'' already exists={0}的名称 ''{1}'' 已存在
Ignore spaces=忽略空格
Clear passwords=清除密码
Has implementations=已经实现
Has subclasses=有子类
Syntax analysis=语法分析
Inspections=检查
Slow Inspections=慢速检查
Analysis completed=分析完成
Is implemented in <br>=已实现于<br>
Is overridden in <br>=已覆盖于<br>
Is implemented by<br>=已实现由<br>
Is subclassed by<br>=已被归为子类由<br>
Choose Super Method of {0}=选择超类的方法 {0}
<html><body>Choose Implementation of <b>{0}</b> ({1} methods found)</body></html>=<html><body>选择<b>{0}</b>的实施方法 ({1} 方法发现)</body></html>
<html><body>Choose Overriding Method of <b>{0}</b> ({1} methods found)</body></html>=<html><body>选择<b>{0}</b>的重写方法(已找到{1}个方法)</body></html>
Performing code analysis=执行代码分析
more=更多
less=更少
Component Tree=组件树
Move Component=移动组件
Insert Component=插入组件
Visual Edit Operation=可视化编辑操作
Set Property Value=设置属性值
Properties=属性
Show expert properties=显示专家属性
Show columns=显示列
Show documentation=显示文档
ITN returns wrong data=ITN返回错误的数据
HTTP Result code: {0}=HTTP返回代码: {0}
Continue=继续
&Send=发送
&Username:=用户名:
&Additional information (steps to reproduce, what were you doing when the exception occurred):=附加信息(当发生异常时,你的操作步骤是):
&Report to JetBrains=报告给JetBrains
JetBrains Account authentication failed. Do you want to try again?=JetBrains账户认证失败.你想再试一次吗?
Report posting failed: {0}. Do you want to try again?=报告发布失败:{0}.你想再试一次吗?
Error Report=错误报告
New build {0} is available=新构建{0}是可用的
{0}. Occurred {1,choice,1#once|2#{1} times} since the last clear=自从最后一次清除后.{0}发生次数:{1,choice,1#once|2#{1} times}
Submission failed=提交失败
[Duplicate]=[重复]
Submitted=已提交
Exception in <b>{0} core</b>=异常在核心 <b>{0}</b>
Exception in plugin <b>{0}</b>=异常在插件 <b>{0}</b>
Exception in <b>unknown plugin</b>=异常在 <b>未知插件</b>
IDE Fatal Errors=IDE致命错误
Popup this window immediately next time internal error occurs=下次发生内部错误时,立即弹出这个窗口
Submit=提交
No IDE fatal errors=没有IDE致命错误
Log File Entry=日志文件条目
Skip Content=跳过内容
&Alias:=别名:
errors=错误
warnings=警告
infos=信息
&Error message=错误消息(
<html><u>P</u>lease fill in any details that may be important: steps to reproduce, what were you doing when problem occurred, etc.:</html>=<html><u>P</u>填写任何细节,可能是重要的:当问题发生时,你在做什么等.</html>
Changes in plugin configuration will take effect after {0} restart={0}重启后,插件配置更改才生效
After disabling the plugin please restart {0} to apply changes in plugin configuration=禁用插件后,请重启{0}应用插件配置的更改
Disable Plugin=禁用插件
&Disable=禁用
Disable and &Restart=禁用并重启
&Clear=清除
Path=路径
Attachments=附件
File content=文件内容
Usage: {0} merge <left file> <right file> [<base file>] <output file>=使用 : {0} 合并 <left file> <right file> [<base file>] <output file>
Editor=编辑器
Clipboard vs Editor=剪贴板 vs 编辑器
Selection from Editor=从编辑器选择
Insert=插入
Files Are Identical=文件是相同的
Files Are Different=文件是不同的
Use external tool to compare files:=使用外部工具来比较文件:
Use external tool to compare folders:=使用外部工具来比较文件夹:
Use external merge tool:=使用外部合并工具:
Contents are identical=内容是相同的
No Differences=没有差异
Apply selected change side=应用选定的侧边变化
Resolve=解决
Save and &Finish=保存并完成
&Continue=继续
initMergeContent=初始化合并内容
Merge Color Options=合并颜色选项
Conflict=冲突
Add <{0}> element=添加 <{0}> 元素
Add "{0}" attribute=添加 "{0}" 属性
Add attribute/element=添加属性/元素
Remove <{0}> element=移除 <{0}> 元素
Remove "{0}" attribute=移除 "{0}" 属性
Create new element=创建新元素
''{0}'' is not a concrete class=''{0}'' 不是一个具体的类
Interface is not allowed=接口不允许
Enabled=启用
Anonymize &Types=匿名类型
Anonymize &Methods=匿名方法
Anonymize Local &Variables=匿名局部变量
Invalid=无效
{0} duplicates={0}重复
Opening project=打开项目
Eliminate duplicates=消除重复
Anonymize &Variables=匿名变量
Anonymize &Functions=匿名函数
Move caret=移动光标
Annotations=注释
Move Cursor=移动光标
Syntax=语法
&Duplicate Selection=重复选择
This document contains very long lines. Soft wraps were forcibly enabled to improve editor performance=这个文件包含很长的行。软包装强制启用，以提高编辑性能。
Hide notification=隐藏通知
Don't show again=不要再显示
Notification actions=通知操作
No module defined=没有定义模块
Project has no JDK=项目没有JDK
Run Configuration Error=运行配置错误
Pause Output=暂停输出
&Edit Configurations=编辑配置
Show list of Run Configurations running at the moment=显示正在运行的运行配置列表
Running List=运行列表
Nothing to show=没有显示
Click to navigate=点击导航
Choose HTML File=选择HTML文件
Configuration to run a JAR file using 'java -jar' command=配置使用 'java -jar' 命令运行一个JAR文件
JAR Application=JAR 应用程序
No runner selected=没有选择运行器
Configuration=配置
Remove Configuration=删除配置
No parameters=没有参数
Edit Defaults=编辑默认值
Sort Configurations=排序配置
Move into new folder=移动到新文件夹
Copy Content=复制内容
Run/Debug Configurations=运行/调试配置
Invalid Data=无效数据
Template Settings=模板设置
Process ''{0}'' Is Running=进程 ''{0}'' 正在运行
Terminate=终止
Module ''{0}'' does not exist in project ''{1}''=模块"{0}"不存在于项目"{1}"
Select working directory=选择工作目录
Cannot Browse Methods=无法浏览方法
Class {0} does not exist=类{0}不存在
Choose Test Class=选择测试类
Choose Test Method=选择测试方法
Output=输出
Statistics=统计
Tests were not started=测试没有开始
Instantiating tests=实例化测试
Next Failed Test=下一个失败的测试
Failed to start=启动失败
Tests Failed=测试失败
Sort By Duration=按时间排序
Hide Successful setUp/tearDown=隐藏成功安装/拆卸
All Tests Passed=所有测试通过
Program a&rguments:=程序参数:
Select Alternative JRE=选择替代JRE
Kill process=杀死进程
Run Error=运行错误
R&un=运行
Remote debug configuration=远程调试配置
Remote=远程
Applet Class=Applet类
Applet Parameters=Applet参数
Applet &class:=Applet类:
''{0}'' is not a valid JRE home=''{0}'' 不是一个有效的 JRE home
Alternative JRE path needs to point to a JRE, not to a complete JDK installation=选择 JRE 路径需要指向一个 JRE, 不是一个完整的JDK的安装
Choose Main Class=选择主类
Choose Applet Class=选择Applet类
Across modu&le dependencies=跨模块依赖项
In s&ingle module=在单一模块
In &whole project=在整个项目
Test:=测试:
Test Class=测试类
All Tests in Package=所有的测试在包
All in &Package=所有在包
No JDK specified for module ''{0}''=没有JDK指定模块"{0}"
Module not specified=模块未指定
Module ''{0}'' doesn''t exist in project=模块"{0}"不存在于项目
No main class specified=未指定主类
Save Configuration=保存配置
Press the=按
<html><a href=\"add{1}\"><img src=\"{0}\" border=\"0\"></a></html>=<html><a href="add{1}"><img src="{0}" border="0"></a></html>
button to create a new {0} based on default settings=按钮来创建一个新的{0}基于默认设置
Comparison Failure=比较失败
Time elapsed=耗时
Results=结果
Listen=监听
Shared memory=共享内存
Shared memory address:=共享内存地址:
&Command line arguments for running remote JVM=命令行参数运行远程JVM
Record code &coverage information=记录代码覆盖率信息
configuration=配置
Logs=日志
Unknown task=未知的任务
Environment Variables=环境变量
System Environment=系统环境
&Environment variables=环境变量
Choose Custom Template=选择自定义模板
Choose Output Folder=选择输出文件夹
Activate tool window=激活工具窗口
Completed=完成的
Not run=无法运行
Assertion failed=失败的
Group=组
Average usage frequency=平均使用频率
{0,choice, 0#Never|1#Once|2#Twice|3#{0,number} times}={0，选择，0＃从未|1＃当|2＃两次|3＃{0，}号}次
Second basic completion=第二个基本完成
Variable name completion=变量名完成
Postfix completion=后缀完成
Quick Definition lookup=快速查找定义
Browse external documentation=浏览外部文档
Comment/Uncomment current line=注释/取消注释当前行
Introduce Variable refactoring=引入变量重构
Copy Class refactoring=复制类重构
Horizontal Scrolling=水平滚动
Code Editing=代码编辑
Code Assistants=代码助手
Ant support features=Ant支持功能
Tools support=工具支持
Diff Tools=比较工具
Go to inspection=去检查
Directory Diff=目录比较
Text files=文本文件
Register New File Type Association=注册新文件类型关联
File Types=文件类型
Edit File Type=编辑文件类型
Add Wildcard=添加通配符
Edit Wildcard=编辑通配符
File types=文件类型
Stop background search=停止后台搜索
&Implementing classes=实现类
&Implementing methods=实现方法
Search Accessors=搜索访问器
Information=信息
{0} of {1} in {2}=在{2}里{1}的{0}
{0} of {1}={1}的{0}
{0} ''{1}'' in {2}={0} ''{1}''在{2}
or=或
Derived Classes=派生类
Derived Interfaces=派生接口
Implementing Classes=实现类
Implementing Methods=实现方法
Replace Text=替换文本
Find Text=查找文本
Find &All=查找所有
File name filter=文件名称筛选器
\u0020({0})= ({0})
Regular expression matches empty string=正则表达式匹配空字符串
&Case sensitive=区分大小写
&Preserve case=保留大小写
Comm&ents only=仅注释
Re&gular expression=正则表达式
Direction=方向
F&orward=向前
&Backward=向后
W&hole project=整个项目
All &projects=所有项目
&Module:=模块:
Pro&ject=项目
Direct&ory:=目录:
{0,choice,0#No|1#{0}} {0,choice,0#occurrences|1#occurrence|2#occurrences} found so far=目前发现: {0,choice,0#No|1#{0}} {0,choice,0#occurrences|1#occurrence|2#occurrences}
Occurrences in files of total size {0} found. {1} may become unresponsive or even fail with OutOfMemoryError if you continue. Continue?=发现使用在文件的总大小为{0}。如果你继续, {1}可能会变得反应迟钝,甚至无法跳出内存错误.要继续吗?
Search completed=搜索完成
with mask ''{0}''={0}文件使用掩码{1}
Replace Error=替换错误
All Project Classes=所有项目类
Occurrences found in read-only files=在只读文件中找到匹配项
Replace All=全部替换
occurrence=发生
Result options=结果选项
Print Options=打印选项
Text=文本
Browser Error=浏览器错误
Select \"profiles.ini\" File=选择 "profiles.ini" 文件
&OK=确定
System Error=系统错误
Confirm application exit=确认应用程序退出
Search in the background=在后台搜索
Clear List=清除列表
Keystroke: "{0}"=按键: "{0}"
Enter New Name=输入新名称
Rename Macro=重命名宏
Delete Bookmark=删除书签
Commander=命令
Information:=信息:
Error:=错误:
Warning:=警告:
Hide warnings=隐藏警告
Abbreviate Qualified Package Names=合格的包名称缩写
Show Members=显示成员
From File Template=从文件模板
Edit File Templates=编辑文件模板
Please enter a file name=请输入文件名
File and Code Templates=文件和代码模板
File templates=文件模板
Files=文件
Please specify template name=请指定模板名称
Cannot Save Current Template=无法保存当前模板
Create Template=创建模板
Copy Template=复制模板
[Invalid]=[无效]
UNKNOWN=未知
Line comment:=行注释:
Block comment start:=块注释开始:
Block comment end:=块注释结束:
Keywords=关键字
Description:=描述:
Syntax Highlighting=语法高亮
Edit Keyword=编辑关键字
Keyword:=关键字:
Keyword cannot be empty=关键字不能为空
Packages=包
 Navigation Bar= 导航栏
Open Project=打开项目
Cannot Load Project=无法加载项目
Project file is corrupted=项目文件已损坏
Convert Project=转换项目
Your license has expired=您的许可证已过期
1 day=1 天
Unable to Save Data=无法保存数据
More info=更多信息
Discover=发现
User name:=用户名:
Copy Path=复制路径
Create @interface=创建 @interface
New Directory=新建目录
New Package=新建包
Package=包
Directory=目录
Create package=创建包
Cannot Create Enum=无法创建枚举
Create enum=创建枚举
Create file=创建文件
Create New Interface=创建新接口
New Interface=新建接口
Cannot Create Interface=无法创建接口
Create interface=创建接口
Export Complete=导出完成
Go to Line=转到行
Restart Needed=需要重新启动
File Not Found=文件未找到
Select Components to Import=选择要导入的组件
Cannot Open File=无法打开文件
All file types=所有文件类型
Find Next=查找下一个
Find Previous=查找上一个
Synchronize ''{0}''=同步 ''{0}''
Project's classpath=项目的类路径
File directory=文件目录
File extension=文件扩展名
File package=文件包
File path=文件路径
File encoding=文件编码
Line number=行号
Output path=输出路径
Enter parameters:=输入参数:
Input=输入
Project's sourcepath=项目的源路径
Plugin Error=插件错误
Date=日期
Downloads=下载
unknown=未知
Update Plugin=更新插件
Plugin download failed=插件下载失败
Uninstall=卸载
Installed=已安装
Downloading plugin ''{0}''=下载插件 ''{0}''
Unable to create temp directory ''{0}''=无法创建临时目录 ''{0}''
E-mail:=电子邮件:
Plugin home page=插件主页
module ''{0}''=模块 ''{0}''
modules=模块
Module Group=模块组
Show Libraries Contents=显示库内容
Show/Hide Excluded Files=显示/隐藏排除的文件
Show Structure=显示结构
Show structure view=显示结构视图
Views=视图
Rename Module=重命名模块
Rename Library=重命名库
Show Fields=显示字段
Show Inherited=显示继承
Show Properties=显示属性
Group By Modules=按模块分组
Group By Packages=按包分组
Current File=当前文件
Pattern=模式
Case Sensitive=区分大小写
Pattern:=模式:
Icon:=图标:
Icon=图标
Edit Pattern=编辑模式
Window Options=窗口选项
Widescreen tool window layout=宽屏工具窗口布局
Navigate to preview=导航到预览
Ratio:=比例:
Font:=字体:
Theme:=主题:
Browse Icon=浏览图标
Choose Action Icon=选择操作图标
Menus and Toolbars=菜单和工具栏
Enter class name:=输入类名:
Enter file name:=输入文件名:
Enter symbol name:=输入符号名称:
Directory Does Not Exist=目录不存在
Select Module Content Root=选择模块内容根
Change Directory=更改目录
Module Already Exists=模块已经存在
Select Module File Location=选择模块文件位置
Convert Module=转换模块
Module type:=模块类型:
Question=问题
Continue Searching=继续搜索
Stop Searching=停止搜索
Mark=标记
Configure=配置
Open Files=打开文件
Overwrite=覆盖
Append=追加
Export Preview=导出预览
Save=保存
Show Classes=显示类
Search by Name=按名称搜索
Choose Destination Directory=选择目标目录
<Do not unscramble>=<不整理>
<Stacktrace>=<堆栈跟踪>
<Threads>=<线程>
<Deadlock>=<死锁>
Connection Error=连接错误
Platform and Plugin Updates=平台和插件更新
Updates=更新
Use secure connection=使用安全连接
No plugin repositories configured=没有配置插件库
Go to next method=转到下一个方法
Go to previous method=转到上一个方法
Go to next type=转到下一个类型
Go to previous type=转到上一个类型
Go to next call=转到下一个调用
Go to previous call=转到上一个调用
Tests=测试
Project View=项目视图
Value must not be empty=值不能为空
Value must be identifier=值必须是标识符
Problems=问题
Shared=共享
Version=版本
Detach Library=分离库
Unable to create file ''{0}''=无法创建文件 ''{0}''
Downloaded files will be copied to selected directory=下载的文件将被复制到选定的目录
Select Library Type=选择库类型
Show path=显示路径
Hide path=隐藏路径
Show/Hide path text field=显示/隐藏路径文本字段
No suggestions=没有建议
Open Existing Project=打开现有项目
Code Folding Settings=代码折叠设置
project=项目
Unable to open project from ''{0}''=无法从 ''{0}'' 打开项目
Icon size is invalid=图标大小无效
Run canceled by user=运行被用户取消
Quick lists=快速列表
List=列表
Location=位置
Select Library Files or Directories=选择库文件或目录
Library=库
Editor:=编辑器:
Empty project=空项目
Project name can't be empty=项目名称不能为空
Files matching pattern=文件匹配模式
Classes matching pattern=类匹配模式
Change color=改变颜色
Using REST API=使用 REST API
Inspection=检查
Inspection profile=检查配置文件
Inspection disabled=检查禁用
Inspection ''{0}'' is disabled: ID ''{1}'' not matches ''{2}'' pattern=检查"{0}"是禁用:ID"{1}"不匹配"{2}"模式
Inspection ''{0}'' is disabled: {1}=检查"{0}"是禁用:{1}
Problem synopsis=问题摘要
description=描述
problemclass=问题类
Declaration can have final modifier=声明可以有final修饰符
package=包
class=类
constructor=构造函数
method=方法
file=文件
interface=接口
Report classes=报告类
Report methods=报告方法
Report fields=报告字段
Annotate method as ''@{0}''=注释方法为"@{0}"
Contract issues=合同的问题
Simplify Boolean Expression=简化逻辑表达式
Simplify to normal assignment=简化正常作业
Configure annotations=配置注释
Configure Assert/Check Methods=配置维护/检查方法
Assert/Check Method Configuration=维护/检查方法配置
Overlapping Check=重叠检查
Configuration conflicts with=配置冲突
Add IsNull Check Method=添加IsNull检查方法
Add IsNotNull Check Method=添加IsNotNull检查方法
Add Assert IsNull Method=添加断言 IsNull 方法
Add Assert True Method=添加断言 True 方法
Assert IsNull Methods=断言IsNull方法
Assert IsNotNull Methods=断言IsNotNull方法
IsNull Check Methods=IsNull检查方法
IsNotNull Check Methods=IsNotNull检查方法
Switch label<code>#ref</code> #loc is unreachable=Switch标签<code>#ref</code> #loc无法访问
Condition <code>#ref</code> #loc at the left side of assignment expression is always <code>{0}</code>. Can be simplified=条件 <code>#ref</code> #loc 在赋值表达式的左侧是永远 <code>{0}</code>. 可以简化
Passing <code>null</code> argument to parameter annotated as @NotNull=通过 <code>null</code> 参数注释为 @NotNull
<code>null</code> is assigned to a variable that is annotated with @NotNull=<code>null</code> 被分配到一个是注释变量 @NotNull
<code>null</code> is returned by the method which is not declared as @{0}=<code>null</code> 通过该方法返回不能声明为 @Nullable
Expression <code>#ref</code> might evaluate to null but is returned by the method which is not declared as @{0}=表达式 <code>#ref</code> 可以计算为null，但返回未声明方法为 @{0}
Unboxing of <code>#ref</code> #loc may produce <code>java.lang.NullPointerException</code>=拆箱的 <code>#ref</code> #loc 可能会产生 <code>java.lang.NullPointerException</code>
Use of <code>#ref</code> #loc would need unboxing which may produce <code>java.lang.NullPointerException</code>=使用 <code>#ref</code> #loc 需要拆箱它可以产生 <code>java.lang.NullPointerException</code>
Method <code>#ref</code> is too complex to analyze by data flow algorithm=方法<code>#ref</code>太复杂，无法被数据流算法分析
Empty method=空方法
Method only calls its super=方法只调用它的超级
Empty method overrides empty method=空方法重写空方法
The method is empty=该方法为空
The method and all its derivables are empty=该方法和所有它的derivables是空的
All implementations of this method are empty=此方法的所有实现都为空
Redundant type cast=多余的类型转换
Casting {0} to {1} is redundant=铸造{0},{1}是冗余的
Redundant throws clause=冗余throws子句
Remove unnecessary throws declarations=删除不必要的抛出声明
The declared exception {0} is never thrown in method implementations=声明的异常{0}在方法中从未抛出
The declared exception {0} is never thrown in this method, nor in its derivables=声明的异常{0}是从不扔在这个方法中,还是在其derivables
The declared exception {0} is never thrown=声明的异常{0}从未抛出
equals() and hashCode() not paired=equals()和hashCode()没有配对
Class has {0} defined but does not define {1}=类有{0}定义但没有定义{1}
Generate 'equals()'=生成 'equals()'
Generate 'hashCode()'=生成 'hashCode()'
Usage of API documented as @since {0}+=使用API文档作为 @since {0}
Usage of generified after 1.6 API which would cause compilation problems with JDK {0}=泛型的使用后,会造成1.6 API编译问题与JDK{0}
Default {0, choice, 0#|1#method is|2# methods are} not overridden. It would cause compilation problems with JDK {1}=默认 {0, choice, 0#|1#method is|2# methods are} 不重写。它会导致JDK编译问题 {1}
Default method ''{0}'' is not overridden. It would cause compilation problems with JDK {1}=默认的方法 ''{0}'' 不重写。它会导致JDK编译问题 {1}
Local variable or parameter can be final=局部变量或参数可以最终
Report local variables=报告局部变量
Report method parameters=报告方法参数
Report catch parameters=报告抓参数
Report foreach parameters=报告foreach参数
Parameter <code>#ref</code> can have <code>final</code> modifier=参数<code>#ref</code>可以有<code>最终</code>修饰符
Variable <code>#ref</code> can have <code>final</code> modifier=变量<code>#ref</code>可以有<code>final</code>修饰符
@NotNull/@Nullable problems=@NotNull / @Nullable 问题
Cannot annotate with both @{0} and @{1}=不能同时与 @Nullable 和 @NotNull 注释
Method annotated with @{0} must not override @{1} method=@Nullable 注解的方法不能重写为 @NotNull 方法
Not annotated method overrides method annotated with @{0}=未注解的方法重写为 @NotNull 注解的方法
Constructor parameter for @{0} field might be annotated @{0} itself=构造函数参数 @{0} 的领域可能会注释 @{0} 本身
Parameter annotated @{0} must not override @{1} parameter=注解为 @NonNull 的参数不能重写 @Nullable 参数
Parameter annotated @{0} should not override non-annotated parameter=参数标注 @{0} 不应该覆盖非注释参数
Not annotated parameter overrides @{0} parameter=未注解的参数重写为 @NotNull 参数
Primitive type members cannot be annotated=原始类型成员不能为空/ NotNull注释
Test-only class or method call in production code=测试只有在生产代码的方法调用
Test-only method is called in production code=测试只有在生产代码中调用方法
Test-only class is referenced in production code=测试类是在生产代码引用
Declaration access can be weaker=声明访问可能较弱
<html>Suggest private for inner class members when referenced from outer class only</html>=<html>建议为私有内部类的成员是，只有引用外部类</html>
Can be {0}=可以{0}
Accept suggested access level=接受建议的访问级别
Field can be local=可以为本地字段
Field can be converted to a local variable=字段可以被转换为一个局部变量
Parameter can be local=参数可以是局部的
Parameter can be converted to a local variable=参数可以被转化为一个局部变量
Convert to local=转换为当地
Return value of the method is never used=方法的返回值是从未使用过
Make method 'void'=使方法无效
Method returns the same value=方法返回相同的值
Method always returns {0}=方法总是返回{0}
Method and all its derivables always return {0}=方法和它的所有变量总是返回{0}
All implementations of this method always return {0}=此方法的所有实现始终都返回{0}
Dependency rule ''{0}.'' is violated=依赖规则"{0}."是违反
Actual method parameter is the same constant=实际的方法的参数是相同的
Actual value of parameter ''{0}'' is always ''{1}''=实际的参数值 ''{0}'' 永远是 ''{1}''
Unused assignment=未使用的赋值
Report ++i when may be replaced with (i + 1)=报告我当可以换成(我1)
Report i++ when changed value is not used afterwards=报告我当改变值是不习惯后来
Report redundant initializers=报告冗余的初始化
Remove redundant initializer=移除冗余的初始化器
Remove redundant assignment=删除冗余分配
Variable {0} initializer {1} is redundant=变量初始化{0}{1}是冗余的
The value {0} assigned to {1} is never used={0}的值分配给{1}是从未使用过
The value changed at {0} is never used=值改变在{0}是从未使用过
Parameter <code>#ref</code> is not used in any implementation=参数<代码>
Parameter <code>#ref</code> is not used  in either this method or any of its derived methods=参数<代码>
Unused method parameters=未使用的方法参数
Redundant type arguments=冗余类型参数
Remove explicit type arguments=移除显式的类型参数
Explicit type arguments can be inferred=显式的类型参数可以推断
Redundant array creation=创建冗余阵列
Remove explicit array creation=移除数组创建显式
Redundant array creation for calling varargs method=创建冗余阵列叫可变参数的方法
Suspicious collections method calls=可疑集合方法调用
''{0}'' may not contain objects of type ''{1}''="{0}"可能不包含对象类型"{1}"
Suspicious call to ''{0}''=可疑的叫"{0}"
implicit constructor of {0}=隐式的构造函数{0}
noname=无名
anonymous=匿名
Code Inspection results=代码检查结果
Generating HTML:{0}=生成HTML:{0}
Inspection Results Export=检验结果出口
Export To=导出到
Accept Resolution=接受决议
Inner class=内部类
Period in the documentation is missing. The period is used by the Javadoc tool to generate the comment for the overview page=期在文档缺失.使用期间由工具生成的Javadoc注释的概述页面
Required tag {0} is missing=需要标记{0}是缺失的
Cannot resolve symbol {0}=无法解析符号{0}
Name expected=名字预期
Tag ''{0}'' is not allowed here=这里不允许标签''{0}''
Description is missing in {0} tag for parameter {1}=参数{1}的描述丢失{0}标记
{0} tag description is missing={0}标签描述已丢失
Duplicate @param tag for parameter ''{0}''=重复 @param 标记参数"{0}"
Duplicate @throws or @exception tag for exception ''{0}''=重复 @throws 或 @exception 标记为异常"{0}"
Duplicate @{0} tag=重复的 @{0} 标记
Add missing Javadoc tag=添加缺少的 Javadoc 标签
abstract=抽象的
implicit constructor of=隐式的构造函数
Problem resolution=解决问题
Surround with ''if ({0} != null)''=环绕用"if({0}!= null)"
Configure dependency rules=配置依赖规则
Additional Javadoc Tags:=额外的Javadoc标签：
Edit Additional Javadoc Tags=编辑附加的JavaDoc标签
invalidated item=失效项目
at line=行
Extends/implements=继承/实现
Extended/implemented by=继承/实现
Extended by=延长
Overrides library methods=重写库方法
Overrides/implements=重写/实现
Derived methods=派生方法
The following uses this type=以下使用这种类型
Used from=使用从
Uses the following=使用以下
Suppress=抑制
Call chain=调用链
Processing project usages in=处理项目用法在
Processing external usages of=处理外部使用
Analyzing code in=分析代码
Analyzing code=分析代码
Group by Severity=按严重程度分组
Group Inspections By Severity=集团检查根据严重程度
The JDK is not configured properly for this project. Inspection cannot proceed=JDK配置不正确为这个项目.不能进行检查
Inspecting Code=检查代码
Code Inspection=代码检查
problems=问题
Error reading inspection profile {0, choice, 0#from {1}|1#}=错误阅读检验剖面{0,选择,0
Create new profile=创建新的配置文件
Inspection profile with name ''{0}'' already exists=检查配置文件与名称"{0}"已经存在
(available for editor highlighting)=(编辑高亮显示)
(available for Analyze|Inspect Code)=(用于分析|检查代码)
Choose Error Level=选择错误级别
Starting up {0}=启动{0}
Project has an older format and will be converted=项目有一个年长的格式和将被转换
Project was succesfully converted. Old project files were saved to {0}=项目成功转换.老项目文件被保存到{0}
Cannot convert the project. The following files are read only: {0}=不能转换项目.以下文件是只读:{0}
Use equals()=使用equals()
Suspicious comparison #ref #loc=可疑的比较#ref #loc
Unused declaration=未使用的声明
Classes with usages in non-Java files=非 Java 文件中使用的类
unused declaration=未使用的声明
// --Commented out by Inspection=// --注释掉检查
// --Commented out by Inspection ({0}):=// --注释掉检查 ({0}):
Comment out=注释掉
Add as Entry Point=添加作为入口点
Remove from Entry Points=移除从入口点
Entry Points=入口点
No instantiations found=没有实例化发现
Instantiated from=实例化
Field is never assigned=字段从未分配。
Field has no usages=现场没有使用
Field is assigned but never accessed=字段被指定,但无法访问
Field has one usage but it is not reachable from entry points=场有一个用法,但它是不可到达的从入口点
Field has {0, choice, 1#1 usage|2#{0,number} usages} but they are not reachable from entry points=场有{0,选择,1
Reachable. {0, choice, 1#1 usage|2#{0, number} usages} found in the project code=可及.{0,选择,1
Not Reachable. {0, choice, 1#1 usage|2#{0, number} usages} found in the project code=不可到达的.{0,选择,1
Has no reachable implementation instantiations. {0, choice, 1#1 instantiation|2#{0, number} instantiations} found in the project code=没有可实现实例化.{0,选择,1
Anonymous class context is not reachable. Class is not instantiated. {0, choice, 1#1 instantiation|2#{0, number} instantiations} found in the project code=匿名类上下文是不可到达的.类是不实例化.{0,选择,1
Has reachable instantiations. {0, choice, 1#1 instantiation|2#{0, number} instantiations} found in the project code=可实例化了.{0,选择,1
Has reachable implementation instantiations. {0, choice, 1#1 instantiation|2#{0, number} instantiations} found in the project code=有可实现的实例化.{0,选择,1
Instantiated {0, choice, 1#1 instantiation|2#{0, number} instantiations} found in the project code=实例化{0,选择,1
Anonymous class declaration context is not reachable from entry points. Class is never instantiated=匿名类声明上下文从入口点是不可到达的.类是从来没有实例化
No class references has been found. Class static initializer is not reachable=没有类引用已经被发现.类的静态初始化器是不可到达的
Class has one instantiation but it is not reachable from entry points=类有一个实例化但它无法访问从入口点
Class is not instantiated=类是不实例化
<ul><li>Abstract method is not implemented OR</li><li>Implementation class is never instantiated OR</li><li>An instantiation is not reachable from entry points.</li></ul>=<ul><li>抽象方法没有实现，或</li><li>实现类没有实例化，或</li><li>一个实例是不是从入口点到达。</li></ul>
<ul><li>Method owner class is never instantiated OR</li><li>An instantiation is not reachable from entry points.</li></ul>=<ul><li>方法所有者类没有实例化，或</li><li>一个实例是不是从入口点到达。</li></ul>
Method has usage(s) but they all belong to calls chain that has no members reachable from entry points=方法使用(s),但他们都属于递归调用链,没有成员可从入口点
Method is not reachable from entry points=方法从入口点是不可到达的
Neither the class nor {0, choice, 1#its implementation|2#{0,number} its implementations} are ever instantiated=无论是类或 {0, choice, 1#its implementation|2#{0,number} its implementations} 被实例化。
Class has {0, choice, 1#instantiation|2#{0,number} instantiations} but they are not reachable from entry points=类有 {0, choice, 1#instantiation|2#{0,number} instantiations} 但他们是不可达的切入点。
Method is never used as a member of this {0}, but only as a member of the implementation class(es). The project will stay compilable if the method is removed from the {0}=方法是从未使用过的一员这{0},但只是作为一个成员的实现类(es).该项目将保持compilable如果方法是删除从{0}
Method overrides a library method but<ul><li>its {0} is never instantiated OR</li><li>its {0} instantiation is not reachable from entry points.</li></ul>=方法覆盖一个库方法但<ul><li>其{0}是从来没有实例化或</li><li>其{0}实例从入口点是不可到达的..</li></ul>
{0} is not implemented={0}是没有实现
{0} has an implementation but <ul><li>it is never instantiated OR</li><li>no instantiations are reachable from entry points.</li></ul>={0} 有一个实现但 <ul><li>这是从来没有实例化或</li><li>没有实例化从入口点是可及的.</li></ul>
Constructor has usage(s) but they all belong to calls chain that has no members reachable from entry points=构造函数有用法(s),但他们都属于递归调用链,没有成员可从入口点
Constructor has one usage but it is not reachable from entry points=构造函数有一个用法,但它是不可到达的从入口点
Constructor has {0, choice, 1#usage|2#{0,number} usages} but they are not reachable from entry points=构造函数有 {0, choice, 1#使用|2#{0,number} 使用} 但他们是不可达的切入点。
Method has one usage but it is not reachable from entry points=方法有一个使用但它无法访问从入口点
Method has {0, choice, 1#usage|2#{0,number} usages} but they are not reachable from entry points=方法有 {0, choice, 1#使用|2#{0,number} 使用} 但他们是不可达的切入点。
Additional entry points annotations=额外的入口点注释
Duplicate String Literal=复制字符串文字
&Min string length:=最小字符串长度：
(in this file)=(在此文件中)
... ({0} more)=... ({0}更多)
<html><body>Duplicate string literal found in<br>{0}</body></html>=<html><body>重复的字符串在<br>{0}</body></html>
Javac quirks=Javac怪癖
Trailing comma in annotation array initializer may cause compilation error in some Javac versions (e.g. JDK 5 and JDK 6)=在注释数组初始值设定项拖曳逗号可能导致编译错误在某些Javac版本(例如.JDK 5和JDK 6)
Generics in qualifier reference may cause compilation error in some Javac versions (e.g. JDK 5 and JDK 6)=仿制药在预选赛参考可能导致编译错误在某些Javac版本(例如.JDK 5和JDK 6)
Remove generic parameter=移除泛型参数
Hide Global Inspections=隐藏全局检查
Hide Global Inspections Settings=隐藏全局检查设置
Unused import statement=未使用的导入语句
Unused symbol=未使用的符号
Redundant throws declaration=冗余抛出声明
Access static member via instance reference=访问静态成员通过实例参考
Wrong package statement=错误的包语句
Illegal package dependencies=非法的包依赖关系
Unchecked warning=未经检查的警告
Suppress all inspections for class=抑制所有上课检查
Suppress inspection=抑制检查
Suppress for statement=抑制for语句
Suppress for class=抑制上课
Suppress for field=抑制实地
Suppress for method=抑制方法
Inspection ''{0}'' options=检查"{0}"选项
Edit dependency rules=编辑依赖关系规则
Error analysis is in progress=错误分析是在进步
No errors found in this file=在这个文件中没有发现的错误
Edit options of reporter inspection=编辑选项的记者检验
Edit inspection profile setting=编辑检查配置文件设置
Abstraction issues=抽象问题
Assignment issues=赋值问题
Probable bugs=可能的错误
Bitwise operation issues=按位运算的问题
Class structure=类结构
Class metrics=类指标
Compiler issues=编译器问题
Potentially confusing code constructs=可能引起混淆的代码结构
Encapsulation issues=封装问题
Error handling=错误处理
Finalization issues=终结问题
Initialization issues=初始化问题
Internationalization issues=国际化问题
JUnit issues=JUnit问题
Logging issues=测井问题
Code maturity issues=代码成熟度问题
Method metrics=方法度量
Naming conventions=命名约定
Performance issues=性能问题
Memory issues=内存问题
Java language level issues=Java语言级问题
Portability issues=可移植性问题
Security issues=安全问题
Serialization issues=序列化问题
Code style issues=代码风格问题
Threading issues=线程问题
Verbose or redundant code constructs=冗余的代码结构
Visibility issues=可见性问题
Cloning issues=克隆问题
Resource management issues=资源管理问题
J2ME issues=J2ME问题
Control flow issues=控制流问题
Numeric issues=数值问题
Java language level migration aids=Java语言级迁移帮助
JavaBeans issues=JavaBeans问题
Inheritance issues=继承问题
Data flow issues=数据流问题
Declaration redundancy=声明冗余
Javadoc issues=Javadoc 问题
Concurrency annotation issues=并发注释问题
Java EE issues=Java EE 问题
Properties Files=属性文件
Duplicate Property=复制属性
Processing duplicate property key: {0}=处理重复的属性键:{0}
Processing duplicate property key:{0}=处理重复的属性键:{0}
Processing duplicate property value: {0}=处理重复的属性值:{0}
&Duplicate keys with different values=重复的键值不同
Duplicate &values=重复的值
Duplicate &keys=重复键
&Module Scope=模块范围
&Project Scope=项目范围
Incorrect annotation syntax: {0}=不正确的注释语法: {0}
Report Default file header=报告默认文件头
Report default created/overridden/implemented method body=报告默认创建/覆盖/实现方法主体
Report default catch section=报告默认抓住部分
Default File template=默认文件模板
Default File Template Usage=默认文件模板的使用
Edit template=编辑模板
Replace with actual file template=替换为实际文件模板
Errors=错误
inspection profile=检查配置文件
Boolean method is always inverted=布尔方法总是倒
Boolean method <code>#ref</code> is always inverted=布尔方法 <code>#ref</code> 总是反向的
Results By Editor Settings=结果通过编辑器设置
Unnecessary module dependency=不必要的模块依赖
Module ''{0}'' sources do not depend on module ''{1}'' sources=模块"{0}"来源不依赖模块"{1}"的来源,模块之间的依赖可能会被删除
Module ''{0}'' does not depend on ''{1}''. Though ''{0}'' depends on ''{2}'' through exported dependencies of ''{1}''=模块“{0}”不依赖于“{1}”。尽管“{0}”取决于“{2}”通过“{1}”的出口依赖
Module ''{0}'' does not depend on ''{1}''. Though ''{2}'' depend on ''{1}'' through this exported dependency=模块“{0}”不依赖于“{1}”。尽管“{2}”取决于“{1}”通过这个出口的依赖
Run with &editor settings=运行与编辑设置
New Profile Name=新的配置文件名称
Default Project Profile=默认项目概要
Project Inspection Profile Assignments=项目检查配置文件作业
<html>There are a few scopes configured for the project. Do you want to edit profile assignments on them?</html>=<html>存在配置的项目数范围。你想对他们编辑配置文件分配？</html>
Unable to switch profile=无法切换配置文件
Unhandled Exception in JSP=未处理的例外在JSP
This project contains no modules. Inspection cannot proceed=这个项目不包含模块.不能进行检查
Redundant suppression=冗余抑制
Run with &chosen profile=选择运行配置文件
Packaging issues=打包问题
Dependency issues=依赖性问题
Modularization issues=模块化问题
Severities Editor=清规戒律编辑
New Highlight Severity=新的严重高亮
Suspicious variable/parameter name combination=可疑的变量/参数名称组合
Groups of names=组名称
Enter a comma-separated list of names:=输入一个逗号分隔的列表的名称：
Add Group of Names=添加组名字
Edit Group of Names=编辑群名称
Add Annotation Class=添加注解类
Annotation Class=注解类
Remove Annotation Class=移除注解类
Additional Dependency Injection Annotations=附加依赖项注入注释
Additional Special Annotations=额外的特别注释
Filter resolved items=滤波器解决项目
Show diff=显示差异
Duplicate throws=重复投
There is a more general exception, ''{0}'', in the throws list already=有一个更一般的异常,"{0}",已在转换列表
Ignore exceptions subclassing others=忽略例外子类化别人
Show diff only=只显示差异
Do you want to save selected IDE profile as project profile?=你想保存选定的IDE配置文件作为项目配置文件?
Unable to set up IDE profile for scope=无法设置IDE剖面为范围
Project Profiles Settings=项目配置文件设置
Project Profiles=项目配置文件
Inspection profile: {0} {1, choice, 0#(inactive)|1#}=项目配置文件: {0} {1, choice, 0#(inactive)|1#}
IDE Profiles=IDE配置文件
IDE Profiles Settings=IDE配置文件设置
< Use IDE Profile >=< 使用IDE配置文件 >
Errors: ''{0}'' inspection profile=错误:"{0}"检查配置文件
Rename inspection profile=重命名检查配置文件
Default IDE profile:=默认的IDE配置文件:
Set as project default=设置为项目默认
Set as IDE default=设置为IDE默认
Overridden Method Warning=重写的方法警告
implements=实现
overrides=重写
{0} not found={0}未找到
Please, specify sdk ''{0}'' for module ''{1}''=请指定sdk"{0}"模块"{1}"
Inconsistent Resource Bundle=不一致的资源包
Inconsistent property ''{0}''. Must be defined in the parent file ''{1}''=不一致的财产"{0}".必须定义在父文件"{1}"
Untranslated property ''{0}''. Should be overridden in the ''{1}''=未翻译属性"{0}".应该被覆盖在"{1}"
Report &missing translations=报告失踪的翻译
Report &inconsistent properties=报告不一致的属性
Report properties &overridden with the same value=报表属性覆盖与相同的值
Report properties with inconsistent &placeholders=报表属性不一致的占位符
Report properties with inconsistent &ends=报表属性不一致的目的
Inconsistent count of placeholders: found {0} in ''{1}''=不一致的占位符:{0}在“{1}”
Inconsistent property value end ''{0}'' but found ''{1}'' in ''{2}''=不一致的属性值结束“{0}”,但发现“{1}”在“{2}”
Inconsistent property value end ''{0}''=不一致的属性值结束“{0}”
Property inherited from the ''{0}'' file with the same value=财产继承了"{0}"文件相同的值
Edit ''{0}'' Options=编辑 ''{0}'' 选项
Offline View=离线查看
Editor Settings=编辑器设置
Nothing found to display=没有发现显示
Parsing inspections XML dump=分析检查XML
Inspection {0} options=检查{0}选项
Suppress for tag=抑制对标签
Suppress for file=抑制文件
Suppress all for file=抑制所有文件
Annotate overridden methods as ''@{0}''=注释覆盖方法为"@{0}"
Overridden methods are not annotated=重写的方法不是注释
Overridden method parameters are not annotated=覆盖方法参数不会被注释
Annotate overridden method parameters as ''@{0}''=重写方法参数注释"@{0}"
Please configure library ''{0}'' which is used in module ''{1}''=请配置库"{0}"用于模块"{1}"
&Report suspicious but possibly correct method calls=报告可疑的，但可能是正确的方法调用
Unused library=未使用的库
Unused library ''{0}''=未使用的库''{0}''
Unused roots {0} from library ''{1}''=未使用的根{0}从图书馆"{1}"
Perform backward analysis=执行反分析
&Ignore @PropertyKey expressions=忽略 @PropertyKey 表达式
Inline value ''{1}'' for parameter ''{0}''=内联值"{1}"参数"{0}"
Fix all ''{0}'' problems in file=修复所有''{0}''问题
Cleanup code=清除代码
Cleanup code on=清除代码……
Unsupported characters for the charset ''{0}''=不支持的字符的字符集"{0}"
Lossy encoding=有损编码
Duplicated Code=重复的代码
Inconsistent line separators=不一致的行分隔符
Check parameters in &Non-private methods=在非私有方法中检查参数(N)
Introduce Constant Across the Project=跨项目引入常量
Detach library=分离库
Detach unused library roots=分离未使用的库根
Javadoc pointing to itself=Javadoc指向本身
Nothing found=没有发现
Add Annotations Pattern=添加注释模式
Variable is assigned to itself=变量是分配给自己
Variable ''{0}'' is assigned to itself=变量"{0}"是分配给自己
Variable ''{0}'' is initialized with self assignment=变量"{0}"是自我赋值初始化
Problematic whitespace=有问题的空白
File ''{0}'' uses tabs for indentation=文件 ''{0}'' 使用制表符缩进
File ''{0}'' uses spaces for indentation=文件 ''{0}'' 使用空格缩进
Toggle show whitespace in the editor=在编辑器中切换显示空白
TODO comment=TODO 注释
TODO comment <code>#ref</code> #loc=TODO 注释 <code>#ref</code> #loc
Line is longer than allowed by code style=代码风格行超过允许行
Action=操作
All Actions=所有操作
Ant Targets=Ant目标
No quick lists=没有快速列表
Enable:=启用:
Shortcut Preview=快捷键预览
Conflicts=冲突
Action Description=操作说明
No conflicts=没有冲突
unnamed=未命名
De&lete=删除
la&yout support=布局支持
Leave=离开
Single Click=单击
Double Click=双击
Add Separator=添加分隔符
Display name:=显示名称:
No actions=无动作
Clear Filtering=清除过滤
Mouse shortcut=鼠标快捷键
anonymous class=匿名类
type parameter=类型参数
parameter=参数
variable=变量
exception=异常
enum=枚举
@interface=@接口
label=标签
directory=目录
expression=表达式
Did you know that Quick Documentation View ({0}) works in completion lookups as well?=你是否知道快速文档视图({0})在自动完成和查找里也有?
Did you know that Quick Definition View ({0}) works in completion lookups as well?=你是否知道快速定义视图({0})在自动完成和查找里也有?
Dot, space and some other keys will also close this lookup and be inserted into editor=点,分号和一些键也会关闭这个查找,并插入到编辑器中
Use {0} to syntactically correct your code after completing (balance parentheses etc.)=在输入代码后,使用{0}让代码语法正确(如闭合括号等.)
entity=实体
XML tag=XML标签
attribute value=属性值
<html><body>\  Template data languages are the underlying languages in template files like those of FreeMarker/Velocity frameworks.<br>\  To change template data language settings {0} uses for a file, a directory, or the entire project, \  click an item and then select a language from a drop down list.<br><br>\  <br></body></html>=<html><body>  模板语言是框架或模板文件的基本语言.<br>  (为文件/目录/项目)改变模板语言的配置{0}.   选中一项,然后选择模板语言.<br><br>  说明:<br>  如果没指定,将继承当前文件的模板语言.<br></body></html>
{0} ''{1}'' causes dependency cycle and cannot be added={0} ''{1}'' 导致依赖循环和不能添加
Cannot Save Settings=无法保存设置
Keyword1=关键字1
Keyword2=关键字2
Keyword3=关键字3
Keyword4=关键字4
Number=数字
Line comment=行注释
Block comment=块注释
Valid string escape=有效字符串转义
Invalid string escape=无效的字符串转义
Comment=注释
Tag name=标签名称
Attribute value=属性值
Entity reference=实体引用
Scripting=脚本
Action and directive content=行动和指令内容
Action and directive name=行动和指令名称
String//String text=字符串//文本字符串
String//Escape Sequence//Valid=字符串//转义序列//有效的
String//Escape Sequence//Invalid=字符串//转义序列//无效的
Braces and Operators//Parentheses=括号与运算符//圆括号
Braces and Operators//Braces=括号与运算符//花括号
Braces and Operators//Brackets=括号与运算符//方括号
Braces and Operators//Comma=括号与运算符//逗号
Braces and Operators//Semicolon=括号与运算符//分号
Braces and Operators//Dot=括号与运算符//圆点
Comments//Line comment=注释//行注释
Comments//Block comment=注释//块注释
Errors and Warnings//{0}=错误和警告//{0}
Methods//Abstract method=抽象方法
Methods//Inherited method=继承的方法
Bad character=坏字符
Breakpoint line=断点行
Execution point=执行点
Not top frame=没有顶部框架
Inlined values=内联的值
Inlined modified values=内联修改后的值
Inlined values for breakpoint line=为断点行内联值
Recursive calls highlighting=递归调用突出
Annotations//Annotation name=注释名称
Annotations//Annotation attribute name=注释属性名称
Prologue=序言
Namespace prefix=命名空间前缀
Tag data=标签数据
Text//Readonly fragment background=文字//只读片段背景
Comments//Doc Comment//Text=注释//文档注释//文本
Comments//Doc Comment//Tag value=注释//文档注释//标签值
Identifiers//Local variable=标识符//局部变量
Identifiers//Global variable=标识符//全局变量
Identifiers//Function call=标识符//函数调用
Identifiers//Parameter=标识符//参数
Classes//Interface name=类//接口名称
Classes//Class name=类//类名
Classes//Instance method=类//实例方法
Classes//Static method=类//静态方法
Template language=模板语言
Markup//Tag=标记//标签
Markup//Attribute=标记//属性
Markup//Entity=标记//实体
Metadata=元数据
<html><body>\  Personalize source code appearance by changing fonts, highlighting styles, indents, etc. \  Customize the Editor from line numbers, caret placement and tabs to source code inspections, \  setting up templates and file encodings=<html><body>通过更改字体，突出个性化风格的源代码的外观，缩进等。自定义的行号，插入符号位置和选项卡中的编辑器源代码检查，建立模板和文件编码。
Project: {0}=项目: {0}
Build, Execution, Deployment=构建、执行部署
<html><body>\  Configure the project Execution settings, set up Deployment options and customize the Debugger behavior=<html><body>配置你的项目有不同的构建工具（Maven, Gradle or Gant）的集成，修改默认的编译器设置，管理服务器访问配置，自定义调试器的行为，等等。
Build Tools=构建工具
<html><body>\  Configure your project integration with different build tools: Maven, Gradle or Gant=<html><body>配置不同的构建工具项目的整合： Maven, Gradle or Gant.</body></html>
<html><body>\  Configure the settings related to specific frameworks and technologies used in your project=<html><body>配置相关项目中使用特定的框架和技术的设置。
<html><body>\  Configure integration with third-party applications, specify the SSH Terminal connection settings, \  manage server certificates and tasks, configure diagrams layout, etc=<html><body>配置与第三方应用的集成，指定SSH终端连接设置，管理服务器证书和任务，配置图布局等
Classic &View=经典视图
Save Changes=保存更改
Default &View=默认视图
Template Project Settings=模板项目设置
Errors and Warnings//Problem from server=服务器问题
Code//Injected language fragment=注入的语言片段
Code//Identifier under caret=光标标识符
Code//Identifier under caret (write)=光标标识符(写)
Dependency UI=依赖 UI
PSI Viewer=PSI 查看器
Java Debugger Frame View=Java 调试器框架视图
XML Code Folding=XML 代码折叠
Playback Debugger=Playback 调试器
XML Editor=XML 编辑器
Built-in server=内置服务器
Global libraries=全局 libraries
Key maps=Key 映射
Usage View=使用视图
Refactoring: Properties=重构：属性
Inspection profiles=检查配置文件
UI Settings=界面设置
Color schemes=色彩方案
Shortcut Promoter=快捷方式启动
Text Diff=文本比较
Path Macros=宏路径
Diff=比较
External Diff=外部比较
Default project=默认项目
Cannot create {0} - incorrect {1} template=不能创建{0} - {1}模板不正确。
Searching for inheritors of {0}=寻找{0}的继承者
Searching for inheritors=寻找继承者
Searching for {0}=搜索{0}
Analyzing non-code usages=分析代码无关的用法
Project and Libraries=项目和库
Project Files=项目文件
Project Test Files=项目测试文件
Intersection of {0} and {1}={0}和{1}的交叉点
Union of {0} and {1}={0}和{1}的接合
Can''t save code style scheme {0}. {1}=不能保存代码风格方案{0}.{1}
Identifier expected=标识符是预期的
expression expected=表达式是预期的
] expected=] 是预期的
( expected=( 是预期的
) expected=) 是预期的
: expected=':'是预期的
Value expected=值是预期的
Cannot resolve function ''{0}'' #loc=不能解决函数 ''{0}'' #loc
Cannot resolve namespace ''{0}'' #loc=不能解决命名空间 ''{0}'' #loc
Cannot resolve property or method ''{0}'' (dynamic property?) #loc=能解决属性或方法''{0}''(动态属性吗?) #loc
Cannot resolve method ''{0}''() #loc=不能解决方法 ''{0}''() #loc
Different number of formal and actual parameters=不同数量的正式和实际参数
Declare Variable As External Data=声明变量作为外部数据
Declare external variable as <jsp:useBean />=声明外部变量作为<jsp:useBean />
Declare external variable in comment annotation=声明外部变量在注释
Cannot resolve variable ''{0}'' #loc=不能解决变量 ''{0}'' #loc
JSF EL out of attribute #loc=JSF EL在属性外 #loc
Method call is nonstandard extension #loc=方法调用是标准扩展 #loc
Module ''{0}'' runtime scope=模块 ''{0}'' 运行时范围
Anonymous class derived from {0}=匿名类派生从{0}
local=本地
Anonymous in {0}=匿名在{0}
Enum constant ''{0}'' in ''{1}''=枚举常数 ''{0}'' 在 ''{1}''
Signature is different=签名是不同的
Different return type=不同的返回类型
Custom function name=自定义函数名称
Custom attribute name=自定义属性名称
Anonymous class=匿名类
Invalid regular expression {0}=无效的正则表达式{0}
Tells reference provider to process only qualified class references (e.g. not resolve String as java.lang.String)=告诉基准提供程序,过程只有合格类引用(如:不解决字符串作为java.lang.String)
Tells reference provider how evaluate default path for given file=告诉基准提供程序,如何评估给定文件的默认路径
Find acceptable class=找到可接受的类
''{0}'' is not an identifier=''{0}'' 不是一个标识符
Cannot modify a read-only directory ''{0}''=无法修改只读目录 ''{0}''
Cannot modify a read-only file ''{0}''=无法修改只读文件 ''{0}''
Cannot delete a read-only file ''{0}''=无法删除只读文件 ''{0}''
{0} expected={0}是预期的
native=本地的
Refactoring Preview=重构预览
Incorrect Data=不正确的数据
Parameters=参数
Bound Value:=绑定值:
Exceptions=异常
Return &type:=返回类型:
&Name=名称
Signature Preview=签名预览
Return type is not specified=未指定返回类型
Search for &text occurrences=搜索文本匹配项
Pri&vate=私有
&Interface name:=接口名称:
Parameter na&me\:=参数名称:
Extract Include File=提取包含文件
The file will be created in this directory=将此目录中创建文件
No superclass name specified=未指定超类名称
No interface name specified=未指定接口名称
Replace &all occurrences ({0} occurrences)=替换所有的匹配项({0}匹配项)
Do &not replace=不要替换
&Replace all fields=替换所有字段
No field name specified=未指定字段名称
Cannot perform refactoring using selected element(s)=Cannot perform refactoring using selected element
Extract Interface=提取接口
Extract Superclass=提取超类
Extract include file=提取包含文件
Replace Fragment=替换片段
Select Refactoring=选择重构
&Move inner class {0} to another class=移动内部类{0}到另一个类
Operation is not supported=操作不被支持
Rename &package=重命名包
Rename &directory=重命名目录
&Move=移动
{0} already contains field {1}={0}已包含字段{1}
Caller Method=调用方法
Invalid target package name specified=指定的目标包名称无效
No target directory specified=未指定目标目录
&New name:=新名字:
Copy specified files and directories=复制指定的文件和目录
Copy Class=复制类
Clone Class=克隆类
Pr&ivate=私有
Replace &all occurrences=替换所有的匹配项
Current &method=当前方法
Field &declaration=字段声明
&Generate annotations=生成注释
Declare &static (pass fields as params)=声明 &static (通过域作为参数)
No destination class specified=未指定目标类
Create class {0}=创建类{0}
Move Members=移动成员
Inline Method=内联方法
{0} will no longer override {1}={0}将不再重写{1}
Delete {0}=删除{0}
{0} already contains a {1}={0}已包含{1}
New name=新名字
Edit Class/Package Migration Description=编辑 类/包 迁移说明
Migration=迁移
Move specified classes=移动指定的类
Move specified packages=移动指定的包
Moving inner class {0}=移动内部类{0}
Move specified files=移动指定的文件
Move specified directories=移动指定的目录
Move file {0}=移动文件{0}
Move directory {0}=移动目录{0}
Searching for Duplicates=寻找重复的
Select &all=全选
Rename To=重命名为
Rename &variables=重命名变量
Rename &inheritors=重命名继承者
Rename &overloads=重命名 &overloads
Class {0} already exists=类{0}已存在
Rename Variables=重命名变量
Retry=重试
&Rerun Safe Delete=重新运行安全删除
&Delete Anyway=无论如何都删除
Ca&ncel=取消
&Modify=修改
&Do not show this message in the future=以后不再显示此消息
Member=成员
&Refactor=重构
&Preview=预览
implements {0}=实现{0}
field {0}=字段{0}
method {0}=方法{0}
class {0}=类{0}
{0} is a part of method hierarchy. Do you want to delete multiple type parameters?={0}方法是层级的一部分。你想删除多个类型参数？
Cannot find or create destination directory=无法找到或创建目标目录
Analysis scope=分析范围
Abstract classes cannot be inlined=抽象类不能被内联
Classes which have a superclass and implement an interface cannot be inlined=有超类和实现了接口的类不能被内联
Class is never used=类从未使用
Inline Parameter=内联参数
&Migrate=迁移
&Exclude=排除
Extract as &enum constant=提取为枚举常量
Move specified elements=移动指定的元素
Rename &Directory=重命名目录
Rename &Module=重命名模块
Output variables=输出变量
Signature preview=签名预览
Empty=空
Rename directory=重命名目录
Rename directories=重命名目录
Rename Project=重命名项目
Rename &project=重命名项目
Renames project=重命名项目
Extract Functional Parameter=提取函数参数
References to be modified=引用被修改
Running tests=运行测试
Test Results=测试结果
No tests were found=没有发现测试
Invalid Regular Expression=无效的正则表达式
No name=没有名字
Move D&own=下移
Edit filter=编辑过滤器
Project views=项目视图
Search results=搜索结果
Open console=打开控制台
Group:=组:
Create Tool=创建工具
Edit Tool=编辑工具
Copy Tool=复制工具
Program:=程序:
Tool settings=工具设置
Tools:=工具:
Run External tool=运行外部工具
Run tool:=运行工具:
[unnamed group]=[未命名组]
Select Color=选择颜色
Insert Path=插入路径
Input Error=输入错误
beg blue=BegBlue主题
&Replace=替换
&Skip=跳过
&All Files=所有文件
Move to=移动到
Click to toggle the read-only attribute=点击切换只读属性
Documentation=文档
<html><body><u>Open Plugin Manager</u></body></html>=<html><body><u>打开插件管理器</u></body></html>
My Plugins:=我的插件:
Bundled Plugins:=捆绑的插件:
Learn more=了解更多
Not specified=未指定
Select Path=选择路径
Enter a new folder name:=输入一个新的文件夹名称:
Folder name cannot be empty=文件夹名称不能为空
&Show difference=显示差异
File Cache Conflict {0}=文件缓存冲突{0}
File Cache Conflict=文件缓存冲突
File system content=文件系统内容
Memory content=内存内容
&Ignore Changes=忽略更改
Column=列
Tr&y Again=重试
Change HTTP &Proxy Settings=更改HTTP代理设置
Add Class=添加类
New Filter=新的过滤器
Choose class=选择类
How it works=它是如何工作的
Targets=目标
Non-code usages=没有代码使用
Usages in generated code=生成代码的用法
Found usages=发现使用
usage=使用
Show import statements=显示导入语句
Show read access=显示读访问
Show write access=显示写访问
Group by file structure=按文件结构分组
Group by usage type=按使用类型分组
Group by module=按模块分组
Group by package=按包分组
INVALID=无效
Read-only=只读
Code usages=代码使用
Usage in instanceof=使用在instanceof
Usage in import=使用在导入
Usage in cast target type=使用在cast target type
Class static member access=类静态成员入口
Nested class access=嵌套类入口
Method throws list=抛出方法的列表
Usage in .class=使用在.class
Field declaration=字段声明
Local variable declaration=局部变量声明
Method return type=方法的返回类型
Unclassified {0}=未能编类使用
New instance creation=创建新实例
New anonymous inheritor creation=创建新匿名继承
New array creation=创建新数组
Type parameter=类型参数
Value read=读值
Value write=写值
{0,number} {0,choice, 1#usage was|2#usages were} filtered out={0,number} {0,choice, 1#usage was|2#usages were} 过滤出
It''s the only usage in {0}=唯一的使用在{0}
All {0} usages in {1} are in this line=所有在{1}的{0}使用,都在一行
Added=已添加
Merged=已合并
Switched=已切换
Merged with conflicts=合并冲突
Merged with property conflicts=合并属性冲突
Deleted from file system=从文件系统中删除
Suppressed=抑制
Status=状态
Current=当前
&Commit Message=注释
Check remote status=检查远程状态
&Reformat code=格式化代码
Updated from server=从服务器更新
Updated=已更新
Created=已创建
Restored=已恢复
Will be merged=将被合并
&From=从
&Before=之前
&After=之后
Could Not Load Content=无法加载内容
Commit=提交
Binary versions are identical=二进制版本是相同的
Binary versions are different=二进制版本是不同的
Local ({0})=本地({0})
{0} Directory={0}目录
{0} File={0}文件
{0} Directories={0}目录
{0} Files={0}文件
Author=作者
Branch=分支
Revision=修订
Version Control Configurations=版本控制配置
Unable To Save Settings=无法保存设置
Files Creation/Deletion=文件创建/删除
General Settings=常规设置
Show Difference=显示差异
 Filter Update Project information by scope= 过滤更新项目信息的范围
Compare=比较
Cannot show differences: {0}=无法显示差异:{0}
Show Differences=显示差异
Cannot refresh: {0}=无法刷新:{0}
Cannot load version: {0}=无法加载版本:{0}
Get Version=获取版本
Message=消息
Loading revision {0}=加载修订{0}
Cannot load version {0}:{1}=无法加载版本{0}:{1}
Load Version=加载版本
Loading Contents=加载内容
Open message view=打开消息视图
Edit Files=编辑文件
When files are created with {0}:=当 {0} 文件被创建:
When files are deleted with {0}:=当 {0} 文件被删除:
Console=控制台
Merge Result=合并结果
Clear Read-Only Status=清除只读状态
using file system=使用文件系统
using {0}=使用{0}
File is up-to-date=文件是最新的
Synchronizing files=同步文件
Updating done=更新完成
Update canceled=更新取消
{0} Errors={0}错误
{0} Info={0}信息
Group by Packages=按包分组
Directories=目录
Code Analysis=代码分析
Code analysis is not possible right now=现在代码分析是不可能的
Performing Code Analysis=执行代码分析
Perform code analy&sis=执行代码分析
Check TODO=检查TODO
Group by Directory=按目录分组
Show Ignored Files=显示忽略的文件
Comm&it=提交
Performing VCS refresh=执行VCS刷新
User=用户
The file ''{0}'' is not of a known file type. Would you like to associate it with a file type?=文件"{0}"不是一个已知的文件类型. 是否愿意将其关联为一种文件类型?
Associate=关联
Search Again=再次搜索
Specify Search Criteria=指定搜索条件
Patch files=补丁文件
{0} changed {0,choice,1#file|2#files}={0}更改 {0,choice,1#file|2#files}
{0} new {0,choice,1#file|2#files}={0}新 {0,choice,1#file|2#files}
{0} deleted {0,choice,1#file|2#files}={0}已删除 {0,choice,1#file|2#files}
Local Version=本地版本
Patched Version=补丁版本
Patch=补丁
Select Patch File=选择补丁文件
Select Base Directory=选择基本目录
apply patch=应用补丁
Edit Errors=编辑错误
Would you like to {0} the changes to {1}?=你愿意{0}更改到{1}?
Would you like to {0} the changes to {1} selected files?=你愿意{0}更改到{1}个所选文件吗?
Configure Ignored Files=配置忽略的文件
Mask: {0}=掩码:{0}
Show All Changes=显示所有更改
Edit VCS Directory Mapping=编辑VCS目录映射
Add VCS Directory Mapping=添加VCS目录映射
Accept &Yours=接受你的
Accept &Theirs=接受他们的
Binary=二进制
Changes affecting {0}=更改影响{0}
Select the changelist to which the changes should be moved:=选择将被移动的变更列表:
Refreshing VCS history=刷新VCS历史
Background Operations=后台操作
Changelist Details=变更列表详情
Last Week=上周
Link=链接
Verifying=验证
Summary:=摘要:
Regular expression used in the filter is invalid=正则表达式中使用的过滤器是无效的
There are no committed changes in the repository=没有承诺库中的变化
Press Refresh button to load repository changes=按刷新按钮加载库的变化
Press Refresh button to load incoming changes=按刷新按钮负荷引入的变更
There are no incoming changes=没有传入的更改
Show History for {0}=显示{0}的历史
Function=函数
Code Block=代码块
Statement=声明
{0} isn''t a directory={0}不是一个目录
Update from VCS=从VCS更新
Copy Old Text=复制旧文本
Would you like to move the files that failed to commit to a separate changelist?=你想要移动文件未能提交到一个单独的变更列表吗?
Commit Failed=提交失败
Local version=本地版本
Move Changes to List=移动更改到列表
Restore=恢复
Makes selected already unshelved changelist(s) available for unshelve again=使选定的已经unshelved变更列表(s)可供unshelve再次
Highlights revisions before or equal to selected=强调修订之前或等于选定
Highlights revisions after or equal to selected=强调修订或等于选择后
Select a version control system to associate with the project root:=请选择版本控制系统,使您的<项目根>是在:
Version control settings can be configured in 'Settings | Version Control'=版本控制的配置是：“设置”|“版本控制”
Commit dialog=提交对话框
Rolling back {0}=回滚{0}
Initializing VCS=初始化VCS
&Move changes to active changelist (''{0}'')=移动变更到活动变更列表 (''{0}'')
VCS Operations=VCS操作
Background processes=后台进程
Enable background processes=启用后台进程
<html><body>{0,choice, 0#|1#One|2#{0}} added/edited TODO {0,choice, 0#|1#item was|2#items were} found.<br/>\                        Would you like to review {0,choice,1#it|2#them}?<br/>\                        {1,choice, 0#|1#One file was skipped.|2#{1} files were skipped.}</body></html>=<html><body><b>有没有 {0,choice, 0#|1#was one|2#were {0}} 添加或编辑待办 {0,choice, 0#|1#item|2#items} 发现。</b><br/>{1,choice, 0#|1#一个文件被跳过。|2#{1} 文件被跳过}你想回顾 {0,choice,1#it|2#them}?</body></html>
<html><body>{0,choice, 1#One|2#{0}} TODO {0,choice, 1#item was|2#items were} found in changed fragments.<br/>\                             Would you like to review {0,choice,1#it|2#them}?<br/>\                             {1,choice, 0#|1#One file was skipped.|2#{1} files were skipped.}</body></html>=<html><body>有没有 {0,choice, 1#was one|2#were {0}} 在改变 {0,choice, 1#fragment|2#fragments} TODO {0,choice, 1#item|2#items} 发现。<br/>{1,choice, 0#|1#一个文件被跳过。|2#{1} 文件被跳过}你想回顾 {0,choice,1#it|2#them}?</body></html>
Paths Affected in Revision {0}=路径影响修订{0}
Downloading ''{0}''=下载''{0}''
''{0}'' does not exist=''{0}'' 不存在
''{0}'' already exists=''{0}'' 已经存在
''{0}'' is not a directory=''{0}'' 不是一个目录
Cannot create file ''{0}''=无法创建文件 ''{0}''
Cannot move file to {0}=无法移动文件到{0}
Cannot copy file to {0}=无法复制文件到{0}
Data Views=数据视图
Stepping=步进
Show Breakpoints Dialog=显示断点对话框
Suspend: all=暂停：所有
Condition:=条件:
Depends on:=依赖于:
Breakpoints=断点
Conditions=条件
Suspend policy=暂停政策
&Thread=线程
Enable&d=启用
Disable again=再次禁用
Group by file=按文件分组
Select a breakpoint=选择一个断点
&Result:=结果:
Expression:=表达式:
Evaluate Code Fragment=评估代码片段
Code Fragment &Mode=代码片段模式
Code fragment:=代码片段:
result=结果
Set As Root=设为根
Disconnected=已断开
&Debug=调试
Frames=帧
Log: {0}=日志: {0}
Variables are not available=变量不可用
No breakpoints=没有断点
 Global= 全局
 Local= 本地
 With Block= 用块
 Closure= 结束
 Catch= 捕捉
 Class= 类
 Instance= 实例
 Library= 库
 Block= 块
 Script= 脚本
Sort values a&lphabetically=按字母顺序排序
Focus application on breakpoint=重点应用断点
Show values inline=显示值内联
Show value tooltip=显示值提示。
Show value tooltip on code selection=显示值提示代码选择
Scroll execution point to center=滚动执行点到中心
If disabled, use "{0}" to show/hide tooltips=如果禁用，使用“{0}“显示/隐藏提示
Validation Is Running=验证正在运行
Complex type=复杂类型
Image size mismatch=图像尺寸不匹配
Deprecated HTML tag=弃用的 HTML 标签
choose color=选择颜色
ampersand=符号
Replace with CSS=用CSS替换
Presentational HTML tag=显示的HTML标签
Form input without an associated label or title attribute=表单输入没有相关的label
Create a new label from the text before {0} element=在元素{0}前,创建一个新的标签
Create a new label from the text after {0} element=在元素{0}后,创建一个新的标签
Associate a new label with {0} element=用{0}元素联合一个新的标签
Wrong root element=错误的根元素
namespace=命名空间
Duplicate ID=复制ID
Fetch external resource=获取外部资源
Manually setup external resource=手动设置外部资源
Fetching resource=获取资源
Ignore external resource=忽略外部资源
External Resource=外部资源
Schemas and DTDs=模式和DTDs
&External Schemas and DTDs=外部模式和DTDs
&Ignored Schemas and DTDs=忽略模式和DTDs
No external resources=没有外部资源
No ignored resources=没有忽视资源
Add {0} to custom html tags=添加{0}到自定义的html标签
Add {0} to custom html attributes=添加{0}到自定义的html属性
Add {0} to custom html boolean attributes=添加{0}自定义HTML布尔属性
Add {0} to not required html attributes=添加{0}到非必需的html属性
Invalid URL=无效的URL
Press {0} to view tags from other namespaces=按{0}来查看标签的其他命名空间
Preview File in=预览文件
Enumeration value=枚举值
Unused XML schema declaration=未使用的 XML 架构声明
Namespace location is never used=命名空间位置从未使用过
Namespace declaration is never used=命名空间声明从未使用过
Remove unused namespace declaration=删除未使用的命名空间声明
File path resolving in XML=文件路径解析 XML
XML highlighting=XML 高亮
Negative number=负数
Result schema file name is empty=结果模式文件的名字是空的
Generate Schema From Instance Document=从实例文档生成模式
Instance To Schema=实例模式
Instance 2 Schema generator error=实例2模式发生器错误
Generate Schema From Instance Xml Document=从Xml文档生成实例模式
local elements/global complex types=局部元素/全局复杂类型
local elements/types=局部元素/类型
global elements/local types=全局元素/局部类型
Select Xml Document=选择Xml文档
No class in selected text editor=选中的编辑器里没有类
Generate Instance Document From Schema=从模式生成实例文档
Select Schema Document=选择模式文档
Instance document file name to be generated=实例文档生成文件的名称
Schema path:=模式的路径:
Instance document name:=实例文档名称:
Element name:=元素名称:
Enable restriction check=启用约束检查
Enable unique check=启用唯一检查
Detect enumerations limit:=检测枚举限制:
Design type:=设计类型:
Detect simple content type:=检测简单的内容类型:
Instance document path:=实例文档路径:
Root element name is not valid=无效的根元素名称
Output file name is not valid=输出文件的名称无效
Path to schema or wsdl to be used for generation using XmlBeans=路径到模式或wsdl用于生成使用XmlBeans
Path to schema=路径到模式
Path to instance document=实例文档的路径
Root element for instance document generation=实例文档生成的根元素
Enable particle valid (restriction) rule=使有效(限制)粒子规则
Enable unique particle rule=使唯一的粒子规则
XMLSchema design type=XMLSchema设计类型
Simple content types detection (leaf text)=简单的内容类型检测(叶状文本)
Detection enumeration from following count=从下面总数检测枚举
Status of current settings, input errors, etc=当前设置的状态,输入错误,等等
Result schema file name=结果模式文件名称
Browse for local file=浏览本地文件
Instance document file does not exist=实例文档文件不存在
File {0} doesn''t exist=文件{0}不存在
Can''t rename {0} to {1}=无法将{0}重命名为{1}
Can''t delete file {0}=无法删除文件{0}
Filters enabled by default=过滤器默认启用
Enable &abbreviation preview=启用缩写预览
Expand &abbreviation with=展开缩写
Enable automatic &URL recognition while wrapping text with <a> tag=启用自动网址&URL识别 <a> 标签
Add edit &point at the end of template=在模板的结尾处添加编辑点
Startup pa&ge:=启动页面:
Open browser=打开浏览器
Select=选择
&Allow unsigned requests=允许未签名的请求
Check commit message spelling=检查提交信息的拼写
Toggle checking commit message spelling errors=切换检查提交信息的拼写错误
Drop An PermGen OutOfMemoryError=删除一个永久保存区域(PermGen)内存溢出(OutOfMemory)错误
=(删除无版本控制的)?
Unknown type {0}=未知类型 {0}
Press {0} again to view all accessible classes=按 {0} 再次查看所有可访问的类
\"{0}\"@{1}: {2}="{0}"@{1}: {2}
\"{0}\"@{1} in group \"{3}\": {2}="{0}"@{1} in group "{3}": {2}
{0, choice, 0#No differences|1#1 difference|2#{0, number} differences}={0, choice, 0#no differences|1#1 difference|2#{0, number} differences}
"5"><tr><td><h2>Evaluation Feedback</h2>="5"><tr><td><h2>评价反馈</h2>
"right"><em>The JetBrains Team</em>="right"><em> JetBrains 团队</em>
Firefox Settings=Firefox 设置
HTTP Proxy=HTTP 代理
<noname>=<没有名字>
Details=详细信息
Select Template=选中模板
All=所有
<params>=<参数>
<filename>=<文件名>
Name=名称
<invalid>=<无效>
Add Pattern=添加模式
Filters=过滤器
Selection=选择
<default>=<默认>
<Default Package>=<默认包>
Checking for platform updates=检查平台更新
Checking for plugin updates=检查插件更新
{0} (build {1})={0} (构建 {1})
Local=本地
Connecting to ''{0}''=连接到 ''{0}''
Web Browsers=Web浏览器
Elements to Delete=删除元素
Select Elements to Delete=选择要删除的元素
nonexistent=不存在
Rename {0} Classes=重命名 {0} 类
Scale to Screen DPI=缩放到屏幕DPI(每英寸点)【】Scale to Screen DPI
Scale the active window to match its current screen DPI (dots per inch)=将活动窗口缩放到匹配当前屏幕DPI(每英寸点)【】Scale the active window to match its current screen DPI (dots per inch)
Specify {0} Scope=指定{0}范围
{1, choice, 1#Module|2#Modules} {0}={1, 选择, 1#模块|2#模块}{0}
{0} &module ''{1}''={0}模块"{1}"
 {0, choice, 1#1 entry|2#{0, number} entries}={0, choice, 1#1 entry|2#{0, number} entries}
<default package>=<默认包>
Unexpected ''{0}''=未预料到的 ''{0}''
Package pattern expected=封装模式预期
')' expected=')' 预期
{0} at position {1}={0} 在位置 {1}
Substitution not allowed=不允许替换
Can''t resolve property: {0}=无法解析属性: {0}
implicit ant properties=隐含的 Ant 属性
(actual attribute value''{0}'')=(实际属性值''{0}'')
Ant properties declaration=Ant 属性声明
Create Target=创建目标
Create target ''{0}''=创建目标 ''{0}''
Ant target=Ant 目标
Ant property=Ant 属性
Ant task=Ant 任务
Target=目标
Cannot Add Build File=无法添加构建文件
Show Ant build file properties dialog=显示 Ant 构建文件属性对话框
Toggle tree/text mode=切换树/文本模式
<default target>=<默认目标>
Show All Messages=显示所有消息
Show all messages produces by ant build=显示所有的消息产生由 Ant 构建
Ant process from the same build file is active. Terminate it?=从相同的构建文件 Ant 的进程中。终止它吗？
Starting Ant Build=开始 Ant 构建
Ant Process is active. Terminate Ant process?=Ant 进程是活跃的。终止 Ant 进程？
Close Ant Build Messages=关闭 Ant 构建消息
Cannot start {0}=不能开始 {0}
Ant build aborted in {0} at {1}=Ant构建中止在{0} {1}
Ant build completed successfully in {0} at {1}=Ant构建成功完成在{0} {1}
Ant build completed with \  {0, choice, 0#no warnings|1#one warning|2#{0} warnings} in {1} at {2}=Ant构建完成 \  {0, choice, 0#no warnings|1#one warning|2#{0} warnings} in {1} at {2}
Ant build completed with \  {0, choice, 0#no errors|1#one error|2#{0} errors} and {1, choice, 0#no warnings|1#one warning|2#{1} warnings} \   in {2} at {3}=Ant构建完成 \  {0, choice, 0#no errors|1#one error|2#{0} errors} and {1, choice, 0#no warnings|1#one warning|2#{1} warnings} \   in {2} at {3}
Project JDK not specified=工程JDK没有指定
JDK ({0}) needed to run this ANT target is not configured. Please update your settings in the Project | Libraries menu=JDK ({0}) 需要运行这个Ant目标未配置。请更新项目的设置 | 库菜单。
JDK ({0}) needed to run this ANT target is incorrectly configured. Please update your settings in the Project | Libraries menu=JDK ({0}) 运行此ANT目标所需要的配置不正确。请在项目更新您的设置 | 库菜单。
Ant installation is not configured. Check out Ant build file properties=Ant安装未配置。检查Ant构建文件属性
Ant Build Progress=Ant 构建进度
Running Ant: ''{0}''=运行 Ant: ''{0}''
Run ANT=运行 ANT
Cannot Run ANT=不能运行 ANT
Ant build started=Ant 构建开始
Canceled by user=用户取消
Ant Build Input=Ant 构建输入
Build:=构建:
Target:=目标:
Task:=任务:
Target: {0}=目标: {0}
Executing task: {0}=执行任务: {0}
Next Error/Warning=下一错误/警告
Previous Error/Warning=上一错误/警告
Expand all build file nodes=展开所有构建文件节点
Collapse all build file nodes=折叠所有构建文件节点
Select Ant build file=选择 Ant 构建文件
Select one or more build.xml files to be added to the list=选择一个或多个build.xml文件被添加到列表中
Cannot Add Files=无法添加文件
Confirm Remove=确认删除
Execute on=执行
Add an existing Ant build file to the list=将现有的Ant构建文件添加到列表中
Remove the selected build file from the list=从列表中删除选定的构建文件
Run the selected build file or selected target(s) with Ant=运行选定的构建文件或选定目标对象与Ant
Run Build=运行构建
Run Target=运行目标
Run Targets=运行目标对象
Create run configuration=创建运行配置
Filter targets=过滤目标
Before Run/Debug=运行前/调试
Create Meta Target=创建元目标
Save selected targets as a meta-target=保存选定目标为元目标
Remove Meta Target=移除元目标
Remove Build File=移除构建文件
Remove Meta Targets=移除元目标对象
<The list of build files is empty>=<生成文件列表是空的>
Execute Target Before Run/Debug=执行目标之前运行/调试
Such sequence of targets already exists=这样的目标序列已经存在
Cannot add file {0}: {1}=无法添加文件{0}: {1}
Unknown version=未知版本
Path {0} does not exist=路径 {0} 不存在
lib directory not found in {0}={0}中未找到lib目录
ant.jar not found in directory ''{0}''=ant.jar 未找到目录 ''{0}''
{0} is directory={0}是目录
Apache Ant version {0}=Apache Ant 版本 {0}
Can''t read from {0}=不能从{0}中读取
No ANT configured=没有配置 ANT
ANT ''{0}'' is not configured=ANT ''{0}'' 未配置
After Compilation=编译后
Before Compilation=编译前
Bundled Ant=捆绑 Ant
Build sequence {0}=构建序列 {0}
Wrong name format: {0}=错误的名称格式: {0}
Class&path:=类路径:
Add A&ll in Directory=添加所有的目录
&Classpath:=类路径(&C):
Configure Ant=配置 Ant
Insert Macro=插入宏
Project JDK ({0})=项目 JDK ({0})
Project JDK (not specified)=项目 JDK (未指定)
<Unnamed>=<未命名的>
&Close message view if no error occurred=如果没有发生错误，关闭消息视图
Maximum &heap size (Mb):=最大堆大小 (Mb):
Make build in &background=使构建在后台
Build File Properties=构建文件属性
Description=描述
Execution=执行
Additional Classpath=附加类路径
Ant command &line:=Ant 命令行:
Ant Command Line=Ant 命令行
Run under &JDK:=&JDK下运行:
Run with Ant\:=用 Ant 运行\:
&Set Default=默认设置
Use c&ustom Ant\:=使用自定义的Ant\:
Use project &default Ant\:=使用项目默认Ant\:
Ant Setup=Ant 设置
Ant project name=Ant 项目名称
User task=用户任务
Macrodef element=Macrodef 元素
Scriptdef element=Scriptdef 元素
Create property=创建属性
Add property definition ''{0}''=添加属性定义''{0}''
&Narrow down the list on typing=缩小键入的列表
Delete selected Ant configuration?=删除选定的Ant配置？
Delete selected Ant configurations?=删除选定的Ant配置？
Create property ''{0}''=创建属性 ''{0}''
Create property ''{0}'' in file ''{1}''=创建属性''{0}'' 文件''{1}''
Element ''{0}'' is undefined=元素''{0}''未定义
Attribute ''{0}'' is not allowed here=属性''{0}''在这里不允许
Nested element ''{0}'' is not allowed here=嵌套元素''{0}''在这里不允许
Target ''{0}'' is unknown=目标''{0}''未知
Cannot resolve ''{0}'' refid=无法解析''{0}'' refid
Property ''{0}'' is unknown=属性''{0}''未知
Macro attribute ''{0}'' is unknown=宏属性''{0}''未知
Attribute ''{0}'' should have an integer value=属性''{0}''应该有一个整数值
Create target=创建目标
Create macrodef=创建 宏定义macrodef
Create presetdef=创建预设定义 presetdef
Run Ant target ''{0}''=运行 Ant 目标''{0}''
Run Ant target=运行 Ant 目标
Choose Ant Target to Execute=选择 Ant 目标来执行
Please set a property here=请在这里设置一个属性
Using definition which type failed to load=使用定义类型加载失败
Target ''{0}'' is duplicated=目标 ''{0}'' 是重复的
Target ''{0}'' is duplicated in file ''{1}''=在文件''{1}''中，目标''{0}''是重复的
Ant inspections=Ant 检查
Duplicate targets=重复目标
Duplicate targets in imported files=导入文件中的重复目标
Missing properties file=丢失属性文件
Registering Ant build file ''{0}''=注册Ant构建文件 ''{0}''
Loading Ant configuration=加载Ant配置
Configure highlighting=配置高亮
Maximum &stack size (Mb):=最大堆栈大小 (Mb):
Use "-J" prefix to specify JVM arguments=使用"-J"前缀来指定 JVM 参数
''{0}'' has unsupported format=''{0}''有不支持的格式
''{0}'' has unsupported xml format. Probably missing doctype=''{0}''有不支持的XML格式。也许缺少文档类型DOCTYPE。
Specify config folder or installation home of the previous version of {0}:=指定之前版本{0}的配置文件夹或安装:【】Specify config folder or installation home of the previous version of {0}:
Code Completion=代码完成
Add Package=添加包
With Subpackages=以及子包
<all other imports>=<所有其他导入>
<blank line>=<空行>
Add &Package=添加包
Chop down if long=截断如果过长
Array initializer=数组初始器
Group declarations=字段组
Loading=载入中
Save As=另存为
Before opening angle bracket=在打开尖括号之前
Use original line's indent for wrapped parts=使用自定义软包缩进
Add multiple carets on double {0} with arrow keys=使用方向键在多 {0} 上添加多个插入符号
Name:=名称:
Enable font ligatures=启用连字字体
Error stripe mark=误差条纹标志
By Scope=基于范围
<html>@SuppressWarnings</html>=<html>@抑制警告</html>
<html>End of line comments sequence</html>=<html>行结束评论序列</html>
<empty rule>=<空规则>
The file doesn''t seem to be  a valid Intellij IDEA XML scheme, it should contain ''codescheme root'' element, found ''{0}'' instead=该文件似乎不是一个有效的IntelliJ IDEA的XML格式，它应该包含''codescheme根''元素，找到''{0}''来代替。
Scheme 'name' attribute not found=未找到配置方案“name”属性。
Can''t load code style scheme {0}=无法加载代码样式配置方案 {0}
{0} x {1} {2}={0}x{1}{2}
mm=毫米
Page $PAGE$ of $TOTALPAGES$=页面 $PAGE$
Header=页眉
Footer=页脚
Printing {0}. Page {1} of {2}=正在打印{0}. 页面{1}
!(expr instanceof Type)=!(表达式实例类型)
!(expr)=!(表达式)
<no parameters>=<无参数>
<no attributes>=<无属性>
Property ''{0}'' already exists in the file ''{1}''. Override its value?=属性''{0}''已经在文件''{1}''中存在
Add '@Override' annotation=添加@Override注解【】Add '@Override' annotation
Add Override Annotation=添加覆盖注解【】Add Override Annotation
Make Type Generic=使得类型通用【】Make Type Generic
Change type of {0} to {1}=改变 {0} 的类型为o {1}【】Change type of {0} to {1}
Split into filter's chain=拆分为过滤器链
Split filter=拆分过滤器
Merge filter's chain=合并过滤器链
Merge filters=合并过滤器
Implement abstract class or interface=实现抽象类或接口
Implement abstract class=实现抽象类
Implement interface=实现接口
Create subclass=创建子类
Show &inherited methods=显示继承的方法
Generate test &methods for:=生成的测试方法:
A&bbreviation:=缩写:
&HTML=HTML
&XML=XML
JS&P=JSP
Surround with {}=环绕用{}
Annotation=注释
HTML Text=HTML文本
XSL Text=XSL文本
File copying compiler=文件复制编译
Out of memory. Increase the maximum heap size in Project Properties|Compiler settings=内存不足。增加项目属性的最大堆大小|编译器设置。
Loading classes=加载类
Compiling {0}=编译 {0}
Parsing {0}=分析 {0}
Use JDK definitions from project files=使用JDK定义项目文件
Overwrite previously generated files=重写先前生成的文件
Backup previously generated files=备份以前生成的文件
Generate single-file ant build=生成单文件Ant构建
Generate multiple-file ant build (requires ant 1.6 or later to execute)=生成多个文件Ant构建 (需要 Ant 1.6或更高版本来执行)
Enable UI forms compilation (requires "javac2" ant task from IDEA distribution)=启用UI形式编译 (需要从IDEA分配"javac2" Ant任务)
Selected Files=选定的文件
''{0}'' with no errors=''{0}''没有任何错误
''{0}'' with errors=''{0}''有错误
Failed to generate ant build script: {0}=无法生成Ant构建脚本: {0}
Failed to backup file {0}=无法备份文件 {0}
Cyclic Module Dependencies=循环模块依赖
Cycle=循环
Main Module=主模块
Make Selected Modules=选定模块
Uncomment the following property if no tests compilation is needed=如果不需要测试编译，则取消以下属性【】Uncomment the following property if no tests compilation is needed
Compiler options=编译器选项
Project Libraries=项目库
Global Libraries=全局库
JDK definitions=JDK 定义
Pattern Conversion=模式转换
The following resource patterns are malformed:{0}=下面的资源模式是异常的:{0}
Malformed Resource Patterns=异常资源模式
Paths to be included in compilation bootclasspath=路径被列入编译bootclasspath
cleanup module=清理模块
cleanup all=清理所有
Modules=模块
Build initialization=构建初始化
Perform any build initialization in this target=在这个目标中执行任何构建初始化
build all modules=构建所有模块
build all=构建所有
Module {0}=模块 {0}
Error: {0}=错误: {0}
Compilation aborted=编译中止
Failed to delete {0}=删除失败 {0}
Updating caches=更新缓存
Compilation completed successfully with {0} {0,choice, 0#warnings|1#warning|2#warnings}=编译成功地完成了{0}【】Compilation completed successfully with {0} {0,choice, 0#warnings|1#warning|2#warnings}
Compilation completed successfully=成功编译完成
Compilation completed with {0} {0,choice, 0#errors|1#error|2#errors} and {1} {1,choice, 0#warnings|1#warning|2#warnings}=编译完成了{0}and {1} 【】Compilation completed with {0} {0,choice, 0#errors|1#error|2#errors} and {1} {1,choice, 0#warnings|1#warning|2#warnings}
Executing pre-compile tasks=执行预编译任务
Executing post-compile tasks=执行编译后的任务
Failed to create directory {0}=创建目录失败 {0}
Compiler Properties=编译器属性
Exclude from Compile=排除编译
Checking dependencies=检查依赖
Found {0} dependent files=找到 {0} 相关文件
Compiler internal error. Process terminated with exit code {0}=编译器内部错误。进程终止与退出代码 {0}
Java Compiler=Java编译器
Resource Compiler=资源编译器
RMI Compiler=RMI编译器
Compiler=编译器
C&ompile in background=后台编译
C&lear output directory on rebuild=重建清除输出目录
Resource patterns\:=资源模式\:
Recursively=递归
No excludes=不排除
Use compiler:=使用编译器:
Additional command line parameters:=附加命令行参数:
Generate no warnings=不产生任何警告
Generate debugging info=生成调试信息
Report use of deprecated features=报告使用建议使用的功能
Maximum heap size (MB):=最大堆大小 (MB):
Javac Options=Javac 选项
Generate IIOP stubs=生成IIOP存根
Enable RMI stubs generation=启用RMI存根生成
Compile Progress=编译进度
Compiler Running=编译运行
The compiler is running. Proceed with project closing?=编译器正在运行。进行项目收尾？
The compiler is running. Terminate it?=编译器正在运行。终止它？
Eclipse Options=Eclipse 选项
Generating ant build=生成 Ant 构建
<output root>=<输出根>
&Main Class:=&主类(&M):
Class &Path:=类路径(&P):
Choose Artifacts=选择 Artifacts
''{0}'' directory contents=''{0}''目录内容
Library Files=库文件
''{0}'' compile output=''{0}''编译输出
''{0}'' test compile output=''{0}''测试编译输出
''{0}'' with dependencies=''{0}''与依赖关系
Module Output=模块输出
Module Test Output=模块测试输出
Archive=存档
Build Artifacts=构建 Artifacts
Build ''{0}'' artifact=构建 ''{0}'' artifact
Build {0} artifacts=构建 {0} artifacts
Select Artifacts=选择 Artifacts
{0} Destination is a directory={0} 目的地是一个目录。
Error copying ''{0}'' to ''{1}''=复制错误''{0}''到''{1}''
Compiling {0}: {1}=编译 {0}: {1}
XML file ''{0}'' is invalid=XML文件''{0}''无效
Deployment descriptor file ''{0}'' does not exist=部署描述符文件''{0}''不存在
Invalid file=无效文件
File has been changed during compilation, inspection validation skipped=编译期间文件已更改，检查验证跳过
Output Directory for Artifact=Artifact输出目录
Select output directory for ''{0}'' artifact=选择输出目录''{0}'' artifact
Package file=包文件
Update the file in the corresponding artifacts=在相应的artifacts中更新文件
Package files=包文件
Validation=验证
No validators available=没有验证可用
<html>The chunks listed below use more then one custom compiler.<br/>for them you will need to resolve conflict between<br/>compilers manually. The compilation task will also contain<br/>the fail task.<ul>{0}</ul></html>=<html>下面列出的块使用多个自定义编译器。<br/>对他们来说，你需要解决冲突<br/>手动编译。编译任务也包含<br/>失败的任务。<ul>{0}</ul></html>
Conflict between custom compilers should be resolved manually=自定义编译器之间的冲突要手动解决。
Register Custom Compiler Taskdefs=注册自定义编译任务
Inline runtime classpaths=内联运行时类路径
Use current IDEA instance for idea.home property=使用当前的IDEA实例idea.home属性
Automatically show first &error in editor=自动显示编辑器中的第一个错误
Output file name:=输出文件名:
Display notification on build completion=在构建完成后显示通知
Implements method in <a href="#javaClass/{1}">{1}</a>=实现"{1"中的方法
Implements method ''{0}'' in <a href="#javaClass/{1}">{1}</a>=实现"{1}"中的方法"{0}"
Overrides method in <a href="#javaClass/{1}">{1}</a>=重写"{1}"中的方法
Overrides method ''{0}'' in <a href="#javaClass/{1}">{1}</a>=重写"{1}"中的"{0}"方法
Code fragment expected=预期的代码片段
Cannot evaluate {0}.toString()=无法解析 {0}.toString()
Unsupported expression type=不支持的表达式类型
Internal error loading debug information from ''{0}''.  Breakpoints will be unavailable in this class=内部错误从''{0}''加载调试信息。在这个类中，断点是不可用的。【】Internal error loading debug information from ''{0}''.  Breakpoints will be unavailable in this class
Debug information is inconsistent=调试信息是不一致的【】Debug information is inconsistent
'boolean' value expected in condition=布尔值是被期待的在条件中【】'boolean' value expected in condition
''boolean'' value expected in condition=布尔值是被期待的在条件中【】''boolean'' value expected in condition
Cannot evaluate: process exited=不能解析：进程退出了【】Cannot evaluate: process exited
Stack frame unavailable=堆栈框架不可用【】Stack frame unavailable
Evaluation is not supported during another method''s evaluation=解析是不支持的在另一个方法的解析中【】Evaluation is not supported during another method''s evaluation
Sources do not correspond to code being executed=源代码不对应于正在执行的代码【】Sources do not correspond to code being executed
Cannot find source class for current stack frame=不能找到当前堆栈框架的源类【】Cannot find source class for current stack frame
Object has been collected=对象已经被回收【】Object has been collected
Thread has been collected=线程已经被回收【】Thread has been collected
Array has been collected=数组已经被回收【】Array has been collected
Thread has been resumed=线程已经被恢复【】Thread has been resumed
Debug info unavailable=调试信息不可用【】Debug info unavailable
Invalid expression : {0}=无效表达式【】Invalid expression : {0}
Expression type unknown: {0}=表达式类型未知【】Expression type unknown: {0}
Expression operand unknown: {0}=表达式操作数未知【】Expression operand unknown: {0}
Type mismatch=类型不匹配
Class ''{0}'' is not loaded=类''{0}''没有加载【】Class ''{0}'' is not loaded
Cannot evaluate: thread is not paused at breakpoint=无法评估:线程不是在断点处暂停的【】Cannot evaluate: thread is not paused at breakpoint
Method threw ''{0}'' exception=方法抛出''{0}'' 异常。【】Method threw ''{0}'' exception
Surrounded expression is null=包围表达式是零【】Surrounded expression is null
Evaluating=解析……【】Evaluating
Target VM does not support modification watchpoints=目标VM不支持修改监视点【】Target VM does not support modification watchpoints
None of the frames through and including frame may be native=帧的帧和帧都不是本地的【】None of the frames through and including frame may be native
Error while executing finally blocks: {0}=当执行最终阻塞时错误: {0}【】Error while executing finally blocks: {0}
Error while doing early return: {0}=在早期返回时出错:{0}【】Error while doing early return: {0}
Non-empty finally blocks detected:=非空最后块检测:【】Non-empty finally blocks detected:
Do Not Execute=不执行【】Do Not Execute
Execute Finally Blocks=执行最后一块【】Execute Finally Blocks
Information about the frame is not available=关于框架的信息是不可用的【】Information about the frame is not available
Evaluating {0}=解析{0}【】Evaluating {0}
Unfreeze=解冻【】Unfreeze
The value will be recalculated=值将被重新计算【】The value will be recalculated
Setting value=设置值【】Setting value
Process started=进程启动【】Process started
Process terminated=进程终止【】Process terminated
Disconnected from the target VM, address: ''{0}'', transport: ''{1}''=断开连接从目标虚拟机，地址：''{0}''，运输： ''{1}''【】Disconnected from the target VM, address: ''{0}'', transport: ''{1}''
Stopped at cursor=停止在光标位置【】Stopped at cursor
Breakpoint reached at {0}({1}:{2,number,#})=断点到达在【】Breakpoint reached at {0}({1}:{2,number,#})
Breakpoint reached at {0}=断点到达在【】Breakpoint reached at {0}
Breakpoint reached=断点到达【】Breakpoint reached
Stepping in thread {0} is blocked by thread {1}=加入线程 {0}中 ，它被线程{1}阻塞【】Stepping in thread {0} is blocked by thread {1}
<a href="#">Resume {0}</a>=<a href="#">展现【】Resume {0}</a>
Breakpoint reached in thread {0}=断点到达在线程 {0}中【】Breakpoint reached in thread {0}
<a href="#">Switch thread</a>=<a href="#">切换线程【】Switch thread</a>
Method ''{0}'' entered at {1}({2}:{3,number,#})=方法''{0}''进入在 {1}({2}:{3,number,#})【】Method ''{0}'' entered at {1}({2}:{3,number,#})
Method breakpoint reached. Method ''{0}'' is about to exit at {1}({2}:{3,number,#})=方法断点到达。方法''{0}''即将退出在{1}({2}:{3,number,#})【】Method breakpoint reached. Method ''{0}'' is about to exit at {1}({2}:{3,number,#})
Exception breakpoint reached=异常断点达到【】Exception breakpoint reached
Exception  ''{0}'' in thread ''{1}''=【】Exception  ''{0}'' in thread ''{1}''
Field watchpoint reached=字段检查点将到达【】Field watchpoint reached
'{'{0}@{5}'}'.{1} will be accessed at {2}({3}:{4,number,#})=【】'{'{0}@{5}'}'.{1} will be accessed at {2}({3}:{4,number,#})
{0}.{1} will be accessed at {2}({3}:{4,number,#})={0}.{1} 将被访问 在{2}({3}:{4,number,#})【】{0}.{1} will be accessed at {2}({3}:{4,number,#})
{0}.{1} will be modified at {4}({5}:{6,number,#}). Current value = ''{2}''. New value = ''{3}''=【】{0}.{1} will be modified at {4}({5}:{6,number,#}). Current value = ''{2}''. New value = ''{3}''
Connected to the target VM, address: ''{0}'', transport: ''{1}''=连接到目标VM，地址:''{0}''，传输:''{1}''【】Connected to the target VM, address: ''{0}'', transport: ''{1}''
Failed to establish connection to the target VM, address: ''{0}'', transport: ''{1}''=没有建立到目标VM的连接，地址:''{0}''，传输:''{1}''【】Failed to establish connection to the target VM, address: ''{0}'', transport: ''{1}''
Debugger is already listening=调试器已经听【】Debugger is already listening
shared memory=共享内存【】shared memory
socket=套接字【】socket
Cannot connect using transport ''{0}'': required connector not found. Check your JDK installation=不能连接用运输''{0}'':没有找到所需连接器。检查您的JDK安装。【】Cannot connect using transport ''{0}'': required connector not found. Check your JDK installation
The port to listen at unspecified=未指定监听端口【】The port to listen at unspecified
The port to attach to unspecified=未指定附加端口【】The port to attach to unspecified
Shared memory address unspecified=共享内存地址没有指定【】Shared memory address unspecified
{0}. Check your JDK installation=检查你的JDK安装【】{0}. Check your JDK installation
VM Version Warning=虚拟机版本警告【】VM Version Warning
{0,choice, 1#Invalid argument|2#Invalid arguments} ={0,choice, 1#Invalid argument|2#Invalid arguments}
VM disconnected. Target virtual machine closed connection=虚拟机断开连接。目标虚拟机关闭了连接【】VM disconnected. Target virtual machine closed connection
Cannot connect to remote process, host is unknown=不能连接远程进程，主机未知【】Cannot connect to remote process, host is unknown
Unable to open debugger port=不能打开调试器端口【】Unable to open debugger port
Debugger is waiting for application to start; debug address: ''{0}''; transport: ''{1}''=调试器正在等待应用启动，调试地址：''{0}'，运输: ''{1}''【】Debugger is waiting for application to start; debug address: ''{0}''; transport: ''{1}''
Listening to the connection, address: ''{0}'', transport: ''{1}''=监听连接，地址：''{0}'，运输: ''{1}''【】Listening to the connection, address: ''{0}'', transport: ''{1}''
Connecting to the target VM, address: ''{0}'', transport: ''{1}''=连接到目标虚拟机，地址：''{0}'，运输: ''{1}''【】Connecting to the target VM, address: ''{0}'', transport: ''{1}''
The application is running=应用正在运行【】The application is running
Debug stopped=调试停止【】Debug stopped
Waiting until last debugger command completes=等待直到最后调试器命令完成【】Waiting until last debugger command completes
Stepping out=走出【】Stepping out
Stepping into=走进【】Stepping into
Stepping over=走过【】Stepping over
Process resumed=进程展现【】Process resumed
Paused in another thread=暂停在另一个线程中【】Paused in another thread
Cannot pop bottom frame=不能弹出底部框架【】Cannot pop bottom frame
An error occurred while popping stack frame: {0}=一个错误发生当弹出堆栈框架时【】An error occurred while popping stack frame: {0}
Class not loaded : {0}=类没有加载【】Class not loaded : {0}
Class at {0}:{1}=类在【】Class at {0}:{1}
null context=空上下文【】null context
Array reference expected=数组引用期待【】Array reference expected
Invalid index expression=无效索引表达式【】Invalid index expression
Right part of the assignment is not a value=赋值的右部分不是一个值【】Right part of the assignment is not a value
Left part of the assignment is not lvalue=赋值的左部分不是一个值【】Left part of the assignment is not lvalue
Incompatible types for ''{0}'' operation=''{0}''操作不兼容的类型【】Incompatible types for ''{0}'' operation
No loop statements labeled with label ''{0}''=没有标签为''{0}''的循环语句【】No loop statements labeled with label ''{0}''
Reference type expected=引用类型期待【】Reference type expected
Variable ''{0}'' is not declared=变量''{0}''没有被声明【】Variable ''{0}'' is not declared
Variable ''{0}'' is already declared=变量''{0}''已经声明【】Variable ''{0}'' is already declared
Operation ''{0}'' not supported=操作''{0}''不支持【】Operation ''{0}'' not supported
Statement ''{0}'' not supported=语句''{0}''不支持【】Statement ''{0}'' not supported
Initializer for ''{0}'' has incompatible type=''{0}''的初始化器具有不兼容的类型【】Initializer for ''{0}'' has incompatible type
Local variable ''{0}'' not found in class closure=本地变量''{0}''在类闭包中没有找到【】Local variable ''{0}'' not found in class closure
Cannot find local variable ''{0}''=无法找到局部变量''{0}''【】Cannot find local variable ''{0}''
Cannot resolve class containing field ''{0}''=不能解析包含字段''{0}''的类【】Cannot resolve class containing field ''{0}''
Cannot find sources for class containing field ''{0}''=不能找到包含字段''{0}''的类的源【】Cannot find sources for class containing field ''{0}''
Identifier expected instead of ''{0}''=识别期待 替代''{0}''【】Identifier expected instead of ''{0}''
Type is unknown for ''{0}''=类型是未知的对于''{0}''【】Type is unknown for ''{0}''
Cannot evaluate qualifier ''{0}''=不能解析限定的''{0}''【】Cannot evaluate qualifier ''{0}''
Method ''{0}'' not found=方法没有找到【】Method ''{0}'' not found
Invalid expression for array dimension: {0}=对于数组维度: {0} 是 无效的表达式【】Invalid expression for array dimension: {0}
Creation of multi-dimensional arrays not supported=多维数组的创建是不支持的【】Creation of multi-dimensional arrays not supported
Anonymous class evaluation is not supported=匿名类解析是不支持的【】Anonymous class evaluation is not supported
Lambdas evaluation is not supported=Lambdas解析是不支持的【】Lambdas evaluation is not supported
Method reference evaluation is not supported=方法引用解析是不支持的【】Method reference evaluation is not supported
No such static field: ''{0}''=没有这个静态字段【】No such static field: ''{0}''
No such instance field: ''{0}''=没有这个实例字段【】No such instance field: ''{0}''
Class or array type expected while evaluating field ''{0}''=类或者数组类型被期待当解析字段''{0}''时【】Class or array type expected while evaluating field ''{0}''
Error evaluating field : ''{0}''=错误解析字段【】Error evaluating field : ''{0}''
Error evaluating method : ''{0}''=错误解析方法：【】Error evaluating method : ''{0}''
Object reference expected=预期对象引用【】Object reference expected
Cannot evaluate: stack frame unavailable=不能解析：堆栈框架无效【】Cannot evaluate: stack frame unavailable
No such static method: ''{0}''=没有这个静态方法【】No such static method: ''{0}''
No such instance method: ''{0}''=没有这个实例方法【】No such instance method: ''{0}''
Array type expected=预期数组类型【】Array type expected
Numeric value expected as array dimension=数字值被期待作为数组维度【】Numeric value expected as array dimension
Cannot evaluate array initializer=不能解析数组初始化【】Cannot evaluate array initializer
Initializer type is not assignment-compatible with array's component type=初始化类型 不是与 数组的组件类型兼容的【】Initializer type is not assignment-compatible with array's component type
Invalid array size=无效数组大小【】Invalid array size
Cannot initialize array=不能初始化数组【】Cannot initialize array
Cannot evaluate class type=不能解析类类型【】Cannot evaluate class type
Cannot resolve constructor ''{0}''=不能解析构造器''{0}''【】Cannot resolve constructor ''{0}''
'this' is not available='this'是不可用的【】'this' is not available
Cannot cast null to ''{0}''=不能类型转换空到''{0}''【】Cannot cast null to ''{0}''
Cannot cast numeric value to ''{0}''=不能类型转换数字值到''{0}''【】Cannot cast numeric value to ''{0}''
Cannot cast boolean value to ''{0}''=不能类型转换布尔值到''{0}''【】Cannot cast boolean value to ''{0}''
Cannot cast char value to ''{0}''=不能类型转换字符值到''{0}''【】Cannot cast char value to ''{0}''
Cannot cast ''{0}'' to ''{1}''=不能类型转换''{0}'' 到''{1}''【】Cannot cast ''{0}'' to ''{1}''
Numeric value expected=预期数字值【】Numeric value expected
Integer value expected=预期整型值【】Integer value expected
Boolean value expected=预期布尔值【】Boolean value expected
Breakpoint does not belong to any class=断点不属于任何类【】Breakpoint does not belong to any class
Source file changed or found source file does not correspond to the breakpoint''s file=源文件更改或发现源文件不符合断点文件【】Source file changed or found source file does not correspond to the breakpoint''s file
The class {0}, found in the project classpath, has no associated source files=在项目类路径中找到的类 {0}，没有相关的源文件【】The class {0}, found in the project classpath, has no associated source files
Paused=暂停【】Paused
MONITOR=监视器【】MONITOR
NOTSTARTED=没有开始的【】NOTSTARTED
SLEEPING=睡眠【】SLEEPING
WAIT=等待【】WAIT
ZOMBIE=僵尸【】ZOMBIE
UNDEFINED=未定义【】UNDEFINED
Scanning: {0}=扫描【】Scanning: {0}
Scanning for classes to reload=扫描 使类重新加载【】Scanning for classes to reload
Reloading classes=重新加载类【】Reloading classes
Breakpoints will be ignored for the obsolete version of the method=断点将被忽略  因它是方法的过时版本【】Breakpoints will be ignored for the obsolete version of the method
Operation canceled=操作取消【】Operation canceled
Operation not supported by VM=操作VM不支持【】Operation not supported by VM
Class definition not found : {0}=类定义没有找到【】Class definition not found : {0}
Verification error : {0}=验证错误: {0}【】Verification error : {0}
Unsupported class version : {0}=不支持类版本 : {0}【】Unsupported class version : {0}
Class format error : {0}=类格式错误: {0}【】Class format error : {0}
Class circularity error : {0}= 类循环错误: {0}【】Class circularity error : {0}
Exception while reloading classes : {0} : {1}=异常当重新加载类: {0} : {1}时【】Exception while reloading classes : {0} : {1}
For {0} of {1} {1,choice, 1#class|2#classes} not all versions were reloaded= 为{0} of {1} {1,choice, 1#class|2#classes}不是所有版本是重新加载【】For {0} of {1} {1,choice, 1#class|2#classes} not all versions were reloaded
Cannot create void value=不能创建空的值【】Cannot create void value
Range specified is too big. {0} needs too much resources to perform requested operation. Are you sure you want to continue?=范围指定太大。{0}需要太多的资源来执行请求的操作。你确定你想继续吗?【】Range specified is too big. {0} needs too much resources to perform requested operation. Are you sure you want to continue?
Range Is Too Big=范围太大【】Range Is Too Big
Start index is less than 0=开始索引比0少【】Start index is less than 0
End index is less than start index=结束索引比开始索引少【】End index is less than start index
Array sta&rt index:=数组开始索引【】Array sta&rt index:
en&d index:=结束索引【】en&d index:
Show &maximum=显示最大【】Show &maximum
array elements=数组元素【】array elements
Autoscroll to new &local variables=自动滚动到新的当地变量【】Autoscroll to new &local variables
S&ynthetic fields=合成字段【】S&ynthetic fields
$val fields as local &variables=$val 字段为本地变量【】$val fields as local &variables
Sort a&lphabetically=按字母顺序排序【】Sort a&lphabetically
Hide &null array elements=隐藏空数组元素【】Hide &null array elements
&Static fields=静态字段【】&Static fields
Static &final fields=静态最终字段【】Static &final fields
Declared &type=声明类型【】Declared &type
Fully &qualified names=完全限定名【】Fully &qualified names
Object &id=对象ID【】Object &id
Show type for strings=显示类型为字符串【】Show type for strings
Enable alternative view for Coll&ections classes=启用替代视图为集合类【】Enable alternative view for Coll&ections classes
Enable 't&oString()' object view:=启用'toString()'对象视图【】Enable 't&oString()' object view:
For all classes that override 'toString()' method=为所有类  它们覆盖了'toString()'方法【】For all classes that override 'toString()' method
For classes from the list:=为类从列表【】For classes from the list:
Show type and object id=显示类型和对象ID【】Show type and object id
Use default renderer=用默认渲染器【】Use default renderer
Use following expression:=用下面的表达式【】Use following expression:
Use list of expressions:=用表达式的列表【】Use list of expressions:
Apply renderer to objects of type (fully-qualified name):=将渲染器应用到类型的对象(完全限定名):【】Apply renderer to objects of type (fully-qualified name):
When rendering a node=当渲染一个节点的时候【】When rendering a node
When expanding a node=当扩展一个节点的时候【】When expanding a node
Test if a node can be expanded (optional):=测试一个节点是否可以扩展(可选):【】Test if a node can be expanded (optional):
Renderer Reference Type=渲染器引用类型【】Renderer Reference Type
Reload classes in &background=重新加载类在后台【】Reload classes in &background
Make project before reloading classes=编译项目在重新加载类前【】Make project before reloading classes
Enable 'JVM will hang' warning=启用'JVM 将要中止'警告【】Enable 'JVM will hang' warning
Reload classes after compilation:=重新加载类在编译之后【】Reload classes after compilation:
&Always=总是【】&Always
&Never=从不【】&Never
Force Class&ic VM for JDK 1.3.x and earlier=强制使用经典VM 为JDK 1.3.x 和早些时候 【】Force Class&ic VM for JDK 1.3.x and earlier
Disable JIT=禁用JIT【】Disable JIT
&Socket=套接字【】&Socket
Ski&p synthetic methods=跳过合成方法【】Ski&p synthetic methods
Skip &constructors=跳过构造器【】Skip &constructors
Skip class l&oaders=跳过类加载器【】Skip class l&oaders
Skip simple &getters=跳过简单获得【】Skip simple &getters
Do not step &into the classes=不进入类【】Do not step &into the classes
Evaluate finally blocks on pop frame and early return:=评估最后代码块在弹出框架和早期的返回Evaluate finally blocks on pop frame and early return:
N&ever=从不【】N&ever
Show source file name=显示源文件名字Show source file name
Show class name=显示类名【】Show class name
Show package name=显示包名【】Show package name
Show &line number=显示行号【】Show &line number
Move current thread to the top=移动当前线程到顶部【】Move current thread to the top
Show stack &frames for synthetic methods=显示堆栈框架为合成方法【】Show stack &frames for synthetic methods
Show thread &groups=显示线程组【】Show thread &groups
Java Data Type Renderers=java数据类型渲染器【】Java Data Type Renderers
Renderer name:=渲染器名字【】Renderer name:
No renderers=没有渲染器【】No renderers
Add new renderer=添加新的渲染器【】Add new renderer
Remove selected renderer=移除选择的渲染器【】Remove selected renderer
Copy selected renderer=复制选择的渲染器【】Copy selected renderer
Move renderer Up=移动渲染器向上【】Move renderer Up
Move renderer Down=移动渲染器向下【】Move renderer Down
Enter the expression=输入表达式【】Enter the expression
daemon=守护【】daemon
blocks {0}=块{0}【】blocks {0}
waiting for {0} to release lock on {1}=等待 {0} 释放锁{1}【】waiting for {0} to release lock on {1}
locked {0}=锁【】locked {0}
Incompatible thread state: thread not suspended=不兼容的线程状态:线程没有暂停【】Incompatible thread state: thread not suspended
&Copy text to clipboard=复制文本到剪切板【】&Copy text to clipboard
Expression Evaluation=表达式评估【】Expression Evaluation
&Expression:=表达式【】&Expression:
Debugger Settings=调试器设置【】Debugger Settings
JPDA Libraries Missing=JPDA库缺少【】JPDA Libraries Missing
To get JPDA libraries please visit=要获得JPDA库，请访问【】To get JPDA libraries please visit
Cannot start debugger: debug libraries are missig from JDK home=不能启动调试器:调试库是来自JDK的权限【】Cannot start debugger: debug libraries are missig from JDK home
Hot Swap=热交换【】Hot Swap
Hot Swap failed=热交换失败【】Hot Swap failed
Hot Swap completed with warnings=热交换完成 带有警告【】Hot Swap completed with warnings
Add Instance Filter=添加实例过滤器【】Add Instance Filter
Enter instance ID:=输入实例ID【】Enter instance ID:
Instance ID should be a numeric value of type 'long'=实例ID应该是类型“long”类型的数值【】Instance ID should be a numeric value of type 'long'
Execution line=执行行【】Execution line
Reload Changed Classes for {0}=重新加载改变的类为 {0}【】Reload Changed Classes for {0}
Some classes have been changed. Reload changed classes now?=有些类已经改变了。重载改变类呢?【】Some classes have been changed. Reload changed classes now?
Would you like to reload changed classes anyway?=你想重新加载修改过的类吗?【】Would you like to reload changed classes anyway?
Code Fragment Evaluation=代码片段评估【】Code Fragment Evaluation
Statements to &evaluate:=语句评估 【】Statements to &evaluate:
Fully qualified name of a class:=完全合格的类名:【】Fully qualified name of a class:
Field name:=字段名Field name:
Choose Field's class=选择字段的类【】Choose Field's class
Any exception=任何异常【】Any exception
Enable=启用【】Enable
Disable=禁用【】Disable
<Default>=默认【】<Default>
Class Filters=类过滤器【】Class Filters
Class Exclusion Filters=类排除过滤器【】Class Exclusion Filters
Instance Filters=实例过滤器【】Instance Filters
''{0}''=【】''{0}''
Java Exception Breakpoints=java异常断点【】Java Exception Breakpoints
Java Field Watchpoints=java自动观察点【】Java Field Watchpoints
Java Line Breakpoints=java行断点【】Java Line Breakpoints
Java Method Breakpoints=java方法断点【】Java Method Breakpoints
Breakpoint Condition Error=断点条件错误【】Breakpoint Condition Error
Breakpoint Action Error=断点动作错误【】Breakpoint Action Error
Unable to evaluate the expression=不能评估表达式【】Unable to evaluate the expression
&Pass count:=通过数【】&Pass count:
C&lass filters:=类过滤器:【】C&lass filters:
&Instance filters:=实例过滤器【】&Instance filters:
Co&ndition:=条件【】Co&ndition:
Thread=线程【】Thread
Log evaluated &expression=日志评估表达式【】Log evaluated &expression
Warning : {0}=警告 : {0}【】Warning : {0}
Log message=日志消息【】Log message
Log expression=日志表达式【】Log expression
Condition=条件【】Condition
Pass count=通过数【】Pass count
Class filters=类过滤器:【】Class filters
Instance filters:=实例过滤器:【】Instance filters:
Breakpoint at line {0}=断点在行{0}【】Breakpoint at line {0}
No class name for exception breakpoint=没有异常断点的类名【】No class name for exception breakpoint
Exception ''{0}'' occurred in thread ''{1}'' at {2}({3}:{4,number,#})==异常''{0}''发生在线程''{1}'' 在 {2}({3}:{4,number,#})【】Exception ''{0}'' occurred in thread ''{1}'' at {2}({3}:{4,number,#})
Exception ''{0}'' occurred at {1}({2}:{3,number,#})=异常''{0}''发生在{1}({2}:{3,number,#})【】Exception ''{0}'' occurred at {1}({2}:{3,number,#})
Enter Exception Class=输入异常类【】Enter Exception Class
Caught exceptio&n=捕获异常【】Caught exceptio&n
Uncaught excepti&on=未捕获异常【】Uncaught excepti&on
Cannot find field ''{0}'' in  class ''{1}''=不能找到字段'{0}''在类''{1}''中【】Cannot find field ''{0}'' in  class ''{1}''
Cannot add watchpoint: a class name is not specified=不能添加watchpoint:没有指定类名【】Cannot add watchpoint: a class name is not specified
Cannot add watchpoint: a field name is not specified=不能添加watchpoint:字段名没有指定【】Cannot add watchpoint: a field name is not specified
Field acce&ss=字段访问【】Field acce&ss
Field &modification=字段修改【】Field &modification
Watch=观察【】Watch
No executable code found at line {0} in class {1}=在第 {1}类的第{0}行中没有可执行的代码【】No executable code found at line {0} in class {1}
Line number is invalid=行号是无效的【】Line number is invalid
Line {0}=行{0}【】Line {0}
Line {0} in {1}=行 {0}在 {1}中【】Line {0} in {1}
Method not found in class {0}=方法没有找到在类{0}中【】Method not found in class {0}
Method entr&y=方法进入【】Method entr&y
Method e&xit=方法退出【】Method e&xit
S&witch View=切换视图【】S&witch View
List View=列表视图【】List View
Tree View=树视图【】Tree View
&Flatten packages=平 包【】&Flatten packages
Group by cl&asses=分组用类【】Group by cl&asses
Group by me&thods=分组用方法【】Group by me&thods
Cannot evaluate descendants, object was collected. {0}=不能求子节点的值，对象被收集。{0}【】Cannot evaluate descendants, object was collected. {0}
Invalid field name ''{0}''=无效字段名''{0}''【】Invalid field name ''{0}''
Debug info not available=调试信息不可用【】Debug info not available
Variables debug info not available=变量调试信息不可用【】Variables debug info not available
All elements in range ({0}, {1}) are null=所有元素在范围({0}, {1}) 都是空【】All elements in range ({0}, {1}) are null
All elements are null=所以元素是空【】All elements are null
Class has no fields=类没有字段【】Class has no fields
No fields to display=没有字段显示【】No fields to display
Object has been garbage collected during method invocation=对象在方法调用期间被垃圾收集【】Object has been garbage collected during method invocation
Thread is running=线程正在运行【】Thread is running
Thread has no frames=线程没有框架【】Thread has no frames
Target VM is not paused by breakpoint request. Evaluation of methods is not possible in this mode=目标VM不会被断点请求暂停。在这种模式下，对方法的评估是不可能的。【】Target VM is not paused by breakpoint request. Evaluation of methods is not possible in this mode
Thread ''{0}'' has been garbage-collected= 线程''{0}''被垃圾收集【】Thread ''{0}'' has been garbage-collected
Object reference expected instead of{0}=对象引用，而不是{0}【】Object reference expected instead of{0}
Invalid type name: ''{0}''=无效类型名：''{0}''【】Invalid type name: ''{0}''
Node &descendands expression:=节点子节点 表达式【】Node &descendands expression:
'Node &has descendands' expression (optional):=节点有子节点 表达式(可选):【】'Node &has descendands' expression (optional):
Node label expression=节点标签表达【】Node label expression
Node de&scendants:=节点子节点【】Node de&scendants:
There is no executable code at {0}:{1}=在{0}:{1}中没有可执行代码【】There is no executable code at {0}:{1}
Local variable declarations are not supported here=这里不支持局部变量声明。【】Local variable declarations are not supported here
Invalid declaration : {0} Only local variable declarations are supported=无效声明:{0}只支持局部变量声明。【】Invalid declaration : {0} Only local variable declarations are supported
JDK is not specified=JDK没有指定【】JDK is not specified
Debugging is not supported for JDK {0}=JDK {0}不支持调试【】Debugging is not supported for JDK {0}
Invalid JDK home directory specified.{0}=指定的无效JDK主目录.{0}【】Invalid JDK home directory specified.{0}
Debug libraries are missig from JDK home.nIn order for debugger to start, the libraries should be installed.nPlease visit http://java.sun.com/products/jpda=调试库是来自JDK的权限。为了启动调试器，应该安装库。请访问http://java.sun.com/products/jpda【】Debug libraries are missig from JDK home.nIn order for debugger to start, the libraries should be installed.Please visit http://java.sun.com/products/jpda
No such field {0} in {1}=没有这个字段{0} 在 {1}中【】No such field {0} in {1}
File ''{0}'' not found; breakpoints for this file will be ignored=文件''{0}''未找到;该文件的断点将被忽略【】File ''{0}'' not found; breakpoints for this file will be ignored
Cannot load file ''{0}''; breakpoints for this file will be ignored=无法加载文件''{0}'';该文件的断点将被忽略【】Cannot load file ''{0}''; breakpoints for this file will be ignored
Cannot substitute ''{0}'' into ''{1}'' as ''this''=不能替代''{0}''在''{1}''里 作为''this''【】Cannot substitute ''{0}'' into ''{1}'' as ''this''
Invalid type name ''{0}''=无效的类型名称''{0}''【】Invalid type name ''{0}''
Cannot create expression from code fragment=不能从代码片段中创建表达式。【】Cannot create expression from code fragment
Invalid local variable name ''{0}''=无效的本地变量名''{0}''【】Invalid local variable name ''{0}''
Inconsistent debug information=不一致的调试信息【】Inconsistent debug information
Internal exception - invalid stackframe=内部异常 —— 无效的堆栈帧【】Internal exception - invalid stackframe
Evaluation of {0}=评价{0}【】Evaluation of {0}
Click here to view object tree=点击这里查看对象树【】Click here to view object tree
Port is not specified=端口没有被指定【】Port is not specified
Cannot invoke method: the invocation thread has been collected=不能调用方法:已经收集了调用线程【】Cannot invoke method: the invocation thread has been collected
Method to Step Into=方法进入【】Method to Step Into
Shows or hides 'watches' pane=显示或隐藏“观察”面板【】Shows or hides 'watches' pane
Hide Watches=隐藏观察【】Hide Watches
Show Watches=显示观察【】Show Watches
Enables watching last executed method return value=允许观察最后执行的方法返回值【】Enables watching last executed method return value
Show Method Return Values=显示方法返回值【】Show Method Return Values
Stop watching method return values=停止观察方法返回值【】Stop watching method return values
Feature is not supported by the target VM=特性不受目标VM的支持【】Feature is not supported by the target VM
Auto-Variables Mode=自动变量模式【】Auto-Variables Mode
Show only variables used near the execution point=只显示在执行点附近使用的变量【】Show only variables used near the execution point
After breakpoint was hit:=断点之后是碰撞【】After breakpoint was hit:
Frames not available for unsuspended thread=框架不可用为未暂停线程【】Frames not available for unsuspended thread
Debug info might be corrupt: {0}=调试信息可能是坏了:{0}【】Debug info might be corrupt: {0}
Kill Process=杀死进程【】Kill Process
Forcibly terminate debugged application=强行终止调试应用程序【】Forcibly terminate debugged application
Cannot resolve method return type: {0}=无法解析方法返回类型: {0}【】Cannot resolve method return type: {0}
Group by class=分组用类【】Group by class
Context has changed, operation is not possible=环境已经改变，操作是不可能的【】Context has changed, operation is not possible
Alternative source available for the class {0}=供选择的源代码可用为类{0}【】Alternative source available for the class {0}
Unknown=未知
<html><a href="#">Set up HTTP proxy settings</a></html>=<html><a href="#">设置http代理设置【】Set up HTTP proxy settings</a></html>
JetBrains Account=JetBrains账户【】JetBrains Account
Error description (optional):=错误描述（可选）【】Error description (optional):
&Use JetBrains Account=用JetBrains账户【】&Use JetBrains Account
IDE Error Occurred=集成开发环境错误发生【】IDE Error Occurred
See Details and Submit Report=查看细节 提交报告【】See Details and Submit Report
Submitting Error Report=提交错误报告
Comments=注释
(no errors)=(没有错误)
Usage: {0} diff <left file> <right file> [<base file>]=使用:{0}比较 <file1> <file2>
Diff manager cannot compare ''{0}'' and ''{1}''=无法比较''{0}''和''{1}''
<Not available>=<无法使用>
Can't Launch Diff Tool=无法启动比较工具
All hunks resolved=解决所有的区块
Can''t apply {0, number} {0, choice, 1#hunk|2#hunks}=【】Can''t apply {0, number} {0, choice, 1#hunk|2#hunks}
Can''t apply {0, number} of {1, number} hunks=【】Can''t apply {0, number} of {1, number} hunks
Are you sure you want to discard your changes and accept {0, choice, 0#left|1#right} side?=你确定你想要丢弃你的改变并接受 {0, choice, 0#left|1#right}吗?【】Are you sure you want to discard your changes and accept {0, choice, 0#left|1#right} side?
All changes have been processed.<br><a href="">Save changes and finish merging</a>=所有更改已被处理。<br><a href="">保存更改并完成合并</a>
(Read-only)=(只读)
<html>(The higher the value is the slower it works.<br> Values greater than 0 cause looking for more abstract code structure)</html>=<html>(越高的值运行越慢.<br>大于0的值)</html>
Ignore duplicated code in sources marked as generated=忽略生成的源标记中的重复代码
Applet=小应用程序
Application=应用程序
No junit.jar=没有junit.jar
No junit.jar in {0}=没有junit.jar在{0}
<Click to see difference>=<点击查看差异>
{0} kb={0}kb
{0} Mb={0}Mb
{0} s={0}s
Running=运行
Left: {0}=左:{0}
I:{0}=一:{0}
{0} of {1}    Failed: {2}={0} of {1}    失败的: {2}
Show Passed=隐藏已通过的
Show passed tests=隐藏通过了测试
Sort tests or suites by duration=按时间排序测试或程序组
<No Name>=<没有名字的>
Temporary configurations limit:=临时配置限制:【】Temporary configurations limit:
&URL=URL
Packa&ge:=包:
M&ethod:=方法:
&Class:=类:
C&lass=类
Me&thod=方法
default package=默认包
<no-name>=<无名>
<html><body>For JDK 1.3.x or earlier</body></html>=JDK 1.3.x或更早的
<html><body>For JDK 1.4.x</body></html>=JDK 1 4 x <
{0} Kb={0}Kb
Show console when a message is printed to standard output stream=显示控制台当标准变更
Show console when a message is printed to standard error stream=显示控制台当标准误差的变化
All in {0}=所有在{0}
{0} in {1}={0}在{1}
User-defined template path is empty=用户定义的tempate路径是空的
User-defined template file ''{0}'' is not found=定义的tempate文件"{0}"是没有找到
Scheduled=计划【】Scheduled
Timed out=超时【】Timed out
Infrastructure failure=基础设施故障【】Infrastructure failure
Triggering error=触发错误【】Triggering error
Multiple carets=多重插入符号
Open in Find Window=打开查找窗口
Replace Usage {0} of {1} Found - {2}=替换{1}的使用{0}
Find Usages Of=查找{0}的使用
{0,choice,0#No|1#{0}} {0,choice,0#occurrences|1#occurrence|2#occurrences} replaced={0,choice,0#No|1#{0}} {0,choice,0#occurrences|1#occurrence|2#occurrences} 已替换
Match &case=区分大小写
Wo&rds=整字匹配
Re&gex=正则表达式
In &Project=在项目
&Module=模块
&Directory=目录
Internet Explorer=【】Internet Explorer
Safari=【】Safari
Opera=【】Opera
Firefox=【】Firefox
Chrome=【】Chrome
Support screen readers (requires restart)=支持屏幕阅读器 (需要重新启动)
No messages=没有消息
Production=产品
(press {0} to copy this information to clipboard)=(按 {0} 将此信息复制到剪贴板)
n/a=不可用
{0} ({1} {1,choice,0#items|1#item|2#items} in {2} {2,choice,0#files|1#file|2#files})={0}({1}个项, 位于{2}个文件)
Found {0} TODO {0,choice,0#items|1#item|2#items} in {1} {1,choice,0#files|1#file|2#files}=找到{0}条TODO项, 位于{1}个文件
{0} (no items found)={0}(没找到项)
{0} (found {1} {1,choice,1#item|2#items})={0}(找到{1}个项)
{0} ({1} {1, choice, 1#item|2#items})={0}({1}个项)
IntelliJ=intellij
Darcula=Darcula黑色主题
and=和
{0,choice,1#directory|2#directories}=个目录
{0,choice,1#file|2#files}=个文件
{0,choice,1#symlink|2#symlinks}=个符号链接
{0,choice,1#class|2#classes}=个类
{0,choice,1#interface|2#interfaces}=个接口
{0,choice,1#method|2#methods}=个方法
{0,choice,1#field|2#fields}=个字段
{0,choice,1#package|2#packages}=个包
({0} {0,choice,1#directory|2#directories})=个目录
{0,choice,1#property|2#properties}=个属性值
{0,choice,1#type parameter|2#type parameters}=个类型参数
of interface=接口的
of class=类的
You can evaluate the new version for {0} days, or buy it online=您可以评估新版本为 {0} 天，或在网上购买它。
You have a perpetual fallback license for the new version=您有新版本的永久后备许可证。
You can use the new version until your subscription expires on {0}=您可以使用新版本，直到您的订阅在 {0} 上过期为止。
Fetching available updates for external components=获取外部组件的可用更新
Please note that this channel is less stable than your current one=请注意，这个通道比你当前的不太稳定。
Update channel switched to ''{0}''=更新频道切换到 ''{0}''【】Update channel switched to ''{0}''
<N/A>=<不可用>
Loading Project From Network=从网络加载项目
Loading File From Network=从网络加载文件
Unauthorized Operation=未经授权的操作
The command line launcher is outdated. Please refresh it (via Tools | Create Command-line Launcher)=命令行启动已经过时。请刷新（通过工具|创建命令行启动）。
''{0}'' API is requested. Do you trust ''{1}''?=''{0}'' API 请求. 你信任 ''{1}''?
field=字段
Casting <code>{0}</code> to <code>#ref</code> #loc may produce <code>java.lang.ClassCastException</code>=铸造<代码>{0}< /代码>到<代码>
Condition <code>#ref</code> #loc is redundant and can be replaced with <code>!= null</code>=条件<代码>
Condition <code>#ref</code> #loc is always <code>{0}</code>=条件<代码>
Condition <code>#ref</code> #loc is always <code>{0}</code> when reached=条件<代码>
Field annotated as @NotNull is implicitly initialized with <code>null</code>=字段注释为@NotNull，使用null进行隐式初始化【】Field annotated as @NotNull is implicitly initialized with <code>null</code>
<html>Report @NotNull &parameters overriding @Nullable and <br>@Nullable methods overriding @NotNull</html>=<html>报告 @NotNull 参数覆盖 @Nullable 和<br> @Nullable 方法覆盖 @NotNull </html>
Report non-&annotated parameters or methods overriding @NotNull=报告未注解的参数或方法重写 @NotNull
Report non-annotated &setter parameters or getters of annotated fields=报告非注释setter参数或getter的注释字段
(INVALID)=(无效)
{0, choice, 0#|1#(1 item)|2#({0,number,integer} items)}={0,选择,0
Suppressing inspection ''{0}''=抑制检查 ''{0}''【】Suppressing inspection ''{0}''
HTML problems in Javadoc (DocLint)=Javadoc中的HTML问题(文档线头)【】HTML problems in Javadoc (DocLint)
{0} is missing after @{1} tag={0}在 @{1} 标记之后丢失
Class/method reference, quoted text, or HTML link are expected after @see tag=类/方法引用，引用文本或HTML链接，预计后 @see tag
''{0}'' Inspection on {1}=''{0}'' 检查 {1}
Scopes and Se&vereties:=范围和Severeties:
Remove User Defined Entry Points=删除用户定义的入口点
Annotate overridden method parameters=注释重写方法参数
Inline parameter as constant value=内联参数为常量值
Illegal character=非法字符
Access can be tightened=可以加强访问
Preparing to Apply Fix=准备申请修复
Annotate method=标注方法
Inspection Tool Window=检查工具窗口
Inspection ''{0}'' has no configurable options=检查“{0}”没有可配置的选项
&Start=开始
&Whole project=整个项目
&Package{0}=包{0}
Include subpackages=包括子包
Output directory is not specified=未指定输出目录。
Open &generated documentation in browser=在浏览器中打开生成的文档
&Maximum heap size (Mb):=最大堆大小 (Mb):
Output &directory:=输出目录:
Document these tags=记录这些标签
deprecated list=不推荐列表
Basic options=基本选项
Separate index per letter=单独的字母索引
Generate index=生成索引
Generate navigation bar=生成导航栏
Generate hierarchy tree=生成层次树
&Other command line arguments:=其他命令行参数:
Generation options for javadoc not specified=Javadoc未指定生成选项
Selected scope contain no Java classes=选定范围不包含Java类
Browse Output directory=浏览输出目录
&Locale:=语言环境(&L):
Automatically insert closing tag=自动插入关闭标签
<No name>=<没有名字>
{0}Button{1} Click={0}按钮{1}单击
{0}Button{1} Double-Click={0}按钮{1}双击
{0}Wheel up={0}滚轮向上
{0}Wheel down={0}滚轮向下
<html><center>Enter a shortcut here: <br>single or double-click, scroll the wheel,<br> modify with Ctrl, Alt and Shift=<html><center>在这里输入一个快捷方式:单或双击，滚动滚轮，用Ctrl+Alt和Shift进行修改【】Enter a shortcut here: <br>single or double-click, scroll the wheel,<br> modify with Ctrl, Alt and Shift
[JRT]=java运行时【】[JRT]
[Java Run-time Modules]=java运行时模块【】[Java Run-time Modules]
You need to run IDEA on Java 8 to be able to use modular JDK. Sorry=您需要在Java 8上运行想法才能使用模块化JDK。对不起。【】You need to run IDEA on Java 8 to be able to use modular JDK. Sorry
Unsupported JDK ''{0}'' detected=不支持JDK ''{0}'' 检测到【】Unsupported JDK ''{0}'' detected
Unmark as {0}=取消标记为{0}
Cancel Exclusion=取消排除
Unmark Roots=取消标记根
Text//Default text=默认文本
Text//Folded text=折叠的文本
Text//Deleted text=删除的文字
Search Results//Search result=搜寻结果
Search Results//Search result (write access)=搜索结果(写访问)
Search Results//Text search result=文本搜索结果
Templates//Template variable=模板变量
Braces and Operators//Operator sign=运算符
Class Fields//Instance field=实例字段
Class Fields//Instance final field=类字段//实例化final字段
Class Fields//Static field=静态字段
Class Fields//Constant (static final field)=常数(静态final字段)
Parameters//Parameter=参数
Methods//Method call=方法调用
Methods//Method declaration=方法声明
Methods//Constructor call=构造函数调用
Methods//Constructor declaration=构造函数声明
Methods//Static method=静态方法
Code//Matched brace=匹配括号
Code//Unmatched brace=不匹配
VCS Annotations//Background color #{0}=VCS 的注释//背景色 #{0}
ROOT GROUP=根组【】ROOT GROUP
Errors and Warnings//Weak Warning=弱警告
Errors and Warnings//Duplicate from server=从服务器复制
ANSI Colors//Black=ANSI黑
ANSI Colors//Red=ANSI红
ANSI Colors//Green=ANSI绿
ANSI Colors//Yellow=ANSI黄
ANSI Colors//Blue=ANSI蓝
ANSI Colors//Magenta=ANSI红紫
ANSI Colors//Cyan=ANSI青
ANSI Colors//Gray=ANSI灰
ANSI Colors//Dark Gray=ANSI深灰色
ANSI Colors//Bright Red=ANSI鲜红
ANSI Colors//Bright Green=ANSI明亮的绿色
ANSI Colors//Bright Yellow=亮黄色
ANSI Colors//Bright Blue=ANSI明亮的蓝色
ANSI Colors//Bright Magenta=ANSI明亮洋红色
ANSI Colors//Bright Cyan=ANSI亮青色
ANSI Colors//White=ANSI白色
Code Style=代码风格
Todo=要做【】Todo
Debugger=调试器
Debugger: Java=调试器: Java
Java EE External Resources=Java EE 的外部资源
<unknown scope>=<未知范围>
{0}() in {1}={0}() 在 {1}
(in {0})=(在{0})
protected=受保护
private=私有
public=公共
final=最终
Add Import=添加导入
Class to Import=导入类
Access static via class reference=通过访问类引用静态
Access static ''{1}.{0}'' via class ''{2}'' reference=访问静态''{1}.{0}'' 通过 类''{2}''引用【】Access static ''{1}.{0}'' via class ''{2}'' reference
Add Default Constructor=默认构造函数
Add {0} no-args constructor to {1}=添加{0}没有参数构造器到{1}【】Add {0} no-args constructor to {1}
Add exception to catch clause=添加例外的catch子句
Method Is Inherited=方法继承
Add {0, choice, 0#exception|2#exceptions} to method signature=添加{0, choice, 0#exception|2#exceptions} 到方法签名【】Add {0, choice, 0#exception|2#exceptions} to method signature
Add exception to method signature=方法签名添加异常
Add method body=添加方法体
Add Method=添加方法
Add Method ''{0}'' to Class ''{1}''=添加方法''{0}''到类''{1}''
Add missing new expression=添加缺失的新表达式
Add ''new {0}[]''=添加 ''new {0}[]''
Add 'return' statement=添加'return'语句
Add runtime exception(s) to method signature=增加运行时异常方法签名
Add Runtime Exception to Method Signature=添加运行时异常到方法签名
Add TypeCast=添加 TypeCast
Add {0} to custom tags=添加 {0} 到自定义标记
Fix Javadoc=修复java文档【】Fix Javadoc
Adjust Package Name=调整包名称
Set package name to ''{0}''=将包名设置为''{0}''
Bring Variable to Scope=带变量到范围【】Bring Variable to Scope
Bring ''{0}'' into scope=带'{0}'在范围中【】Bring ''{0}'' into scope
Cast {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} parameter to ''{1}''=【】Cast {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} parameter to ''{1}''
Cast parameter to ''{0}''=类型转换参数为【】Cast parameter to ''{0}''
Add explicit type arguments to {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} argument=添加显式的类型参数【】Add explicit type arguments to {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} argument
Add explicit type arguments=添加显式的类型参数【】Add explicit type arguments
Change signature of ''{0}'' to match ''{1}''=改变''{0}''的签名匹配''{1}''【】Change signature of ''{0}'' to match ''{1}''
Change class signature=改变类签名【】Change class signature
Change bound field type=改变绑定字段类型【】Change bound field type
Change ''{0} {2}'' to ''{1} {2}''=改变 ''{0} {2}'' 为 ''{1} {2}''【】Change ''{0} {2}'' to ''{1} {2}''
Change GUI component type=改变GUI组件类型【】Change GUI component type
Change method signature from usage=改变方法签名从用法【】Change method signature from usage
Change signature of ''{0}'' to ''{1}({2})''=改变''{0}''的签名为''{1}({2})''【】Change signature of ''{0}'' to ''{1}({2})''
Searching For Usages=搜索用法【】Searching For Usages
Create Class from New=创建类从新建【】Create Class from New
Create class ''{0}''=创建类【】Create class ''{0}''
Create Class from Usage=创建类从用法【】Create Class from Usage
Create {0} ''{1}''=创建【】Create {0} ''{1}''
Create inner {0} ''{1}''=创建内部的【】Create inner {0} ''{1}''
Create Constant From Usage=创建常量从用法【】Create Constant From Usage
Create constant field ''{0}''=创建常量字段【】Create constant field ''{0}''
Create enum constant ''{0}''=创建枚举常量【】Create enum constant ''{0}''
Create Constructor from New=创建构造函数从新建【】Create Constructor from New
Create constructor=创建构造函数【】Create constructor
Create Constructor From super() Call=创建构造函数从super()调用【】Create Constructor From super() Call
Create Constructor From this() Call=创建构造函数从this()调用【】Create Constructor From this() Call
Create constructor in ''{0}''=创建构造函数''{0}''在【】Create constructor in ''{0}''
Create constructor matching super=创建构造器匹配父类【】Create constructor matching super
Choose Super Class Constructors=选择父类构造器【】Choose Super Class Constructors
Create field from Usage=创建字段从用法【】Create field from Usage
Create field ''{0}''=创建字段【】Create field ''{0}''
Choose Target Class=关闭目标类【】Choose Target Class
Create {0}=创建【】Create {0}
Please Correct "New Method Body" Template=请纠正“新方法主体”模板【】Please Correct "New Method Body" Template
Cannot create {0}.java in {1}: {2}=不能创建{0}.java在{1}: {2}【】Cannot create {0}.java in {1}: {2}
File Creation Failed=文件创建失败【】File Creation Failed
Cannot create {0} in {1}: {2}=不能创建{0}在{1}: {2}【】Cannot create {0} in {1}: {2}
Package Creation Failed=包创建失败【】Package Creation Failed
Create Accessor for Unused Field=创建访问方法为未使用的字段【】Create Accessor for Unused Field
Create getter and setter for ''{0}''=创建获得方法和设置方法为''{0}''【】Create getter and setter for ''{0}''
Create Local from Usage=创建局部从用法【】Create Local from Usage
Create local variable ''{0}''=创建局部变量【】Create local variable ''{0}''
Create Local Var from instanceof Usage=创建局部变量从【】Create Local Var from instanceof Usage
Insert ''({0}){1}'' declaration=插入''({0}){1}'' 声明【】Insert ''({0}){1}'' declaration
Create method from usage=创建方法从用法【】Create method from usage
Create method ''{0}''=创建方法【】Create method ''{0}''
Create abstract method ''{0}''=创建抽象方法【】Create abstract method ''{0}''
Create parameter from Usage=创建参数从用法【】Create parameter from Usage
Create parameter ''{0}''=创建参数【】Create parameter ''{0}''
Create property From Usage=创建属性从用法【】Create property From Usage
Create Getter=创建获得方法【】Create Getter
Create Setter=创建设置方法【】Create Setter
Defer final assignment with temp=延迟最后的赋值用临时【】Defer final assignment with temp
Defer assignment to ''{0}'' using temp variable=延迟赋值到''{0}'' 用临时变量【】Defer assignment to ''{0}'' using temp variable
Delete Catch=删除捕获【】Delete Catch
Delete catch for ''{0}''=删除捕获为''{0}''【】Delete catch for ''{0}''
Delete method body=删除方法体【】Delete method body
Enable 'Settings|Code Style|Imports|Optimize imports on the fly'=启用 设置，代码样式，导入，动态优化导入【】Enable 'Settings|Code Style|Imports|Optimize imports on the fly'
Generalize Catch=生成捕获【】Generalize Catch
Generalize catch for ''{0}'' to ''{1}''=生成捕获为''{0}'' 到 ''{1}''【】Generalize catch for ''{0}'' to ''{1}''
Generify File=生成文件【】Generify File
Try to generify ''{0}''=尝试生成 ''{0}''【】Try to generify ''{0}''
Import class=导入类【】Import class
Insert new=插入新建【】Insert new
Base Ctr call=基础控制调用【】Base Ctr call
Insert 'super();'=插入“super();【】Insert 'super();'
Make Class an Interface=使类成为接口【】Make Class an Interface
Make ''{0}'' an interface=使 ''{0}'' 成为接口【】Make ''{0}'' an interface
Make ''{0}'' a class=使 ''{0}'' 成为类【】Make ''{0}'' a class
Make vararg parameter last=使可变长度参数最后【】Make vararg parameter last
Move ''{0}'' to the end of the list=移动 ''{0}'' 到列表结尾【】Move ''{0}'' to the end of the list
Fix Parameter Type=修复参数类型【】Fix Parameter Type
Make ''{0}'' take parameter of type ''{1}'' here=使 ''{0}'' 带有类型''{1}''的参数在这【】Make ''{0}'' take parameter of type ''{1}'' here
Fix Return Type=修复返回类型【】Fix Return Type
Fix Throws List=修复抛出列表【】Fix Throws List
Add ''{0}'' to ''{1}'' throws list=添加 ''{0}'' 到''{1}''抛出列表【】Add ''{0}'' to ''{1}'' throws list
Remove ''{0}'' from ''{1}'' throws list=移除 ''{0}''从 ''{1}''抛出列表【】Remove ''{0}'' from ''{1}'' throws list
Fix Modifiers=修复修饰符【】Fix Modifiers
Do you want to change inheritors' visibility to visibility of the base method?=你想要改变继承的可见性吗?【】Do you want to change inheritors' visibility to visibility of the base method?
Change Inheritors=改变继承者【】Change Inheritors
Move Class in Extend list=移动类在扩展列表中【】Move Class in Extend list
Move bound ''{0}'' to the beginning of the bounds list of type parameter ''{1}''=将''{0}''移动到类型参数''{1}''的边界列表的开头【】Move bound ''{0}'' to the beginning of the bounds list of type parameter ''{1}''
Move Catch Up=向上移动捕获【】Move Catch Up
Move catch for ''{0}'' before ''{1}''=移动捕获为''{0}''在''{1}''之前【】Move catch for ''{0}'' before ''{1}''
Move Class to Separate File=移动类到分离文件【】Move Class to Separate File
Move class ''{0}'' to ''{0}.java''=移动类''{0}''到''{0}.java''【】Move class ''{0}'' to ''{0}.java''
Move Class to Package=移动类到包【】Move Class to Package
Move to package ''{0}''=移动类到包''{0}''【】Move to package ''{0}''
Negation Broader Scope=否定范围更广的范围【】Negation Broader Scope
Change to ''!({0})''=改变成【】Change to ''!({0})''
Remove qualifier=移除限定符【】Remove qualifier
Remove redundant 'else'=移除冗余的 'else'【】Remove redundant 'else'
Remove unused parameter=移除没有使用的参数【】Remove unused parameter
Remove parameter ''{0}''=移除参数 ''{0}''【】Remove parameter ''{0}''
Remove unused variable=移除没有使用的变量【】Remove unused variable
Remove variable ''{0}''=移除变量 ''{0}''【】Remove variable ''{0}''
Remove field ''{0}''=移除 字段''{0}''【】Remove field ''{0}''
Rename Wrong Reference=重命名错误引用【】Rename Wrong Reference
Rename reference=重命名引用【】Rename reference
Reuse variable declaration=重新用变量声明【】Reuse variable declaration
Reuse previous variable ''{0}'' declaration=重新用变量''{0}''声明【】Reuse previous variable ''{0}'' declaration
Safe delete ''{0}''= 安全删除''{0}''【】Safe delete ''{0}''
Setup JDK Location=安装JDK位置【】Setup JDK Location
Setup JDK=安装JDK【】Setup JDK
Side Effects Found=发现副作用【】Side Effects Found
Simplify boolean expression=简化布尔表达式【】Simplify boolean expression
Simplify ''{0}'' to {1}=简化''{0}''成 {1}【】Simplify ''{0}'' to {1}
Fix Super Method Return Type=修正超方法返回类型【】Fix Super Method Return Type
Surround with try/catch=包围用try/catch【】Surround with try/catch
Make Final=使得最终的【】Make Final
Make {0} final=使得{0}最终的【】Make {0} final
Transform {0} into final one element array=将{0}转换为最后一个元素数组【】Transform {0} into final one element array
Fix Variable Type=修复变量类型【】Fix Variable Type
Change {0} ''{1}'' type to ''{2}''=变量{0} ''{1}''类型成''{2}''【】Change {0} ''{1}'' type to ''{2}''
Wrap Expression=包裹表达式【】Wrap Expression
Wrap using ''{0}''= 包裹用''{0}''【】Wrap using ''{0}''
&Transform=变换【】&Transform
<html><body>\  There are possible side effects found in expressions assigned to the variable ''{0}''<br>\  You can:<ul><li><b>Remove</b> variable usages along with all expressions involved</li>\  </body></html>=<html><body>\ 在变量 ''{0}''的表达式中有可能出现的副作用。您可以将变量用法和所有表达式一起删除【】 There are possible side effects found in expressions assigned to the variable ''{0}''<br>\  You can:<ul><li><b>Remove</b> variable usages along with all expressions involved</li>\  </body></html>
Change Parameter Class=改变参数类【】Change Parameter Class
Extend Class from=扩展类从【】Extend Class from
Make ''{0}'' extend ''{1}''=使得''{0}''继承 ''{1}''【】Make ''{0}'' extend ''{1}''
Make ''{0}'' not extend ''{1}''=使得''{0}''不继承 ''{1}''【】Make ''{0}'' not extend ''{1}''
Make ''{0}'' implement ''{1}''=使得''{0}''实现 ''{1}''【】Make ''{0}'' implement ''{1}''
Make ''{0}'' not implement ''{1}''=使得''{0}''不实现 ''{1}''【】Make ''{0}'' not implement ''{1}''
Make method constructor=制造方法构造器【】Make method constructor
Create interface {0}=创建接口【】Create interface {0}
Create package {0}=创建类【】Create package {0}
Create field {0}=创建字段【】Create field {0}
Create property {0}=创建属性【】Create property {0}
Add constructor parameter=添加构造函数参数【】Add constructor parameter
Remove ''{0}'' suppression=移除''{0}''抑制【】Remove ''{0}'' suppression
Remove suppression=移除抑制【】Remove suppression
Fix Arguments=修复参数【】Fix Arguments
Change ''{0}'' to ''new {1}{2}''= 改变''{0}''成''new {1}{2}''【】Change ''{0}'' to ''new {1}{2}''
Change new operator type=改变新的操作符类型【】Change new operator type
Add to Dependency Injection Annotations=添加到依赖注入注释【】Add to Dependency Injection Annotations
Suppress for {0} annotated by ''{1}''=以 ''{1}''为 {0}的注释【】Suppress for {0} annotated by ''{1}''
Add to Special Annotations=添加到特殊的注释【】Add to Special Annotations
Add ''{0}'' to special annotations list= 添加''{0}''到特殊的注释列表【】Add ''{0}'' to special annotations list
Add dependency on module ''{0}''= 添加依赖给模块''{0}''【】Add dependency on module ''{0}''
Add module dependency=添加模块依赖关系【】Add module dependency
Add library ''{0}'' to classpath=添加库 ''{0}''到类路径【】Add library ''{0}'' to classpath
Add library to classpath=添加库到类路径【】Add library to classpath
Circular Dependency Warning=循环依赖警告【】Circular Dependency Warning
Static import method=静态导入方法【】Static import method
Choose Method to Import=关闭方法 导入【】Choose Method to Import
Add ''{0}'' Library to Project=将''{0}'' 库添加到项目中【】Add ''{0}'' Library to Project
Choose directory where the library will be copied=关闭目录 在库将被复制的地方【】Choose directory where the library will be copied
Library file ''{0}'' does not exist= 库文件''{0}''不存在【】Library file ''{0}'' does not exist
&Use ''{0}'' from {1} distribution= 用''{0}''从{1}分布【】&Use ''{0}'' from {1} distribution
&Copy ''{0}'' library files to= 复制''{0}''库文件到【】&Copy ''{0}'' library files to
Permute arguments=置换参数【】Permute arguments
Fix literal type=解决文字类型【】Fix literal type
Create getter, setter and field for ''{0}''=创建获得方法，设置方法和字段为''{0}''【】【】Create getter, setter and field for ''{0}''
Create getter and field for ''{0}''= 创建获得方法和字段为''{0}''【】Create getter and field for ''{0}''
Create setter and field for ''{0}''= 创建设置方法和字段为''{0}''【】Create setter and field for ''{0}''
Fix StringBuilder append=修复StringBuilder附加【】Fix StringBuilder append
Change to ''{0}''= 改变成''{0}''【】Change to ''{0}''
Fix Character Literal=修复字符文字【】Fix Character Literal
Convert to string literal=转换为字符串【】Convert to string literal
Initialize in constructor=【】Initialize in constructor
Choose constructors to add initialization to=选择构造函数来添加初始化【】Choose constructors to add initialization to
Remove redundant arguments to call ''{0}''=删除冗余参数去调用 ''{0}''【】Remove redundant arguments to call ''{0}''
Remove redundant arguments=删除冗余参数【】Remove redundant arguments
Replace with list access=替换为访问列表【】Replace with list access
Add qualifier=添加限定符【】Add qualifier
Original class=原始类【】Original class
Wrap using ''Arrays.asList''=包裹用''Arrays.asList''【】Wrap using ''Arrays.asList''
Add missing annotation parameters - {0}=添加缺少的注解参数- {0}【】Add missing annotation parameters - {0}
Add missing annotation parameter ''{0}''= 添加缺少的注解参数''{0}''【】Add missing annotation parameter ''{0}''
Add qualifier {0} to method=添加限定符 {0}到方法【】Add qualifier {0} to method
Classes to check=类检查【】Classes to check
Class name should be specified=需指定类名
Make class &static=使类静态化
Caret should be positioned inside method to be refactored=光标应该定位在被重构的方法中
Caret should be positioned inside constructor to be refactored=光标应该定位在被重构的构造函数中
Caret should be positioned at the name of method or class to be refactored=光标应该定位在被重构的方法或类的名字中
Caret should be positioned at the name of method or variable to be refactored=光标应该定位在被重构的方法或变量的名字中
Caret should be positioned inside anonymous class to be refactored=光标应该定位在被重构的匿名类中
Caret should be positioned inside class to be refactored=光标应该定位在被重构的类中
Caret should be positioned at the name of element to be refactored=光标应该定位在被重构的元素的名字中
Caret should be positioned at the name of local variable to be refactored=光标应该定位在被重构的局部变量的名字中
Caret should be positioned at the name of local variable or expression to be refactored=光标应该定位在被重构的局部变量或表达式的名字中
Caret should be positioned at symbol to be renamed=光标应该定位在被重构的符号中
Caret should be positioned at symbol to be refactored=光标应该定位在被重构的符号中
Selected {0} is not located inside the project=选定的{0}不在项目中
Selected element is not located inside the project=所选元素不位于项目内部
Selected {0} is located in the read-only part of injected language document=选定的{0}在被重构文件的只读文件中
Cannot resolve {0}=不能解决{0}
{0} refactoring is not supported for JSP={0}重构不支持JSP
Wrong {0} value: ''{1}'' for parameter ''{2}''=错误 {0} 值: ''{1}'' 参数 ''{2}''
Propa&gate Parameters=传递参数...
Propagate E&xceptions=传递异常...
Select Methods To Propagate New Parameters=选择要传递新参数的方法
Select Methods To Propagate New Exceptions=选择要传递新异常的方法
Recursive propagation of parameter changes won't be performed=递归传播的参数的更改不会被执行
Recursive propagation of exception changes won't be performed=递归传播的异常的更改不会被执行
Wrong type: ''{0}'' for parameter ''{1}''=的参数''{1}''错误类型:''{0}''
Wrong type: ''{0}'' for exception=异常的错误类型:''{0}''
Vararg parameter should be the last in method signature=可变参数应该在方法签名的最后
Wrong type ''{0}'' for exception, should extend java.lang.Throwable=错误的异常类型''{0}''，应继承java.lang.Throwable
&As is=保留原样
&Escalate=升级
Pac&kage local=局部包
Visibility=可见
&Visibility:=可见:
Select an &instance parameter:=选择一个实例参数:
&Package for new interface:=包为新界面:
&Change usages of {0} to:=更改{0}的使用到:
&Use interface/superclass in instanceof=使用接口/超类在实例
Pass &outer class' instance as a parameter=使外部类实例作为一个参数
P&ull up members of {0} to:=把成员的{0}:
Mem&bers to be pulled up=成员被拉起
Make abstract=抽象化
JavaDoc for abstracts=JavaDoc的摘要
&Name for extracted include file (default extension: {0})=提取包含文件名称(默认扩展: {0})
&Replace with delegation inheritance from:=替换委派继承从:
&Super class name:=超级类名称:
Delegate mem&bers=委派成员
Generate &getter for delegated component=为委派成员生成getter
&Package for new superclass:=新超类的包:
&Package for original class:=原始类的包:
&Package for original interface:=原始接口的包:
Mem&bers to form superclass=超类的成员
R&ename original class and use {0} where possible=重命名原始类并在可能的情况下使用{0}
&Rename original class to:=重命名原始类到:
Mem&bers to form interface=成员形成接口
Extract interface from:=提取接口从:
Rename implementation class to:=重命名实现类:
Rename original interface to:=重命名原始接口到:
Use variable &initializer to initialize parameter=使用变量初始器到初始参数
Replace fields used in expressions with their getters=替换字段用于表情和他们的getter方法
Replace fields &inaccessible in usage context=替换上下文没有使用的字段
Class does not exist in project. Do you want to create it?=类不存在在这个项目.你想创建它吗?
Choose Destination Class=选择目的类
Rep&lace write access occurrences=替换白名单匹配项
Cannot perform refactoring in this context=不能执行重构在这个上下文
Extract Variable refactoring=提取变量重构
Cannot extract {0} variable=不能提取{0}变量
Variable of &type:=类型的变量:
There are no parameters that have reference type=有没有具有引用类型的参数
All reference type parameters have unknown types=所有的引用类型参数都未知类型
All reference type parameters have types that are not in project=所有引用类型参数的类型,不是在项目
Move Instance Method=移动实例方法
Move method is not supported for constructors=移动方法不支持构造函数
Move method is not supported for generic classes=移动方法不支持泛型类
Move method is not supported when method is a part of inheritance hierarchy=不支持移动方法当方法是一个继承层次结构的一部分
Synthetic jsp class is referenced in method=合成的jsp类是引用的方法
There are no variables that have reference type=有没有具有引用类型的变量
All candidate variables have unknown types=所有的候选变量都未知类型
All candidate variables have types that are not in project=所有的候选人不变量类型的项目
Interface {0} does not have base interfaces=接口{0}没有基本接口
Fields to be refactored should belong to the same class=重构的字段应该属于同一个类
Encapsulate fields refactoring cannot be applied to interface=封装字段重构不能应用到接口
Selected block contains invocation of another class constructor=选块包含调用另一个类的构造函数
Selected block should represent a set of statements or an expression=选块应该代表一组语句或表达式
Press Escape to remove the highlighting=按逃到删除高亮显示
Replace Inheritance With Delegation=用委派替换继承
{0} is an interface={0}是一个接口
Selected expression cannot be a constant initializer=选定的表达式不能初始化一个常数
Initializer for variable {0} cannot be a constant initializer=初始化变量的{0}不能初始化一个常数
Cannot extract field in the interface=不能提取字段在接口
Selected block should represent an expression=选块应该代表一个表达式
{0} is not supported in current context={0}是不支持在当前上下文
Type of selected expression cannot be determined=类型的选定的表达式不能确定
Selected expression has void type=选定的表达式有空隙类型
to rename=重命名sdf
to delete (with usage search)=删除(使用搜索)dsdf
Invalid expression context=无效的表达式上下文
{0} refactoring is not supported in the current context={0}重构是不支持在当前上下文
Cannot extract variable in super constructor call=不能提取变量在超级构造函数调用
{0} is modified in loop body={0}是修改在循环体
Introducing variable may break code logic=引入变量可能打破代码逻辑。
No selection=没有选择
Selection does not form a fragment for extraction=选择不会形成一个片段提取
Cannot extract selected elements into include file=不能提取选定的元素包含文件
The language for selected elements has no associated file type=语言为选中的元素没有相关的文件类型
Make Method Static=把方法静态化
Cannot make abstract method static=不能把抽象方法静态化
Caret should be positioned inside a class to pull members from=插入符号应该定位在一个类来拉成员
{0} does not have base classes/interfaces in current project={0}没有在当前项目的基类/接口。
Pulling members up from {0}=从{0}向上移动成员
Caret should be positioned inside a class to push members from=插入符号应该定位在一个类来推动成员
Caret should be positioned at the class, method or field to be refactored=光标应该定位在被重构的类/方法/字段中
Move {0} &packages to another package={0}包移动到另一个包(
Move &package ''{0}'' to another package=移动包"{0}"到另一个包(
Move {0} directories to &another source root={0}目录移动到另一个源根(
Move directory {0} to &another source root=移动目录{0}的另一个源根(
Move &inner class {0} to upper level=移动内部类{0}上水平(
These package prefixes will be changed=这些包前缀将被改变
Class {0} does not have implicit default constructor=类{0}没有隐式的默认构造函数
Would you like to replace default constructor of {0} with factory method?=你想用一个工厂方法替换{0}的默认构造器吗？
Refactoring is not supported for local and JSP classes=重构不支持局部和JSP类
Refactoring is not supported for JSP classes=重构不支持JSP类
Cannot replace temp with query in interface=不能取代临时与查询界面
Cannot find a single definition to inline=无法找到一个定义内联
Variable ''{0}'' is accessed for writing=变量"{0}"可写
Another variable ''{0}'' definition is used together with inlined one=另一个变量"{0}"定义配合使用内联一个
Unable to start type migration=无法启动类型迁移
Replace Code Duplicates=替换重复代码
Locate caret inside a member=定位插入符号在一个成员
Replace With Method Call does not work for constructors=替换为方法调用不工作为构造函数
Method {0} does not have a body=方法{0}没有方法体。
Method {0} has an empty body=方法有一个空的{0}身体
{0} has not found any duplicates={0}没有发现任何副本
{0, choice, 1#1 code fragment|2#{0,number} code fragments} found={0,选择,1
{0} with {1} visibility won''t be accessible from {2}={0}和{1}能见度不可以从{2}
{0} contains call with null argument for parameter {1}={0}包含null参数调用的参数{1}
No members selected=没有成员选择
{0} is {1} and will not be accessible from {2}=0}{1},不会可以从{2}
Renamed class will hide {0} in {1}=重命名类将隐藏{0}在{1}
There is already a {0}. It will conflict with the renamed {1}=已经有一个{0}.它将冲突与更名为{1}
{0} will override renamed {1}={0}将覆盖更名为{1}
{0} will hide renamed {1}={0}将隐藏更名为{1}
renamed field will hide {0}=重命名字段将隐藏{ 0 }
There is already a {0} in the {1}. It will conflict with the renamed parameter=已有一个{0}在{1}中。它会与重命名的参数冲突。
Changing signature of {0}=改变签名的{0}
There is already a {0} in {1}. It will conflict with the new parameter=已有一个{0}在{1}中。它会与新的参数冲突。
{0} to change signature={0}改变签名
New name of method is not Java identifier=方法的新名称不是Java标识符
References to be changed {0}=引用是改变了{0}
Replace instance qualifiers with class references=替换实例与类引用限定符
Make {0} Static=把{0}静态化
This method=这种方法
Add &object as a parameter with name:=添加对象作为参数名称:(
Add &object as a parameter to constructors with name:=添加对象作为一个参数的构造函数与名称:(
Add parameters for &fields:=添加参数字段:
Add parameters for &fields to constructors:=添加参数字段构造函数:
{0} is already overridden in {1}. Method will not be pushed down to that class={0}已经覆盖在{1}.方法将不会被下推到这类
{0} uses {1}, which is pushed down={0}{1},它使用被推下
Refactoring cannot be performed=重构不能执行
Parameter initializer contains {0}, but not all calls to method are in its class=参数初始化包含{0},但并非所有调用的方法是,在它的阶级
{0} is not accessible from {1}. Value for introduced parameter in that method call will be incorrect={0}是不可以从{1}.介绍了参数值,方法调用将不正确
Use interface/superclass in instanceof=使用接口/超类的实例
Any var=任何var
&Use accessors even when field is accessible=使用访问器即使字段是可访问的(
Package lo&cal=局部包
Encapsulate=封装
Encapsulated Fields' Visibility=封装字段的可见性
Accessors' Visibility=访问器可见
Fields to Encapsulate=字段来封装
Encapsulating fields in {0}=封装字段在{0}
Fields to be encapsulated=字段封装
Invocations to be inlined {0}=调用内联{0}
Classes to push down members to {0}=类来压低成员{0}
References in code to elements from migration map "{0}" {1}=在代码元素的引用从移民地图"{0}"{1}
Declaration(s) to be generified {0}=声明(s)是泛型{0}
Occurrences to be migrated {0}=事件被迁移的{0}
References in code {0}=引用代码{0}
Occurrences found in comments, strings and non-code files {0}. Those occurrences will not be changed=事件发现在评论、字符串和非标文件{0}.这些事件不会改变
{0} to be moved to {1}={0}被移动到{1}
References in code to {0} {1}=在代码中引用到{0}{1}
Classes to be moved to {0}=类将被移动至{0}
Packages to be moved to {0}=包将被移动至{0}
References found in code=引用代码中发现
References found in generated code=引用在生成的代码中找到
Occurrences found in comments, strings and non-code files {0}=事件发现在评论、字符串和非标文件{0}
Files to be moved to {0}=文件移动到{0}
Directories to be moved to {0}=目录移动到{0}
Make {0} {1} static=使{0}{1}静态化
There is already a {0} in {1}=已存在一个{0}在{1}中
{0} uses non-static {1}, which is not passed as a parameter={0}使用非静态{1},它不是作为一个参数传递
{0} uses {1}, which needs class instance={0}用{1},这需要的类实例
Method {0} is overridden by {1}=方法{0}被{1}重写。
Making {0} static=把{0}静态化
Adding parameter to a method=增加参数到一个方法
Annotate &field as @NonNls=注释字段作为 @NonNls
Static field of &type:=类型的静态字段:
&Delete variable declaration=删除变量声明
&setUp method=设置方法(
Convert Local to Field=将局部转换为字段
Constant (static final field) of &type:=常数(静态final字段)的类型(&T):
Extract Subclass=提取子类
Extract superclass with members to directory=提取超类成员到目录
Declare &static=声明静态
Declare v&arargs=宣布可变参数(
&Fold parameters=褶皱参数(
There are multiple exit points in the selected code fragment=选定的代码片段有多个出口点。
Members to be moved=要移动的成员
Move members from:=移动成员:
To (fully qualified name):=(完全限定名称):
Mem&bers to be moved (static only)=成员需要移动(静态唯一的)(
''{0}'' is not a legal FQ-name=''{0}''不是合法的FQ名称
Source and destination classes should be different=源和目标类应该不同
Cannot move inner class {0} into itself=不能移动内部类{0}到本身
Members to be moved should belong to the same class=要移动的成员应该属于同一类。
{0} refactoring cannot be applied to constructors={0}重构不能应用于构造器
Inline Field=内联领域
{0} refactoring is supported only for final fields={0}重构仅支持final字段
No initializer present for the field=没有初始化器出席现场
Field {0} is never used=字段{0}从未使用过
Inline field {0}=内联场{0}
{0} is used for writing in {1}={0}是用来写在{1}
{0} will not be accessible from {1} after inlining={0}不可以从{1}在内联
Inline &all references and remove the variable=内联和删除的所有引用的变量
Inline this reference only and &keep the variable=仅此内联参考，并保持变量
Inline &all references and remove the class=内联所有引用并删除类
Inline this reference only and &keep the super class=这个仅供参考并保持内联的超类
Inline Variable=内联变量
Variable {0} is referenced in multiple files=变量{0}在多个文件中引用
Inline {0}=内联{0}
Inline local variable ''{0}''?=内联局部变量''{0}''？
Inline local variable ''{0}'' definition?=内联局部变量''{0}''定义？
&All invocations in project=所有调用在项目(
{0} refactoring cannot be applied to abstract methods={0}重构不能应用于抽象方法
{0} refactoring cannot be applied: no sources attached={0}重构不能应用:无源连接
{0} refactoring is not supported when return statement interrupts the execution flow={0}重构是返回语句时不支持中断执行流
{0} refactoring cannot be applied to vararg constructors={0}重构不能用于可变参数的构造器
{0} refactoring cannot be applied to inline non-chaining constructors={0}重构不能用于内联非链接构造函数
Inlining method {0}=内联方法{0}
Inlined method implements method from {0}=内联方法实现方法从{0}
Inlined method overrides method from {0}=从{0}内联方法重写方法
{0} that is used in inlined method is not accessible from call site(s) in {1}={0}中使用内联方法不可以从调用站点(s)在{1}
Method to inline=方法内联
Field to inline=场内联
Class to inline=类内联
Variable to inline=变量以内联
Analyze and Replace Usages=分析和替换使用
There are multiple output values for the selected code fragment:=选定的代码片段有多个输出值。
expression result=表达式结果
boolean method result=布尔方法的结果
Instances of {0} upcasted to {1} were found. If you continue, they will be shown in a separate Find tab=实例的{0},{1}upcasted被发现.如果你继续下去,他们将被显示在一个单独的找到选项卡
{0} uses {1} of an instance of a {2}={0}{1}的使用的一个实例{2}
{0} upcasts an instance of {1} to {2}={0}upcasts实例的{1}{2}
Replacing inheritance with delegation=替换继承与代表团
Instances casted to java.lang.Object=实例转换为java.lang.Object
Instances upcasted to Object=upcasted实例对象
Instances upcasted to java.lang.Object found=实例upcasted到java . lang.对象发现
Replacing inheritance with delegation in {0}=替换继承与代表团在{0}
Inline included file=内联包括文件
Inline the contents of ''{0}''?=内联内容"{0}"?
Included file is no longer used. Remove it?=包括文件不再使用.删除它吗?
{0} to be made static={0}被静态化
Field {0} is not accessible from {1}=字段{0}是不可以从{1}
Fields {0} are not accessible from {1}=字段{0}不可以从{1}
{0} is not initialized in declaration. Such fields are not allowed in interfaces={0}在声明处未初始化。在接口中不允许这样的字段。
{0} uses {1}, which is not accessible from the superclass={0}用{1},这不是可以从超类
{0} uses {1}, which is not moved to the superclass={0}用{1},这不是搬到超类
Push members from {0} down=推动成员从{0}下来
Mem&bers to be pushed down=成员被下移
Keep abstract=保持抽象
Interface {0} does not have inheritors=接口{0}没有继承者
Functional expression demands functional interface to have exact one method=函数表达式要求功能界面准确的一种方法
Class {0} does not have inheritors=类{0}没有继承者
Pushing members down will result in them being deleted. Would you like to create a new subclass?=推动成员下来将导致它们被删除.你想创建一个新的子类?
Edit Migration Map=编辑迁移地图
Map name:=地图的名字:
Map description:=图描述:
Package with subpackages=包和子包
Select migration map:=选择移民地图:
Package and Class Migration=包和类迁移
Migration maps=迁移映射
No Usages Found in the Project=没有发现在项目使用
Move to another source &folder=搬到另一个源文件夹
Please enter a valid target package name=请输入一个有效的目标包名称
Move Package refactoring cannot be applied to default package=移动包重构不能用于默认包
Move Class refactoring cannot be applied to anonymous classes=移动类重构不能应用于匿名类
Moving local classes is not supported=不支持移动局部类。
There are going to be multiple destination files with the same name=有多个目标文件具有相同的名称。
Select Source Root=选择根源代码
Moving directories=移动目录中
Package-local class {0} will no longer be accessible from {1}=封装本地类{0}将不可以在{1}
{0} will no longer be accessible from {1}={0}将不再可以从{1}
Move Instance method=移动实例方法
Move instance method=移动实例方法
Select a name for ''{0}.this'' parameter=为''{0}.this''参数选择一个名称
Please Enter a Valid name for Parameter=请输入一个有效的参数名称
{0} is an interface that has no implementing classes={0}是一个接口.没有实现类
Move Inner to Upper Level=移动内部,上水平
{0} will become inaccessible from {1}={0}将变得无法从{1}
Searching for variables=搜索变量中
Replacing usages of {0} with {1}=更换使用{0}和{1}
References to ''{0}'' to be replaced with references to ''{1}''=引用"{0}"被引用为"{1}"
In (fully qualified name):=在(完全限定名称):
Class {0} is not accessible from target {1}=类{0}是不可以从目标{1}
Target {0} is not accessible from {1}=目标{0}是不可以从{1}
Constructor being refactored is used in initializer of {0}. Non-static factory of inner class{1} cannot be used in this context. Resulting code will not compile=构造函数用于初始化器被重构的{0}.非静态内部类厂{1}不能用在这个上下文.产生的代码不需要编译
Replace constructor {0} with a factory method=用一个工厂方法替换构造器{0}
Replace default constructor of {0} with a factory method=用一个工厂方法替换{0}的默认构造器
Replace constructor with factory method=用工厂方法替换构造器
Replace default constructor with factory method=用工厂方法替换默认的构造器
Occurrences found in comments, strings and non-code files=事件发现在评论、字符串和非标文件
Occurrences found in comments, strings, non-code files and generated code=出现在评论,发现字符串,无代码文件和生成的代码
{0}, referenced in {1}, will not be accessible in module {2}={0},{1},引用不会被访问在模块{2}
{0}, referenced in {1}, will not be accessible from module {2}={0},{1}中引用,不可以从模块{2}
{0}, referenced in {1}, will not be accessible from the production sources of module {2}={0},{1}中引用,不可以从生产来源的模块{2}
&Hide non-existent=隐藏不存在的
{0} will be inaccessible from {1}={0}将无法从{1}
Moving {0} to package {1}=移动的{0},{1}包
&Unselect all=取消选择所有
{0} name={0}的名字
Rename {0} and its usages to:=重命名{0}和它的用法:
Rename parameters in hier&archy=重命名参数在层次结构(
Renaming something=重命名一些
Renaming {0}=重命名{0}
{0} to be renamed to {1}{2}={0}将被重命名为{1}{2}
References in code to {0}=在代码中引用到{0}
Rename variables with the following names to:=重命名变量具有以下名称:
Rename Bound Forms=重命名绑定形式
Rename forms with the following names to:=重命名形式具有以下名称:
Form=形式
Rename Inheritors=重命名继承者
Rename Tests=重命名测试
Rename inheritors with the following names to:=重命名继承者具有以下名称:
Rename tests with the following names to:=重命名测试具有以下名称:
Inheritor=继承者
Choose the ones you want to be deleted=选择你想要的被删除
{0} implements {1}={0}实现{1}。
Attempting to delete=试图删除
Items to be deleted=项已被删除
Usages Detected=发现使用
Problems Detected=发现问题
Method calls:=方法调用：
De&legate via overloading method=代表通过重载方法(
&Preview usages to be changed=预览要改变的用法(P)
Replace this code fragment?=这段代码替换吗?
 (Method will be made static)=(方法将被静态化)
 (Method will be made static and {0})=(方法将被静态化和{0})
 (Method will be made {0})=(方法将{0})
Process Duplicate {0} of {1}=过程重复的{0},{1}
Process Method {2} Duplicate ({0} of {1})=过程方法复制的{2}({0},{1})
{0} has detected {1} code {1,choice,1#fragment|2#fragments} in this file that can be replaced with a call to extracted method. Would you like to review and replace {1,choice,1#it|2#them}?={0} 已检测到 {1} 代码 {1,choice,1#fragment|2#fragments} 在该文件中，可以调用一个提取的方法代替。你想检测和替换 {1,choice,1#it|2#them}?
required by {0,choice,1#interface|2#interfaces}=所要求的 {0,选择,1#interface|2#interfaces}
extends {0}=扩展{0}
used by {0}=被{0}使用
uses {0}=使用{0}
parameter {0}=参数{0}
package {0}=包{0}
static initializer of class {0}=把类{0}的初始器静态化
instance initializer of class {0}=把类{0}的初始器实例化
''{0}'' is not a legal java identifier=''{0}''不是合法的java标识符
Method {0} is already defined in the {1}=方法{0}已定义在{1}
current class=当前类
Field {0} is already defined in the {1}=字段{0}已经定义在{1}
{0} has {1,choice,1#1 usage that is|2#{1,number} usages that are} not safe to delete={ 0 } { 1,选择,1
Of those {0,choice,1#1 usage is|2#{0,number} usages are} in strings, comments, non-code files or generated code={ 0,选择,1
&Drop obsolete casts=删除废弃转换
Preserve raw &arrays=保存原始数组
&Leave Object-parameterized types raw=离开对象参数化类型生
Perform &exhaustive search=执行彻底的搜索
Generify &Objects=Generify对象
Produce &wildcard types=产生通配符类型
Scope(s) to generify=(年代)generify范围
Items generified: {0}, casts removed: {1}=项目泛型: {0}, 转换已移除: {1}
Code contains syntax errors. Cannot perform necessary analysis=代码包含语法错误。无法执行必要的分析。
Pushed members will not be visible from certain call sites=推动会员将不可见从特定调用地点
Return type of the method or type of the variable to be refactored should be boolean=该方法的返回类型或类型的变量是重构应该是布尔
References to be inverted {0}=引用是倒{0}
{0} to invert={0}转化
Please enter a valid name for inverted {0}=请输入一个有效的名字倒{0}
&Name of inverted {0}:=名字倒 {0}(&N):
Invert {0} {1} and its usages=转化的{0}{1}及其用法
Foreach parameter initializer can't be inverted=Foreach 参数初始值设定不能反转
{0} is a part of method hierarchy. Do you want to delete multiple parameters?={0}方法是层次结构的一部分。你要删除多个参数吗？
Class to be moved=类移动
The destination directory does not correspond to any package=目标目录不对应于任何包
Cannot Move=无法移动
Cannot move package into itself=无法移动包到其自身
Rename Constructor Parameters=重命名构造器参数
Rename parameters with the following names to:=重命名参数具有以下名称:
Remove parameter ''{0}'' no longer used=移除不再使用的参数''{0}''
Inline to Anonymous Class=内联到匿名类
Classes which have subclasses cannot be inlined=类有子类不能内联
Classes which implement multiple interfaces cannot be inlined=实现多个接口的类不能被内联
Move {0} to {1}=移动{0},{1}
To packa&ge=包装(dg
&Make inner class of=使内部类(
Inline class {0}=内联类{0}
It is not allowed to move a class into a non-static inner class=不允许移动类到非静态内部类
It is not allowed to move a class into itself=不允许移动类到自身
Unsupported references found in {0} files=不支持的参考文献发现在{0}文件
Checking tail call usages=检查尾调用用法
Inline parameter ''{0}'' with initializer ''{1}''?=内联参数"{0}"与初始化"{1}"?
Inline parameter is not supported when method is a part of inheritance hierarchy=内联参数不支持当方法是一个继承层次结构的一部分
Inline for varargs parameters is not supported=不支持内联可变参数
Target class {2} has different language than {0} {1}=目标类{2}有不同的语言比{0}{1}
Feel &lucky=感到幸运(
Target &destination directory:=目标目录:
Move instance method is not supported for {0}=移动实例方法不支持{0}
Use {0} for path completion=使用{0}的路径完成
Method is used in method reference. Proceeding would result in conversion to lambda expression=方法参考引用。程序会导致转换lambda表达式
Method whose parameters are to wrapped=其参数为包装的方法
Introduced parameter class {0} for {1}()=为{1}() 引入了参数类{0}
Method to extract parameters from=从方法中提取参数
Introduce Parameter Object=引入参数对象
Running:=运行:
Done:=完成:
of=的
Failed:=失败:
s=秒
ms=毫秒
<no name>=<无名>
<UNKNOWN>=<未知>
<NO TESTS>=<没有测试>
<NOT RUN>=<不运行>
TERMINATED=终止
<undefined>=<未定义>
(none)=(无)
Hierarchy=层次结构
Dependency Viewer=依赖查看器
Module Dependencies=模块依赖关系
Time Tracking=时间轨迹
Database=数据库
{0} carets={0} 插字符
(disabled)=(禁用)
(incompatible)=(不兼容)
{0,choice, 0#no usages|1#1 usage|2#{0,number} usages} found={0,choice, 0#no usages|1#1 usage|2#{0,number} usages} 找到
{0} (in {1})={0}(在{1})
{0,choice, 0#No|1#1 too large file was ignored|2#{0,number} too large files were ignored}={0,choice, 0#No|1#1 太大的文件被忽略|2#{0,number} 太大的文件被忽略}
Modified=已修改
<none>=<无>
Locally added=本地已添加
Locally removed=本地已移除
&VCS=VCS
Line before {0} deleted=在{0} 之前的行 删除【】Line before {0} deleted
{1} lines before {0} deleted=在{0}之前的{1}行 删除【】{1} lines before {0} deleted
Line {0} changed= 行{0}改变【】Line {0} changed
Lines {0}-{1} changed=行{0}-{1}改变【】Lines {0}-{1} changed
<html>Failed to change read-only status for the following files:<br>{0}</html>=<html>未能更改下列文件的只读状态:<br>{0}</html>
Check {0} Status=检查{0}状态
Update {0}=更新{0}
Integrate {0}=合并{0}
{0,choice, 0#No files|1#1 file|2#{0} files}=({0,choice, 0#No files|1#1 file|2#{0} files})
{0,choice, 0#No directories|1#1 directory|2#{0} directories}=({0,choice, 0#No directories|1#1 directory|2#{0} directories})
{0,choice, 0#No directories|1#1 directory|2#{0} directories} and {1,choice, 0#no files|1#1 file|2#{1} files}=({0,choice, 0#No directories|1#1 directory|2#{0} directories} and {1,choice, 0#no files|1#1 file|2#{1} files})
&Include into commit=包含到提交
Unversioned:=未受版本控制的:
Are you sure you want to delete the shelved changelist named ''{0}''? You will not be able to undo this operation=你确定你想删除被命名为''{0}''的被搁置的变更列表吗?您将无法撤消此操作。【】Are you sure you want to delete the shelved changelist named ''{0}''? You will not be able to undo this operation
Are you sure you want to delete {0} shelved changelists? You will not be able to undo this operation=您确定要删除{0}个被搁置的变更列表吗?您将无法撤消此操作。【】Are you sure you want to delete {0} shelved changelists? You will not be able to undo this operation
You are going to remove {0} file(s) from shelved changelist. Are you sure?=您将从被搁置的变更列表中删除{0}文件(s)。你确定吗?【】You are going to remove {0} file(s) from shelved changelist. Are you sure?
Remove Files from Shelved Changelist=从搁置的变更列表中删除文件【】Remove Files from Shelved Changelist
Successfully created patch {0}. {1} of the selected files {1,choice,1#is|2#are} binary and {1,choice,1#was|2#were} not included in the patch=成功创建补丁{0}。选择的文件{1,choice,1#is|2#are}二进制和1，{1,choice,1#was|2#were} 不包含在补丁中。【】Successfully created patch {0}. {1} of the selected files {1,choice,1#is|2#are} binary and {1,choice,1#was|2#were} not included in the patch
All of the selected files are binary. Binary files cannot be included in patches. No patch has been created=所有被选中的文件都是二进制文件。二进制文件不能包含在补丁中。目前还没有创建补丁。【】All of the selected files are binary. Binary files cannot be included in patches. No patch has been created
<no comment>=<无注释>
Current VCS does not support viewing changes by revision=当前的VCS不支持通过修订来查看变更【】Current VCS does not support viewing changes by revision
Attach with {0} To=用{0}附加到
Attach to a locally running process with an available debugger=使用可用的调试器连接到本地运行的进程
&Condition:=条件
<invalid frame>=<无效帧>
Path:=路径:
<unknown>=<未知>
Safe delete=安全删除
Deleting {0}=删除中{0}
RUNNING=运行中
Ant Build=构建ANT
<None>=<无>
E&valuate=评估
Emmet=Emmet (Zen Coding)
